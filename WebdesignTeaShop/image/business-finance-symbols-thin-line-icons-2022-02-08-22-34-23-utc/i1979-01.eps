%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: i1979-01.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For:  
%%CreationDate: 8/25/2016
%%BoundingBox: 0 0 1000 989
%%HiResBoundingBox: 0 0 1000 988.8397
%%CropBox: 0 0 1000 988.8397
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 7382 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF
%FDDEFFCFFD0EFFA859A8A87E7DFD13FFA88484FD2FFFCAC3C9C9CACACFFF
%FFFFCACAFFCAFFFFFFCAFFFFFFCAFD04FFCACACAFFFFFFCACFCAC3C9C3FD
%0EFF8459FF5959A88459FD13FF595959FD30FFA0FFFFCAA1FFFFFFA1CACA
%C99AFFFFCAC9FFFFCAA1FFFFFFA1CAA0C3FFFFC3CFA1FFFFFFCFFD0CFF84
%59FF8B6059AF848459FD11FFA8597EAFFD30FFC9FFFFCACAFFFFFD05CAC9
%C3FFCACAFFFFCACAFFFFFFCACACAC3CAFFCACAC9CAFFCFFD0DFF2FFF5935
%606035608459A8FD10FF8459FD32FFA1FFFFCAA0CAA1C9A1CAA7CACACAA1
%CACAFFFFCFC9FFFFFFA1CAA1FFA1CAA7FFA1C9A1CACAFD0BFF7D7E2F2F5A
%605A8560365A7EFD10FF597E7EFD31FFC9FFFFCACAFFFFFFCACACFCACFFF
%CAC2CFFFFFCACAFFFFFFCACACAFFFFC3C9CFCAFD0FFF84848B358B5A8460
%5A60605AFD0FFF595A847EFD31FFC3FFFFCAC3FFFFFFC3CAA7CACAFFFFC3
%CAFFFFCFC3CAA7FFC3CAA1FFFFFF9AFFC3CAC9CACAFD0BFF7E7E8460605A
%595A2F2F2F5AFD0EFFA859A8AF7E84FF7EA8FD30FFCAFD07FFCAFD08FFCA
%C9CACAFD08FFCFC9CAC9FD0CFF84A96061602F848B8B358B35FD0EFF7EA8
%CFADAD59845984FD2CFFA9A8FF84AFA8A8A8AFA8FFAFFFA8A9A8AFAFFFA8
%FFAFFFFFFFA8A9A8FF84A8AFFFFFFFA8A9AFFD0BFF59840C60605A2F6060
%616059A8FD0CFFA959CF818881582FAF2EFD2CFF84FF8484A8847EAF84FF
%A984A8AFA8A8A8FF84A8A8AFFFFF8484A8FF84AFA88459FF848484FD0CFF
%AF2F85358535595A8B5A3584FD0DFF59FFACAC82AC8159FFAF7EFD2AFFA9
%84A8FFA8A884A9848484AF84847EFF84FF7D847D84A8FFFF8459FFFF84FF
%FF7D847D84A8A884FD0CFF845A2F35607E8B355A35FD0DFF7E84CF8881AC
%81AC575A842FA8FD2AFF84AFA8A984A9A8A884A9A8AFAF84AFAFFF84A8AF
%848484FFA8A884AFA8A884A9A8FF7EAF84A8FD0DFF842F85355A603559FD
%0EFF7E59AD81AC575F58592EA884A9FD2BFFA8FFA8FFFFFFA8FFA8FD0BFF
%A8FD05FFA8FFA8FD16FFA82F7E595A7EFD10FF845859597E84FFA9FDFCFF
%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD4AFFA8847E84A8FD2DFFAFFD4CFF
%A85984FF7E5A7DFD29FFA87E5984597E59A8FD0EFFA8847E847D847E847D
%847E84A8FD2DFF7EFFFFA859847EA8FD0FFF7E847E845A847E847EA8FD0E
%FF597EA8FD05FF5A7EFD0DFF7E59847E845984598459842F84FD2DFF59FF
%8459A88459A8FD0EFF5984A8AEA7AEA7AEA7A85984FD0CFF7D7EFFA97DA0
%7BA07CCE7D5AFD0CFF59847D7E597E7EA884A8847E7EFD2CFFAF843584A9
%FF8459A8FD0DFFAF84FFADAC8258ACACAC82AC59FD0BFFAF7EFFCF7B7B7B
%A67B9F9ECD7DAFFD0BFF84A88484A859AFA88484FFA8A8FD2DFF595AFFFF
%FF8459A8FD0DFFAF7ECF81AC585A348281AC8159FD0BFFA97EFF9F7C7B7C
%9FA5519FC6A07EFD0BFF59A859C9C2A07EAF7E84A8A87EFD2DFF848484AF
%847E84A8FD0DFFA884CFAC815FFFFF2F8888AC58FD0BFFA87EFFC79FA57B
%A59FC7A5C757A9FD0BFF84A884C3C276A8A8A884FF84A8FD2DFF7EAF7E7E
%7DAF7EFD0EFFA87ECF81AC58A9595881AC8159A9FD0BFF5984C8C67B7C51
%7C9EC77A59FD0CFF59A959C3BC9A7EA959A9FFA87DFD2DFFA82FA9FFAF2F
%84FD0EFFA884CFAC8283348288AC88AC59FD0DFF5A849FC7C6C7C6C77B59
%AFFD0CFF84A87EA0A052FD04A8FF84A8FD2CFFA859CA528559A85284FD0E
%FF59CF82AC81ACABAC81AC5D59FD0EFF845A58CEC8A05284FD0EFF59FF84
%847D84AFA97EAFA8A87EFD2CFF59FFC3C252C9C2C252FD0EFFA85983585E
%588358595859A8FD10FF845AFF5AFD10FF84AFA984A8FD0584FFA884FD2C
%FF7E53A0BCC29AC27659A8FD0FFFA8A9A8A9A8A9A8FFA9FD12FF845359A8
%FD0FFF597E597E597E597E597E7E5A7EFD2DFFA9597D527D5984FD2EFF84
%FD11FF84AFA8A984AFA8A984A9A8FD30FFAFAFA8FDFCFFFDFCFFFDFCFFFD
%FCFFFDFCFFFDFCFFFD17FF84FD13FF7E847E847E847D84FD12FFA88484A8
%A8FD13FF84847D8484FD33FF7E5959A8FD11FF845A595A597E598459FD11
%FF598484A87E5A7EFD11FF5984A8FFA88459FD30FFA85A5AFFA8597EFD10
%FF84598484A884A8595984FD0FFF35A8C3C3C2C9A17D59FD0FFF53FFFFA8
%7EA9FF8459FD2EFFAF5AA8CFC7C7C75884FD0FFF847E84AF858B8B6059FD
%0FFF8484C3C2BCC3BCC29A84FD0EFF84A9A85A84A97E5AFF84A8FD2DFF7E
%84CEC0C7C0C79E58A9FD0EFFA853A88561608B5959A8FD0EFF84A1C2BCA0
%9AC27652A8FD0EFF847E7EFD04FF847E7EA8FD2DFF7E7E51C7C6A57BC758
%FD0FFF5984A88B60856085597EFD0EFF847D527D537E598459FD0FFF7E59
%84FFFFAFFFFF7E5984FD2DFF592F84529F2D2F5152A8FD0DFFFD04595A85
%60602F592FA8FD0DFFA92FA92FAFFFFFFF84A8FD0DFF845A2F59597E2F59
%7E595959A8FD2CFF2FAFFFFF8484A8AF59A8FD0CFFA88484355960618B5A
%842FAF59FD0EFF5A84FD05FF84AFFD0DFF84AD8384FFAFA87EA95AAD58A9
%FD2CFF7EA8FD06FF7EA8FD0CFFA87EAF847E608B615A7E84A87EA8FD0DFF
%8459A8FD04FF84A8FD0DFF5A8358A9FD05FF84825884FD2CFF8484FD05FF
%A87DFD0DFFAF84FFFF7E845A605AA8FFFF7EFD0EFFA8A8FD05FF7DAFFD0E
%FF353584FD05FF595959FD2EFF59FD05FF59A8FD0DFFAF2FA8A8FD04597E
%53AF7D59FD0EFF7DA8FF84A8FFAF59A8FD0EFF842FA8FFAFFFFFA859A8FD
%2FFFA959FFFFFF7E84FD0EFFA9A8845959A984A9845959A984FD0FFFAFFF
%A87E597E84FD10FF84595959FFFF7E84FD31FFA8597E5984FD12FF7DA8FD
%04FF7EA8FD14FFA87EAFFD13FFAFA8595A7EFD34FFA8FD48FFA9A9FDFCFF
%FDFCFFFDFCFFFDFCFFFDFCFFFDE1FFAFFD17FFAFFD4BFFA884A884AF84A8
%84A8A8FD0DFFA87E597E597E597D522F59FD12FF5A2FFD49FF8459A98484
%2F8484A87E5AA9FD0CFFA87EFD04FFCABCC22F84FD12FF597EFD12FFFD05
%84A884847E84A8FD2BFF7E2FA87E84845A84847EA85935A9FD0BFFFD0484
%5984A1C29A7EFD12FF595A597E84FD0FFFA87E8484597E59845984847EFD
%2BFF5984A8A9A8FF59A9A8AFA98434AFFD0BFFA984FFA8FFAFCA9A5959AF
%FD10FF5984CECEA659FD0FFFA984847EA884847EA87EA97EFD2BFF7E59A8
%59A8FF7E7E8459FF7D58A8FD0BFF8484847E59A9C99A53A859A8FD0FFF7E
%59A57A7B2FFD0FFF84847DFF85AF85AF85845984A8FD2AFF7E84A8AFA8FF
%59AFA8FFFF8434FD0CFFA984FFA8AFAFCABCA17EA97EFD0FFFA85A595A59
%A8FD0FFFAF7E84AF8B6185608B5A847EFD2BFF8459A87E7EA8848484A9FF
%5958A8FD0BFF84A8A87E59A9C9C29A84A884FD10FF59837D59A8FD0FFF84
%847DAF6085608560607D84A8FD2AFF7E7EA8A8A8AF59AF84A8A88458AFFD
%0BFFA884FFA8AFA8A8BCA07D8459FD0FFFAF5AC8C758A9FD0FFFA97EAFAF
%8B618B618B5A8484FD2AFFA88459A87EA9A85984A884A95958A8FD0BFF84
%84A8847E847DC29A2F5984A8FD0EFF7E7DC7C0C752FD0FFF59597E84355A
%355A595953597EFD2AFF7E8459847D7D2F5A7D83598358AFFD0CFFA8FD04
%FFCABCC359FD11FF597C7AA57B59AFFD0DFFA835598459847D847D847D84
%5959FD2AFF8459592E58582F588334583459A9FD0AFF842F7E597E595A59
%59767EFD10FF7E5A7E847E84597EFD0EFFA8847EA884847EA884847E84A8
%FD2CFFAFFFA9FD13FFA85A5984598459845959A8FD10FF847DFFA8AFA8A9
%59FD78FFA8847D847E847DA9FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF
%FDFCFFFDFCFFFDFCFFFDFCFFFD57FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-08-25T15:48:59+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-08-25T15:48:59+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-08-25T15:48:59+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FUvvPMOg2V7FY3mo21tezU9G2lmRJGqaCisQTU9MkIEiwGByRBond0HmHQZ9SfTINRtpdRjr6lm&#xA;kyNMKdaoDy27+GJgautlGSJNWLTDIs3Yq7FXYqh9Q1LT9Otjdahcx2lspVWnmYIgLnitWagFScIi&#xA;TyYykIiyqwTwzxLNBIssTiqSIQykeII2OAhINr8UuxV2KuxV2KuxV2KuxV2KuxV2Ksb1HRdNTWdK&#xA;iWIiOd5/WUO9G4xFhX4uxzFnijxx87+52eHUzOKZvcVWw718txZ6V5ggh+NLX6k/CNFkl+IzKa0U&#xA;OfHc4mQhMDpw/pRGEsuEnbi4x3Doo6lqsN1qkItnkASxvi4ZJIhX9zxPxqtab9OmCeQGQr+bL9DP&#xA;DgMMZ4q+uHUH+d3IO3u9VgvrW6ty9xBBpNk93ZirNIrtLydP+LF41/yumVxlIEEbjgFj5/a3Tx45&#xA;QlGWxOWdHu5bHyP2J9bXcV1rUc1vL6ltLZCSNlPwkGTY5kxkDOxy4XXzxmOIgipCf6FSRm/xFAtT&#xA;xNpMSvaolj3phP8AeD3fqYgfuT/WH3FT1x3W60YKxAa+AYA0qPq8xofuwZTvH+t+gstKAY5P6n++&#xA;ilXlnU7y1igi1CQy2l9LKLK5b9iQSMPQc+/GqH/Y+GU4MhAAlyPL9X6nL1uGMyTAVKIHEO8UPUP0&#xA;/ND3TQSfo5L31pbZr/UxIkImdyFmm4DjDVyBQZGVGruuKXf3nubIAjjMaEuDHzruj37J1ottoiXD&#xA;yWEFzFKE4s08d3GCpINB9YAU7jtvl+KML9IP2/pcLUzykATMSPIwP+5TjL3CdirHvPfmG60TQJZN&#xA;Phe51i65QaXbRp6jtPwZ6hO4REZz8qd8sxQ4jvyac+Qxjtz6PM/8QaTdHU9B0u3k1W3vAP0pr9xx&#xA;kldpIghMwnVPTMfH4UStPBTXM/Hh5E/J0uo1dXGPxJ5lZZ38sGg2tlqWmrBYaREssWoWEiC4aeMC&#xA;k9uygtzlNS3PrWhB65M4RuRzao6w2B/CPn77eleQfMN5q2jmHU1ePWLErHerIEUuHHOGb92zp+8j&#xA;IJodm5DtmuzY+E+TvdNm44+bJsqch2KuxVhP5p6l6WlW1hbh3vZZ0uysUK3DR21myyzztG5VWCKB&#xA;sftEgZfgjvbi6qW1df1Jp5L8q6FoVg82kyNcLqXC5luiRxl5DkrJHGEiQEN+wgyGSZkd+jZhxRgN&#xA;urIsrbnYq7FXYq7FXYq7FXYq7FXYq7FUqvms5da0/wD0yBJrRpC9u0iiU+rEVWi9e9chLGSQe5ux&#xA;54xhKB5yr7Daw3GnHURrX1+2+oxwNaNL6q8RIZA1OVePalK4+EeO/JH5iPg8P9K/spZqyWs+qW/+&#xA;m28cotri3WB5AJGa69MRlV6n7GCeIyN+R+1nh1MYRMTzMon5X+tqwtYdNmiu7m7gSD6hbWgcuFBa&#xA;FnJYFqDifUFMGPCQf80D5MtRqoyjX9OUvnX6mtKsdNh1W5v7C8iks5Y25QI6sscnIPIykE0Vq1I7&#xA;H54xwcMyeh6Lk1niYhE8wefeK6+77le/h1FtSt7zTntnYQPGyTswqrsjBl4BtvhwThLiuNfFcOTH&#xA;wGM75g7V5/rULpb1ja3Gqz2dsun3K3MjLIwURmKWL4jIFpVn27bY+HORF1senuT42KAkI36o1vXe&#xA;D+h0VtpNroEWnardW/o3JkCM0iormSQyL6bMRVhyFKd8MMHo4Tuxy6z974kTXL7qQyaNqNpb2P1e&#xA;7guLnTri5eaS5YryN0zMOXAGj0lByoYZgCtyL5+bknWYpmfECIyERt04a/UmWl3up3FxKk8ljJHD&#xA;VJRayO7pJ/KwI2+nLojJfqqnEyHCR6DK/Ov0JpljQ7FWHfmBMn1zQIJJRaxJdS3r3lQGVbO3eRok&#xA;J2BlUlST+zyy/AObiao8r8z8g8za8iutGvNZ0u1kkn1KEJMjsqiP042AY8uPILy/ZrXNq8zW9KV1&#xA;YXt1ZWupaNqzyXtvZWluLaAwtEpEMQmUgggPyBJruDtkYcm7MRxV7vuZ5+U6TWup+YLCSX63Q2t1&#xA;9ccAS1lR4/RlI4qeCwhl4r+0cwtYNwXbdlSuJD0bMJ2rsVWyyxxRvLKwSOMFndjQBQKkknsMVJeb&#xA;2wt9Svm816hcXsEmoiml21tKYgmnRkel6i9/XYGUj3GY+u7ThpiIEWXBsE8Zvfl7v2oWz81anoq3&#xA;XlrRoY/Ujd7vSZ72otoNOCtLKszKwoIXX01q3Rl8Mv0epx6qPiC+4jrf7WMcxjcY/C+56B5Y8wWn&#xA;mDQrPV7U/u7lKsla8JFPF0JH8rAjLJwMTTmYsgnEEJpkGx2KuxV2KuxV2KuxV2KuxV2KsaubDU5N&#xA;U1KJorySwvmp6avZJaMrWqRHmxrdr8SmpUfLLQRQ/b/Y0GJs86Purl80oi8sX/pxhtOkENi0Mlof&#xA;9x63SSRrLGfR4x/V5EVHHD1grCpOxyfGO/72sYj3cvd/Z80TomneYrK9ZpoLqGGWSMiKyGnLB6af&#xA;CBMrnmrcAPU9HbrxyMjEj+1lCMgevwr8fJV8t+WtX0ufSEdlawt7NhNEz8nhupEjEiqd+Ubspbr8&#xA;Jr2IozmDaceMxrupSn8u68+naTYwpGgGnRWOovIwZFVfTaVCqkFhIIzH8P8ANXETFk+aDjlQHlRV&#xA;dKste0i6hWawe+gtYprW3e0aFQImkSSIcZ5YyAi1jG/7PvjIg9UwjKJ5WidV0vUf8Tx6xHa/XbWC&#xA;KBPqwdFcyIbmsiCQqnKP1lpyI2Y0NRTBGQ4a/HRM4nj4qv8ABWrZXVtdz3Q0ITw3lssK2kTW/wC6&#xA;4vKzpIHZE4y+oGbhy3rWtAcbsc14SDfDz9yVW3k3XbO1lMDqbiaayS7hLkxywW8FsnNC26vE8T8S&#xA;ftLs37JEzkB/HvaxhkB8v0Jn5a0W903UFjSzFvZRQSRsX+rPRi6si280Sxzuh+Iv6y1JoetchOQI&#xA;bMcDE8tvh+PmynKm92KpN5v8s2fmXy/daRc8R6y1gmK8vSlH2JANuh677ioyeOZiba82ITiQXjPm&#xA;DS9Ystb1S31q0eNr60WPTtPsVnuLa4cVNYnRAVZGXjxIBAI69c2ePLEjm8/n0s4yoDr0VbTStRvG&#xA;03RdF0YxXDWyQ63DcQyWqKYYAp9WcJX+95FSKlq++PixjGyV/KznOgK5fc9c8k+VYPLOgQacvCS6&#xA;JMt7cqDWWZzVmJarNT7Klt6AZrcuTjlbvtPhGOICfZW3OxVi/wCYaahNosVrBaz3On3E6JrItAHn&#xA;FkKmRY46qzepQI3HfiTQZbiq/Po0aizGq26+5h155v0y+vGNss80zfDDYQ20zTBV2VBEEqtB40zk&#xA;tT2bqs2YyMa95FV77cOWUSOyndab59lks9U0jy/NDfWEgmtHuprWPkrDhJG8frcuLoSCCQembXsz&#xA;s2enmTKcTGQogX8OieDJsRHce5mXlTRPNWna1qlzqT2J0/UuNx6NoJUZLsAK7CN+agSKPjIkPxCv&#xA;c5uMkokCrsOVihMSJNUfvZXlTkOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvOBqFjqeiT+af&#xA;MWr3EdhIWax0ezuXtVWI/FBGwgZJZZ5k4vQt+1sKZk0QeGI+LhcQlHjkdu4H8bqPlfXtb0vXbHTN&#xA;RF3At56cd3pt/MLt4ZJ45HhntrmrSPEzQNG6SGqtTDOAIJCMWSUZAG9+h3+Rem5iuc7FXYqleueY&#xA;LXSBbI8E95d3jmO0srVA80hUcmIDMihVG7MzADJxhbXPII+dpY3mzXVNG8r3inuDdacD+NzkTLGN&#xA;jOLDxpfzT8x+tr/GGsru/lm8CD7RW505jT2UXO+Djxfz4r4x/mn5j9abaDr9nrVtLLBHLby20pgu&#xA;rS4XhNFIAG4uAWXdWDAqSCDsclKNNmPIJBMsizdiqWeYNftdFs0mkjkubi4kEFlZQjlLPM1SEQGg&#xA;6Akk7AbnJQhxFryZBEMcu9R8w8idX8xWHl5uo0+1WO4nQMKjnLcEhmof2YQPnkcufFiFn8fAbsYw&#xA;yTPMR/HeUPDruqJIo0vzXY6xLXay1CFLdpAN6LPbiMK3zjIzGh2pppcyY+ZEgP8AZAfe2HT5hyIl&#xA;5bfo/Uyjy75ih1mGYGB7PULN/Sv7CanqRORUbrs6ON0cbMPpzLlGvMFjjycXkRzCbZFsdirF/Pev&#xA;avpcWmQaVFJJc6jctCTDElxKqpDJMfTikkhRifT3q2wr3pluKAN30aM+QxqurFT5r86qSCdSBGxB&#xA;02wrX/pOy3w4+XzP6nH8Wfn8h/xSv+nvzC/3zq3/AHCrH/suwcEPL5n9SfEyf0v9KP1pt5P8y+Yr&#xA;nX5tI1eC4VTafW4Zbq2itZAVkEbKFhmuFZTzBrsRTvkckIgWGzDkkZcMu73fpLNcocp2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV5H5L02z8uzW2r6npL3Mc9vHbDUI7Z7ia0udPJs3BjRXkVJViUq6jr16jMzJI&#xA;y2B/B3dfhiIeoj9lbJnLHf615w0vWZLSa0hmvYoLGGdCki2tlBcTyTSp1jMssqqitvT55DaMSGZB&#xA;lMSrr91vScxnNdirsVYxqpLee9Nqf959J1GaL2dprVK/dhyGsUiPxsWif94P6p/Qwu9tpL/WdH05&#xA;ryayhvJ5/XuIWCuBFaTTKasGFA6AkHY5y3YeGGSc+MCXp6+8OHXFIC6v9Sjo9/PPc3loZ4tRt7Rl&#xA;WHV7ZWSG4rWoCnbktPiKMy+ByrtfQ48EhwHn/D1j+PPdETuRz82Tfl0SNc8xoPsk2b/7Jo3U/ggz&#xA;e9km9LHyMvvcjS85fBnebBzHYqxbzBLFZ+dPL19e0Fk8V3ZQTMaJFeT+k0VT2MiRSIv3d8tjvAgc&#xA;2jIanEnluPi81802902oz32oS2xeaQrR9Ne7lBA+yzI5O1PAeGee6bWTyyMSMniC+L9+MYu+glHb&#xA;3W7rUYBH1XDhPL90ZH5gqWl2sNxcxT2JtohbBBcctNkgdmNeRjeRkK8h4BqZj6zNLHAwy8Z474f3&#xA;4mB3cQiDdfC2enxiUhKHCOGr/dmJ+BNV9tM18gSS3fmvUriElrW0tI7O4l/Zaf1DIkde5iQtXw55&#xA;1Xs5HKNGPE5GRMb/AJv6r5OBrjE6g8PSNH3vQ83bQ7FWOeZP+Ul8pf8AMdc/90+5yyH0y936WnJ9&#xA;Uff+gvIfQsIvLdnx0+xZ5NNhkeZ7O1eVneAMzmV42csSa1rXMXU6rJHPwiRq3b9n9m6fJoxOUAZc&#xA;J3ZTdnTp4dChuLjSxeTabZKkV9f3kE7F4wFpHCQtCTt3ObEXvz59weflWw2uhzJZfbLcL56s1uAi&#xA;3C6IwlEbM6chcR14s9GIr475Sfo+LkD+8F/zf0spypvdirsVdirsVdirsVdirsVdiqVea9VudJ8t&#xA;6jqNrF6tzbQM8KULDnSgZgtTxUnk3tk8cbkA15ZGMSQ8rfUf0Trlvq/l+5j1O9SFoNQ1K6kaVb8T&#xA;cXY8lJEao6D0wgoOnfKMmuEZmEh6ftDsNP2KZ4o5ccgZnv5EfD8dEuvNauNHvk1yxnP6ZedprthV&#xA;Pr7SvVrYw8pPgC/BEASV61xxaw5cgiB6Pu811PZUNPgOSUv33PyP9Gur3lG5orUK8gDxYUIr2Iyx&#xA;w28VdirHPNGnaqdS03WNNthfSWSXNtcWQdIpHhuwlWjeSickeFdmIBFd8kAJRMTtbTlibEhvV/aw&#xA;bUtF1i+RYNR8qXs6xv6iKHtHWtCOq3G9QSCM5/D2RqMJJx5ICxX8X/EuFLHI84n7P1oiO28zcVit&#xA;/LF6oUUVWeyiUKPAm4p9GU/yBlJuU4f7I/71kIT/AJp+z9bKfIOg6np8eo3+qQrbXupTI31VXWQx&#xA;wwxiONWdaqWJ5MaEjfN9psAw4o4wbrr73J0+MxBJ5lleXOQ7FUPqOnWOpWUtlfwJc2k44ywyCqkd&#xA;fwO4OEEg2GMoiQosH1jyjc6M0V9b3F3qekRtS9sX4zXUcJB/eQS09ST0zSqPyYrWhrmu1nY2m1ZJ&#xA;nHhmf4o7fPp8aZ4tVlwD0nih3Hf5dUu0zStI81a7eWum61J+hrK3t5WNoyCaZ5zLyBkK8owvpAEA&#xA;BvltlGm9mtNp/VKJnL+lyHw5H42yn2lkzEiMuGNfw8z8ej0bSdI03SLGOw023W2tYvsxp4nqzE7s&#xA;x7sdzm4JtqjERFBF4GTsVYv5uu7W013yrcXc0dvbpfXHOaVgiLWwuAKsxAFSaZbjFiXu/S0ZiBKJ&#xA;Pf8AoLzKbTNAZBAJdUFvGghijXVdA4iJRxVRyctQLtua5OWCMpcRA4vdJjj1uSEOCMpCHdcGSR+b&#xA;Fha1S1a9tbS1t1tYrOPU9BMXFIzGrnnK7lxsftUqBtkvD/FSavG7r+cWRabqGn3fnyAWd9HqAh0Z&#xA;0lnSSORiwuI93MXwhj12AysgiG46tsZA5Njfp/Sy/KXJdirsVdirsVdirsVdirsVdirsVY1qH5be&#xA;Sb65e5m0tI55DWR7aSW15E929B4wx+eSMyee/v3YCABsXH3Ej7kRovkbypos/wBZ07To47roLmQv&#xA;PMAeoEkzSOPoOJmarovALvme87n7U9yLN2KuxV2KuxV2KuxV2KuxV2KuxVRisbKGeW4ht447ienr&#xA;TIiq706cmAq3XvhsoEQN1bAl2KuxVSubS1uoxHcwpPGDyCSKHFR3owOEGkEA80N+gtD/AOrdbf8A&#xA;ImP+mHiPex4I9wd+gtD/AOrdbf8AImP+mPEe9eCPcFe20+wtSxtbaKAtsxiRUJA8eIGAklkIgclf&#xA;Al2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjetedFtNRGlaRYya5qao73FrayRr6HEAr6zyEKnMn&#xA;YVr7ZbHHYsmg0TzUaA4iu8teanvpW0vV41sPMUPNprIV4SRhyFlt3b+9TjSpHQ9QMjKI5xNxZY8h&#xA;O0tpfjkyLINrsVdiqE1e+On6Te34T1DaQSzhK05emhelfemGIs0xnKgS8+tfOv5gXKE28FvdMnFZ&#xA;2tNOnliSRkWQxiR72EsVDip45knHAf2/scMZsh5fd+1T1Hz559060kubu3t7cJHJJEl1p88CTGCN&#xA;p3iWVbyfi5iicrVabYjFA8vv/Yss+QCz937XpsEvqwxy0p6ihqeFRXMUuaCvxS7FXdMVYTdef7u5&#xA;Yvo8VpFpxLLDqeoSuqzlTxLQW8KvI8fL9tioPbJTMMf1nfuRhx5s391Gx3rIvPmr2x53lraalaDe&#xA;SXSpnNwi92+qTqjuO54OSPA4ITxT2jLfzZZcGoxC5w9PeGY6fqFnqNlDfWUontLhBJDKtaMp+e/3&#xA;4kEGixjIEWERgS7FXdMVYi/mrWtSSS70SOztNEjJRNZ1N2Ec7A8SYYUKEoCD8bOOXbbfLuADnz7g&#xA;4/iylvGuHvK2PzD5rgga+ppvmHT4qG4OkM6XCr3ZI3edJKfy+oCe3hjwR5bg+aBkmN9pDyZRp+oW&#xA;eo2MF9ZSia0uUEkMq9CrCo67j3Byogg0XIjIEWERgS7FXYq7FXYq7FXYq7FXYq7FUj886rcaT5Q1&#xA;bULeRYbiC3cwysQAjt8Ktv1ILVA7nbLMUbkA1Z58MCQ83tfM1nbWNvp8VvJpOkTlpNOu5221AFiD&#xA;cSTd5ZCORRjXcZy3tRp9ZMgwuWKtxHmD5jqPsc3snPgiKPpl0J6/HvSLWfNGkvaz3VtN6Gq6RMZL&#xA;CR6IxlicLWJq0dH+yw7jqMwexeztZptRjlX7vKBxVuKIupdxH3/Fs1+swZccxfrxnb3ju7wX0ArK&#xA;6hlIZWFVYbgg9xnZuG3irsVYz+YmuWeleVb9Zg0txe289vaW0Q5SSO0TVIH8qLVnbsBluGJMg0ai&#xA;YjA+bBNI1DTZNOks4LuOe7W5a4mijEnwK8UUVOToitR4WBKVFcz8INl0eukOEC+p/QlHm65szbm2&#xA;kuEinS3vJgjh/iBsLmNVDBSoZmPwhiK0OWz5fEfe4+lHqJ8j9z2DynrlnrOiwXFuGjkiAhuraQcZ&#xA;YZkADRyL2I6+4oehzU5IkF6fFMSjYTjINjsVSrzZFdzeVtZiswxu5LG5S2CV5GRoWCcad+XTJ4/q&#xA;F97XlB4DXOnjU19qGp3WmrpOkzPb6oBBoZdo44XitU4P8QZ/TEaxk0YV9sxs3Z8pzMpSFdXZ6Ttz&#xA;HiwxhGBMunIA9++/3IzW/J/nuy0bUL+SG0s4rKCSeSVZ2mkKxqWJiVY03oKgsRjh0GMTFyJ37q/S&#xA;nVduZjjPDAR253fy2D2LR9Ps9O0mzsLIUtLaFIoKmpKKoAJPcnqcvkSTZdbCIAAHJGYGTsVSDz7q&#xA;CWXlDVf3hS5ubaa2sVQM0klzNGywxxqoLMzN0oMsxC5BpzyqBYJ5e1vyLeXVzc6+GK6ZILDT7G7t&#xA;bhrWxht0WOsgaMxRSu4YsZCGAoNsvnGY5dftcXHPGTcum3Lkita1vyI+jTeaNAuLTTdc0pmZEVoY&#xA;JZvTar20saNSVJ1U8OvUMuCMZ3wncFlOePh440JD8V8WQflvqVnPaanZQiSEwX1xPDZzxvDIltdy&#xA;tNCwjkCsEfk3HbK80TsfJt00gQR5/ezDKXJdirsVdirsVdirsVdirsVdiqU+bNE/Tnl290wNwkmV&#xA;XgegIE0LiWIsGBBX1EWoPUZPHLhlbXlhxRIUPK8um6x5Q05mtYPq0lskc1iIx6MbxjhJD6Z5ABHU&#xA;rT2wzBEijERKA2Snzro+jRaJa+X9PsLS3n1e7S3tEjt4qRF/iublE40DxwKx5eNMljkbs9GvNAcI&#xA;iANz/aWXWlrDaWsNrCKQ28axRjrRUAUfgMqJtyAKFKuBLsVYT5tGmt5x021vrmOFNU0vUrBC7KGj&#xA;eQwnmnLuy8l98vx3wmuhDi5a4wD1BH3MMuLHTdB1e8sNP9S9g0u3s7LlzjMpmdri4nryaME1lVnp&#xA;0JAzMw5NrPV1es05J4Y78K200fTPMmsPpepu9jFq2nukB5x+r61rOsg2VpBUIzmh6ryxzZaAMei6&#xA;PTmzGe3EzzyhPp1x5s8zvYzxzRwCwtXMTKwLRQMS549z6nCv+TTtmFkB4Rfm7bCQZyryZflLkOxV&#xA;2KsG8lW9rosGtXct+1votpqF7FHZS+mLe3AnrzR+PNR8RBHLjl+Q8Vbb0HFwgRs36bKc+frmJPIu&#xA;uvy5LNYTxRFaHk08ZjjA/wBZnGQxD1j3tmc/uz7k8tY2itoo2+0iKpp0qBTIFtA2VMCXYqxf8wLP&#xA;UG0y31WwQTXGiyyXptiSvqR/V5Yn4EA/vFWXknuMJjxRlC6MhV9zRqImrH8P6kD+VN0snlmf1ovq&#xA;7PfXEnB+J5LdP68RDKSj8klG6k4jEccYx58MQPkKYaQ+j4q3njRPLlj5R1y5h0y1iu57Oa3hligj&#xA;WVprhTFEoZVDVaSQDLcUpGQ3TnhEQJoXSn5K0PXo9avda1a0Gn+rAlrBZmRJpKLI0jO7RlkA+KgA&#xA;Y5iYcAxCQu+KZl8+iMGOQkZEUzTLXKdirsVdirsVdirsVdirsVdirsVY3c+V9StdRuNQ8u6kunve&#xA;P6t7Yzw/WLSWalDKEDxPG7ftFXoe4rlgmCKkLaTiINxNX8kRpHlqa31BtV1a9OqasUMUU5jEMUET&#xA;GrJBCC/DlQcmLFjTrTGU9qGwTDHRsmynmVtrsVdiqDvtG0i/JN9YwXRZDETPGklUJrx+IHau9MkJ&#xA;EcmMoRPMJF5e/Lry3pUF3FJp9pc/WLua5jDwIwijkb93EvPmaIgHtWuTnmkerVj08Y3sObWufl15&#xA;a1KXTnTT7SFLO5E88SwIqzR8GRo3Cca7sGFdtsY5pC91np4yrYbJ/ZaRpVizPZWcNqzIsbGGNY6p&#xA;GWKL8IGyl2p88rMiebbGAHIIvAydirsVUvqlr6UsPox+lMWM0fEcXL/b5ClDy7164bRQY3p35c+X&#xA;bLUJbr0mkhE6T2Fi0kv1a2Koq0SAuYj+8DODw+EnbplhzSIaY6eIN/gMpypvdirsVd1xViWo/lh5&#xA;SuY2MNksM6OZ7VGluTaxz9Vk+qpNFF16gAVy4Z5Bx5aaB6ffXyRMHlnVbzULe+8x6hHffUn9WzsL&#xA;WE29qkoFBK6u8zyOv7PJqL2Fd8BmAKiGQxEm5G6+TJMqbnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FWndEUu7BVHVmNAPpOKqS3tmxCrPGWPQB1J/Xhoo4g19fsf+WiL/g1/rjRXiCuCGAINQdwR0IwJ&#xA;dirsVQ2o6lY6bZveX0ywW0dOUjV6saKABUkkmgA3OERJNBjKQiLKS/8AKw/KX/LXL/0i3X/VLJ+F&#xA;Jr/MQ7/sKGm/NXyFDyMuqenwNH5QXAoem9Y8AxkmmRyxAs3XuLJbG+tL+zhvLOVZrW4QSQyr0ZWF&#xA;QciRRos4yBFhXwJdirsVQ2pajZabZTXt7KsNtApZ3chR7CpIFT0GEAk0GMpCIsrNH1iw1fToNQsZ&#xA;Vlt50VxxZWKllDcH4lgGWu4rhlEg0VhMSFhGZFk7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq8u86TS3/neGxv7iNtHs2VlsbmITWnqHT7uf1p4xxeXi0S/DypTMrHtGxz/aHAzG8lHkPlyKU6&#xA;9oem3fkrW9RtofL01vawOPW03TGtbhJQAy8ZWlfj1Ffh3ycJESA9XxLDJAGBI4fgE0Om+W21ttNt&#xA;08rBvrBgjtZNGdphRuIRn9UKX7VpQnIcUqv1fNnwx4qHB/pUV+U1/fJf6torTF9Nsy72EDAfuFF7&#xA;dQemjAcivGFftE0ymc+InylX+xjL9LLSSNmPQfrL0nK3NdirHPO39zo3/bXsf+TuWY+vuLTm6f1g&#xA;kkvmm6OoPbx+b9ORzKY0gbTJmYHlQIW+sgEjpXLODb6T8/2NRym64h8v2sH82xS3nma402O1F361&#xA;68zwGSONpY4LpHkiiEjL6kjL0QGp3pmu0WO80p3XCT9tvQdraitLDFw3xxj/ALHhPzev+VbnQ59F&#xA;hGiR+hYwM8P1Uo0bwyKx9SOSN/iV1atQczJg3u6bEYmPp5JvkGx2KuxV59571y6l1ufy696mmacN&#xA;NF3JO8MU7TvJP6Ii4zMq8V+0aEN7jBmzxwYTlMZSo8o82gxOTJ4diNjmUH5E8wT2mu6d5ahvk1Kw&#xA;ks5GYrBFB6L24QLw9Fn5Bwfi5kmu9e2U6TXw1UZSEJw4SPqHO2RxSwyjAyjIEdOlPTcvbXYq7FUg&#xA;86XF1HYWVvbzyW31+/trOaWE8ZBFM/F+D9UYj9objtlmMb/BpzE0K6kMIgstXu7GLUraWSHT7ssb&#xA;T635g1VJiisVBdI45FB27MfnmQBvVb/1Q4Up0ASaB75yWyWWsxxtIbtCEBYgeYtYqQBXb9zkuA93&#xA;+xDX48f5w/08v1Mn/L/UGuZr2OKe5l097awvrNL2VriaMXsJkZDK5ZyPhGxY07Zj5RXv3c7Tyu+7&#xA;Y7+bMcpcl2KuxV2KuxV2KuxV2KuxV2KvMNeaVfzILRNKkolj9NrdUeYN+ir6nprICjNXoGFMyofR&#xA;+O8ODk/vfx/Nkp+aLnWT5K1369Pq86S2cyKmoWtnBGhTg3MtbIrfFWi7067dMYAcQqvtRlMuCV8X&#xA;LqB+hk9rrOqWmsXazwa1f28kpSFXtbRbeIcz8Ubx+nIy06F6mnvlZiCOjeJkSP1H4Bjf5Vb+aNd/&#xA;1H/7ql9lI5z/AK4/6Z42jSfXL8dS9Qxc92Ksc87f3Ojf9tex/wCTuWY+vuLTm6f1gkk2r38d+5Or&#xA;eYmiSU1hTRQ0ZUN9lXFkSVptyrlnCK5R+f7WozN85f6X9jBfMd7aTam9/KrQ2/6Uhmb6yjRMi/XU&#xA;LF0kCslFrWozVaYEamv633F6fXyEuzxLyhz/AK0XpXkC++sS6231Se2S7vm1C0eaIxrLbXCqkcik&#xA;/wAxiPwn4gKVG+bPKKr3PN6eV3tzNsuylyHYq7FXm35i2mn6p5jsrRFrLZwtLq0yrCeEMisLaKrx&#xA;uS8kq1ArsoY03ynW64aXTyyS/wA0d8mqOn8fMID4+QQf5fQabpnnSa1lj4teW9dIlZId2QVuIyyR&#xA;owcKOQ3oVr4Zi9ldrDW4iaEZxPqHl0Pu/S2ZtH+Xy1zjIbH7w9VzYJdirsVYj+YWraVZJoqXl7Bb&#xA;OdUtJgs0qRn045PjejEfCtdz2y7FEm67nH1EwKs9Qw0635ftND0iyk1jT3uLaBlmEV3BIFYyFqcl&#xA;cjocz8ANl0mu34QN6HRB3HmPy8YJANUtCSjAATxeH+tmQ6/hPcyH8ptY0iWZrWK+t5LltJ0hFgWV&#xA;GkLQWrCVQoNaxnZh275q88T3dS9NpJjlf8Mfuel5jOa7FXYq7FXYq7FXYq7FXYq7FWGeZ/y+uNZ1&#xA;O5u4r+CKK6EBeG4tWnZJbcOqSwyxz27IeMlMujloV+PucbLpzI3f2ftSG4/JSa6sZbe411vVZkMb&#xA;pDME4ivNJY5LqXmrV7FSMrxzlGV2SO41+gBpOisby/HzVpfycuBHAltrrj04ws0k8dxK8km/J/gu&#xA;oVUH+Wm3jkfUSSZS3PTh2/2JSdGekvx80/8AJHkRvLU1zNLepdvPFFbxJFB9XjjihaR6cTJMWLNK&#xA;SSWwRiIggXubJJs3sPLubsGDgve2WYXIdirDvOlh56uNStX0RoJNMSMO8DiD1Uuo35LKGnjlFOJ2&#xA;pQgjLsZgBvzcbNHISOHklXpfnD/vz/h7L/qhk/3f4trrN+K/UkB/L/z/AH+tRnUYIHsZ7qG5u55p&#xA;YmKiOYTSjhEihudKAUygYcUZ8cee/wBrmy1moniOGYBieHfuETfTnyey5FXYq7FXYq8mvdIlvdc1&#xA;a+1f/EMN5LdSwxjTLWMW7WlvI62pDGKTmeDV5V75PUafFmgITjGUee/e4cJzjMyBmJcth06dEOdB&#xA;e01Cw1PRv8RzavZzp9WGo2kbW/pysI5wxEUfDlEWHKu2R0uiwYL4Iwjxc68uScuTJMgkzJHKx8+j&#xA;2HA5bsVdiqSa/wCUtN1q5tbyaWe1vbMOkNzbOEfhJTmjcg6sp4g7jJwyGOzVkxCRB6hAf8q/t/8A&#xA;q86n/wAjIP8AqjkvF8gw/LjvLv8AlX9v/wBXnU/+RkH/AFRx8XyC/lx3lEaX5G0yw1aHVXuru+vL&#xA;dHjtmupFZYxLQOVVEjFWApU4JZSRTKOAA3uSyLK252KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:ac917210-0bd1-6e45-900c-c2c8d4aa2c91</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:ac917210-0bd1-6e45-900c-c2c8d4aa2c91</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:04d18116-7cc4-9f4b-a648-84115cae462f</stRef:instanceID>
            <stRef:documentID>xmp.did:04d18116-7cc4-9f4b-a648-84115cae462f</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d690b0de-92f4-4e39-92ee-33b6bf4423a2</stEvt:instanceID>
                  <stEvt:when>2014-09-08T17:07:38+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cab92485-bb67-423a-b77c-28ded636900f</stEvt:instanceID>
                  <stEvt:when>2014-09-09T23:26:02+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a90f0853-c949-41d2-b5ab-2866e21f2cbf</stEvt:instanceID>
                  <stEvt:when>2014-09-13T17:54:05+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:edf0d5d4-9e39-4eae-8918-a68671dc4136</stEvt:instanceID>
                  <stEvt:when>2014-09-13T19:53:37+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:df4e0615-873b-40ef-927e-b089301bde4a</stEvt:instanceID>
                  <stEvt:when>2014-09-13T20:00:03+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fff88811-3201-471c-8965-4da6ad75ae0c</stEvt:instanceID>
                  <stEvt:when>2015-09-01T09:45:26+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:991d8de4-d57e-4a2a-96ef-b7794e945c35</stEvt:instanceID>
                  <stEvt:when>2015-09-01T18:26:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2ada01bb-dffe-480f-9b3c-82c115b94049</stEvt:instanceID>
                  <stEvt:when>2015-09-01T20:33:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:be23c0d3-e315-4d51-8fde-b40b08a56d30</stEvt:instanceID>
                  <stEvt:when>2015-09-01T21:46:29+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7a2ba4ab-256a-1e48-87a0-2604a073674b</stEvt:instanceID>
                  <stEvt:when>2016-02-10T14:51:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:03db26bd-35ad-3847-8497-c3353bf09d8f</stEvt:instanceID>
                  <stEvt:when>2016-02-10T16:37:29+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:27335dde-111d-c747-90ec-b16b01bb9812</stEvt:instanceID>
                  <stEvt:when>2016-02-11T12:04:14+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f53cdcab-bcb8-524c-b623-2fcd7b6fd50f</stEvt:instanceID>
                  <stEvt:when>2016-02-11T14:33:04+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:625c5a6d-d13f-7f4d-a74e-01626cb6da6d</stEvt:instanceID>
                  <stEvt:when>2016-02-11T14:35:42+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7bbf7f9c-5ae1-3f43-b7d4-970c2599f111</stEvt:instanceID>
                  <stEvt:when>2016-02-11T14:55:32+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:be635174-1534-e444-ab78-1740ae04e533</stEvt:instanceID>
                  <stEvt:when>2016-02-11T15:03:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:62d82139-b91b-3240-b2f1-11d580a17a3b</stEvt:instanceID>
                  <stEvt:when>2016-02-11T15:12:14+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e7f15d80-8a72-417f-b427-a1abe1b62af2</stEvt:instanceID>
                  <stEvt:when>2016-02-13T22:54:53+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c388c3c8-f05d-5b4c-9ae9-855ab616364d</stEvt:instanceID>
                  <stEvt:when>2016-02-24T09:33:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a60f6d0d-40a0-c140-a31e-127970cdd348</stEvt:instanceID>
                  <stEvt:when>2016-02-24T09:44:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e1ffe8a4-7753-4ea4-a1df-0c846c802b6f</stEvt:instanceID>
                  <stEvt:when>2016-02-24T21:41:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:18d4d4d2-793e-fd46-88d3-ee24b14989f7</stEvt:instanceID>
                  <stEvt:when>2016-03-03T17:22:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2c2e300e-d1c6-714b-a1ae-0f160e7928f5</stEvt:instanceID>
                  <stEvt:when>2016-03-03T17:27:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d971afa3-164d-4b1e-ae55-9f835d9e4c03</stEvt:instanceID>
                  <stEvt:when>2016-03-03T22:00:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fd3faa8a-7324-4688-bc9c-0821a533ccb1</stEvt:instanceID>
                  <stEvt:when>2016-03-06T23:18:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:60baa2de-7618-4148-ba58-7a9d62aa02d7</stEvt:instanceID>
                  <stEvt:when>2016-03-22T14:47:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d4d4a8a1-0195-c94d-a34e-ad438c818747</stEvt:instanceID>
                  <stEvt:when>2016-03-22T15:04:47+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8af9a3df-3242-0f4d-bac5-fd61f2ebe42c</stEvt:instanceID>
                  <stEvt:when>2016-03-22T20:23+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:22e55d4d-f306-024f-8026-6a19dccd221c</stEvt:instanceID>
                  <stEvt:when>2016-08-01T18:47:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0cf5c4c2-1268-d340-817b-ee5358920e3b</stEvt:instanceID>
                  <stEvt:when>2016-08-01T18:47:32+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:de826f17-7745-0443-93c6-2bbed9449f34</stEvt:instanceID>
                  <stEvt:when>2016-08-01T19:02:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29ed9569-481e-1247-8a7c-c5043fc2d5a5</stEvt:instanceID>
                  <stEvt:when>2016-08-01T19:03:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1a6abf27-9ab9-a545-9d95-14af00b9b90f</stEvt:instanceID>
                  <stEvt:when>2016-08-14T11:08:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:44c37c75-f75a-be41-95a5-33ef6698e02d</stEvt:instanceID>
                  <stEvt:when>2016-08-14T11:15:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9070ceb4-050e-d849-b73a-5a43db11ea14</stEvt:instanceID>
                  <stEvt:when>2016-08-14T11:17:42+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:641be48a-918d-2b43-9b5c-126bab7ff9bd</stEvt:instanceID>
                  <stEvt:when>2016-08-14T11:21:13+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ce3e1952-6129-2e45-b5e0-269ec709e671</stEvt:instanceID>
                  <stEvt:when>2016-08-14T11:21:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b8e271ec-aa03-394c-ab80-96085c1ba167</stEvt:instanceID>
                  <stEvt:when>2016-08-25T14:21:13+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ac917210-0bd1-6e45-900c-c2c8d4aa2c91</stEvt:instanceID>
                  <stEvt:when>2016-08-25T15:48:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>988.839673</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -988.84 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 988.84 li
1000 988.84 li
1000 0 li
cp
clp
1000 0 mo
0 0 li
0 988.84 li
1000 988.84 li
1000 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
165.981 228.041 mo
180.035 228.041 li
180.035 229.72 li
165.981 229.72 li
165.981 239.181 li
181.132 239.181 li
181.132 240.964 li
164.164 240.964 li
164.164 216.967 li
180.721 216.967 li
180.721 218.717 li
165.981 218.717 li
165.981 228.041 li
cp
1 .55761 .36051 .10901 cmyk
f
201.493 221.596 mo
199.745 218.785 196.934 218.374 194.227 218.34 cv
191.416 218.34 186.96 219.368 186.96 223.206 cv
186.96 226.258 190.251 226.977 194.295 227.733 cv
198.923 228.624 203.723 229.445 203.723 234.623 cv
203.687 240.038 198.238 241.34 194.227 241.34 cv
190.49 241.34 186.24 239.798 184.388 236.132 cv
186.034 235.308 li
187.508 238.221 191.279 239.662 194.227 239.662 cv
197.175 239.662 201.871 238.838 201.871 234.589 cv
201.905 230.988 197.929 230.201 193.986 229.445 cv
189.598 228.59 185.109 227.699 185.109 223.277 cv
185.005 218.201 190.285 216.625 194.227 216.625 cv
197.655 216.625 200.637 217.174 203.002 220.704 cv
201.493 221.596 li
cp
f
223.192 221.596 mo
221.444 218.785 218.633 218.374 215.925 218.34 cv
213.114 218.34 208.658 219.368 208.658 223.206 cv
208.658 226.258 211.949 226.977 215.993 227.733 cv
220.621 228.624 225.421 229.445 225.421 234.623 cv
225.385 240.038 219.936 241.34 215.925 241.34 cv
212.188 241.34 207.938 239.798 206.086 236.132 cv
207.733 235.308 li
209.206 238.221 212.977 239.662 215.925 239.662 cv
218.873 239.662 223.569 238.838 223.569 234.589 cv
223.603 230.988 219.628 230.201 215.684 229.445 cv
211.297 228.59 206.807 227.699 206.807 223.277 cv
206.704 218.201 211.983 216.625 215.925 216.625 cv
219.353 216.625 222.335 217.174 224.7 220.704 cv
223.192 221.596 li
cp
f
231.146 228.041 mo
245.2 228.041 li
245.2 229.72 li
231.146 229.72 li
231.146 239.181 li
246.297 239.181 li
246.297 240.964 li
229.329 240.964 li
229.329 216.967 li
245.886 216.967 li
245.886 218.717 li
231.146 218.717 li
231.146 228.041 li
cp
f
251.917 216.967 mo
268.063 236.817 li
268.063 216.967 li
269.88 216.967 li
269.88 240.964 li
269.16 240.964 li
252.98 221.151 li
252.98 240.964 li
251.129 240.964 li
251.129 216.967 li
251.917 216.967 li
cp
f
282.05 218.649 mo
273.376 218.649 li
273.376 217.004 li
292.573 217.004 li
292.573 218.649 li
283.9 218.649 li
283.9 240.964 li
282.05 240.964 li
282.05 218.649 li
cp
f
296.103 240.964 mo
296.103 216.967 li
297.921 216.967 li
297.921 240.964 li
296.103 240.964 li
cp
f
318.932 233.355 mo
312.488 218.751 li
306.044 233.355 li
318.932 233.355 li
cp
322.292 240.964 mo
319.653 235.067 li
305.324 235.067 li
302.719 240.964 li
300.73 240.964 li
311.494 216.967 li
313.517 216.967 li
324.281 240.964 li
322.292 240.964 li
cp
f
329.559 216.967 mo
329.559 239.215 li
343.065 239.215 li
343.065 240.964 li
327.708 240.964 li
327.708 216.967 li
329.559 216.967 li
cp
f
356.021 240.964 mo
356.021 216.967 li
357.839 216.967 li
357.839 240.964 li
356.021 240.964 li
cp
f
382.931 237.638 mo
380.532 240.038 377.344 241.238 374.191 241.238 cv
366.1 241.238 361.884 235.582 361.85 229.103 cv
361.781 222.694 365.963 216.695 374.191 216.695 cv
377.344 216.695 380.532 217.893 382.931 220.293 cv
381.663 221.392 li
379.606 219.334 376.899 218.34 374.191 218.34 cv
367.197 218.34 363.598 223.277 363.632 229.035 cv
363.701 234.657 367.265 239.523 374.191 239.523 cv
376.899 239.523 379.64 238.495 381.698 236.474 cv
382.931 237.638 li
cp
f
388.038 228.967 mo
388.072 234.382 391.5 239.662 398.322 239.662 cv
405.177 239.662 408.639 234.382 408.639 228.967 cv
408.639 223.413 405.212 218.306 398.322 218.306 cv
391.432 218.306 388.004 223.311 388.038 228.967 cv
cp
410.422 229.001 mo
410.388 235.308 406.377 241.374 398.322 241.374 cv
390.266 241.374 386.221 235.274 386.221 228.933 cv
386.221 222.487 390.232 216.591 398.322 216.591 cv
406.411 216.591 410.456 222.521 410.422 229.001 cv
cp
f
415.633 216.967 mo
431.778 236.817 li
431.778 216.967 li
433.595 216.967 li
433.595 240.964 li
432.875 240.964 li
416.695 221.151 li
416.695 240.964 li
414.844 240.964 li
414.844 216.967 li
415.633 216.967 li
cp
f
454.882 221.596 mo
453.134 218.785 450.323 218.374 447.615 218.34 cv
444.804 218.34 440.348 219.368 440.348 223.206 cv
440.348 226.258 443.639 226.977 447.683 227.733 cv
452.311 228.624 457.111 229.445 457.111 234.623 cv
457.075 240.038 451.626 241.34 447.615 241.34 cv
443.878 241.34 439.628 239.798 437.776 236.132 cv
439.423 235.308 li
440.896 238.221 444.667 239.662 447.615 239.662 cv
450.563 239.662 455.259 238.838 455.259 234.589 cv
455.293 230.988 451.318 230.201 447.374 229.445 cv
442.987 228.59 438.497 227.699 438.497 223.277 cv
438.394 218.201 443.673 216.625 447.615 216.625 cv
451.043 216.625 454.025 217.174 456.39 220.704 cv
454.882 221.596 li
cp
f
174.482 162.064 mo
157.71 162.064 li
157.71 158.882 li
194.836 158.882 li
194.836 162.064 li
178.063 162.064 li
178.063 205.225 li
174.482 205.225 li
174.482 162.064 li
cp
.0649729 .717952 .783963 3.0518e-05 cmyk
f
234.824 205.225 mo
234.824 184.143 li
205.255 184.143 li
205.255 205.225 li
201.676 205.225 li
201.676 158.815 li
205.255 158.815 li
205.255 180.894 li
234.824 180.894 li
234.824 158.815 li
238.403 158.815 li
238.403 205.225 li
234.824 205.225 li
cp
f
248.693 205.225 mo
248.693 158.815 li
252.205 158.815 li
252.205 205.225 li
248.693 205.225 li
cp
f
264.011 158.815 mo
295.237 197.202 li
295.237 158.815 li
298.751 158.815 li
298.751 205.225 li
297.358 205.225 li
266.066 166.904 li
266.066 205.225 li
262.487 205.225 li
262.487 158.815 li
264.011 158.815 li
cp
f
330.923 158.815 mo
330.923 201.842 li
357.043 201.842 li
357.043 205.225 li
327.342 205.225 li
327.342 158.815 li
330.923 158.815 li
cp
f
363.881 205.225 mo
363.881 158.815 li
367.394 158.815 li
367.394 205.225 li
363.881 205.225 li
cp
f
379.2 158.815 mo
410.425 197.202 li
410.425 158.815 li
413.939 158.815 li
413.939 205.225 li
412.547 205.225 li
381.254 166.904 li
381.254 205.225 li
377.675 205.225 li
377.675 158.815 li
379.2 158.815 li
cp
f
427.808 180.23 mo
454.989 180.23 li
454.989 183.479 li
427.808 183.479 li
427.808 201.779 li
457.11 201.779 li
457.11 205.225 li
424.294 205.225 li
424.294 158.815 li
456.315 158.815 li
456.315 162.198 li
427.808 162.198 li
427.808 180.23 li
cp
f
639.034 393.086 mo
639.034 406.972 621.898 418.229 600.76 418.229 cv
579.621 418.229 562.485 406.972 562.485 393.086 cv
562.485 379.2 579.621 367.943 600.76 367.943 cv
621.898 367.943 639.034 379.2 639.034 393.086 cv
cp
.0752575 .211215 1 0 cmyk
f
616.606 377.413 mo
572.756 377.413 li
571.681 377.413 570.81 376.542 570.81 375.468 cv
570.81 374.393 571.681 373.523 572.756 373.523 cv
616.606 373.523 li
617.68 373.523 618.551 374.393 618.551 375.468 cv
618.551 376.542 617.68 377.413 616.606 377.413 cv
cp
1 .55761 .36051 .10901 cmyk
f
606.862 402.939 mo
582.5 402.939 li
581.425 402.939 580.555 402.068 580.555 400.994 cv
580.555 399.919 581.425 399.049 582.5 399.049 cv
606.862 399.049 li
607.936 399.049 608.807 399.919 608.807 400.994 cv
608.807 402.068 607.936 402.939 606.862 402.939 cv
cp
f
597.118 390.176 mo
570.32 390.176 li
569.245 390.176 568.374 389.305 568.374 388.231 cv
568.374 387.156 569.245 386.286 570.32 386.286 cv
597.118 386.286 li
598.192 386.286 599.063 387.156 599.063 388.231 cv
599.063 389.305 598.192 390.176 597.118 390.176 cv
cp
f
619.042 390.176 mo
606.862 390.176 li
605.787 390.176 604.917 389.305 604.917 388.231 cv
604.917 387.156 605.787 386.286 606.862 386.286 cv
619.042 386.286 li
620.116 386.286 620.987 387.156 620.987 388.231 cv
620.987 389.305 620.116 390.176 619.042 390.176 cv
cp
f
594.682 356.284 mo
570.231 356.284 550.339 370.125 550.339 387.137 cv
550.339 400.248 562.349 411.957 580.223 416.271 cv
580.302 416.29 580.378 416.314 580.454 416.343 cv
581.152 416.606 581.855 416.863 582.576 417.091 cv
583.1 417.257 583.529 417.637 583.758 418.136 cv
585.503 421.943 588.893 427.344 595.141 431.45 cv
598.16 433.434 601.558 434.893 605.11 435.744 cv
604.389 433.358 604.097 430.942 604.237 428.528 cv
604.632 421.798 606.213 417.95 608.933 417.091 cv
611.082 416.411 613.234 415.515 615.328 414.428 cv
615.398 414.391 615.471 414.359 615.544 414.332 cv
630.026 408.922 639.023 398.502 639.023 387.137 cv
639.023 370.125 619.132 356.284 594.682 356.284 cv
cp
608.181 440.23 mo
608.099 440.23 608.015 440.224 607.932 440.214 cv
602.605 439.525 597.444 437.618 593.004 434.7 cv
586.398 430.359 582.638 424.737 580.587 420.53 cv
580.118 420.368 579.655 420.198 579.193 420.025 cv
559.603 415.256 546.448 402.051 546.448 387.137 cv
546.448 367.98 568.086 352.394 594.682 352.394 cv
621.276 352.394 642.913 367.98 642.913 387.137 cv
642.913 400.136 632.993 411.929 617.016 417.935 cv
614.757 419.101 612.431 420.064 610.105 420.801 cv
609.625 421.041 608.436 423.387 608.122 428.755 cv
607.953 431.652 608.562 434.576 609.936 437.445 cv
610.243 438.088 610.175 438.848 609.757 439.425 cv
609.388 439.934 608.799 440.23 608.181 440.23 cv
cp
f
634.119 206.817 mo
634.034 206.68 633.968 206.536 633.877 206.401 cv
633.849 206.36 633.817 206.324 633.79 206.284 cv
633.696 206.149 633.594 206.023 633.496 205.892 cv
633.364 205.719 633.231 205.546 633.091 205.383 cv
632.321 204.451 631.439 203.614 630.442 202.926 cv
632.943 200.959 634.554 197.914 634.554 194.486 cv
634.554 190.184 632.019 186.484 628.367 184.77 cv
628.398 184.433 628.418 184.093 628.418 183.747 cv
628.418 178.187 624.192 173.614 618.777 173.064 cv
617.474 168.602 613.359 165.338 608.475 165.338 cv
602.544 165.338 597.736 170.146 597.736 176.077 cv
597.736 170.146 592.928 165.338 586.998 165.338 cv
582.114 165.338 577.999 168.602 576.695 173.064 cv
571.613 173.58 567.579 177.641 567.102 182.736 cv
567.055 182.725 li
567.013 183.033 566.937 183.814 567.035 184.81 cv
563.422 186.539 560.919 190.214 560.919 194.486 cv
560.919 197.914 562.53 200.959 565.03 202.926 cv
561.622 205.278 559.384 209.207 559.384 213.662 cv
559.384 219.018 562.616 223.614 567.233 225.621 cv
567.177 225.919 567.131 226.221 567.102 226.527 cv
567.071 226.837 567.055 227.151 567.055 227.469 cv
567.055 232.976 571.519 237.44 577.027 237.44 cv
577.853 237.44 578.651 237.328 579.419 237.139 cv
579.679 239.068 580.532 240.805 581.795 242.163 cv
581.83 242.2 581.862 242.239 581.897 242.276 cv
582.037 242.421 582.183 242.559 582.331 242.694 cv
582.393 242.752 582.456 242.81 582.52 242.866 cv
582.656 242.984 582.796 243.096 582.94 243.205 cv
583.025 243.271 583.11 243.336 583.197 243.398 cv
583.331 243.494 583.468 243.585 583.608 243.674 cv
583.713 243.74 583.819 243.805 583.927 243.867 cv
584.058 243.944 584.191 244.018 584.327 244.088 cv
584.451 244.151 584.576 244.21 584.703 244.268 cv
584.833 244.328 584.962 244.387 585.096 244.441 cv
585.236 244.498 585.379 244.547 585.522 244.597 cv
585.649 244.641 585.775 244.687 585.905 244.725 cv
586.064 244.773 586.227 244.811 586.39 244.85 cv
586.51 244.879 586.629 244.911 586.75 244.935 cv
586.94 244.972 587.133 244.997 587.325 245.023 cv
587.427 245.036 587.525 245.055 587.628 245.065 cv
587.925 245.094 588.226 245.111 588.532 245.111 cv
590.899 245.111 593.05 244.209 594.682 242.741 cv
594.682 190.2 li
594.682 188.437 596.124 186.995 597.887 186.995 cv
599.65 186.995 601.092 188.437 601.092 190.2 cv
601.092 243.014 li
602.683 244.324 604.72 245.111 606.941 245.111 cv
609.682 245.111 612.132 243.906 613.816 242.005 cv
613.816 242.017 li
613.881 241.952 613.925 241.874 613.988 241.807 cv
614.062 241.718 614.136 241.631 614.206 241.54 cv
615.304 240.259 615.933 238.73 616.096 237.147 cv
616.851 237.33 617.635 237.44 618.446 237.44 cv
623.954 237.44 628.418 232.976 628.418 227.469 cv
628.418 226.837 628.352 226.221 628.241 225.621 cv
628.499 225.508 628.736 225.359 628.986 225.23 cv
628.997 225.225 629.006 225.22 629.017 225.214 cv
633.205 223.045 636.088 218.705 636.088 213.662 cv
636.088 211.145 635.355 208.809 634.119 206.817 cv
cp
.435218 .00509651 .10486 0 cmyk
f
584.092 247.926 mo
578.53 247.926 573.689 244.223 572.111 239.039 cv
564.145 239.838 557.44 233.497 557.439 225.685 cv
557.439 225.359 557.452 225.028 557.478 224.693 cv
552.048 221.746 548.614 216.051 548.614 209.801 cv
548.614 205.034 550.625 200.525 554.088 197.338 cv
551.708 194.726 550.38 191.337 550.38 187.741 cv
550.38 182.674 553.112 177.974 557.439 175.424 cv
557.439 175.412 557.439 175.399 557.439 175.387 cv
557.439 168.449 562.335 162.621 569.02 161.345 cv
571.145 155.94 576.447 152.263 582.327 152.263 cv
590.212 152.263 596.627 158.678 596.627 166.563 cv
596.627 167.637 595.756 168.508 594.682 168.508 cv
593.607 168.508 592.736 167.637 592.736 166.563 cv
592.736 160.823 588.066 156.154 582.327 156.154 cv
577.736 156.154 573.629 159.233 572.342 163.642 cv
572.119 164.402 571.459 164.952 570.671 165.032 cv
565.346 165.573 561.329 170.025 561.329 175.387 cv
561.329 175.723 561.349 176.053 561.379 176.381 cv
561.457 177.198 561.013 177.976 560.27 178.324 cv
556.626 180.034 554.27 183.731 554.27 187.741 cv
554.27 190.947 555.723 193.928 558.258 195.922 cv
558.744 196.303 559.019 196.893 558.999 197.511 cv
558.981 198.129 558.67 198.7 558.161 199.051 cv
554.618 201.495 552.504 205.513 552.504 209.801 cv
552.504 215 555.589 219.7 560.364 221.776 cv
561.197 222.137 561.668 223.027 561.501 223.919 cv
561.385 224.536 561.329 225.113 561.329 225.685 cv
561.329 230.938 565.602 235.211 570.856 235.211 cv
571.604 235.211 572.353 235.116 573.145 234.921 cv
573.68 234.79 574.248 234.891 574.704 235.202 cv
575.161 235.513 575.464 236.004 575.538 236.552 cv
576.11 240.818 579.787 244.036 584.092 244.036 cv
588.858 244.036 592.736 240.159 592.736 235.392 cv
592.736 234.318 593.607 233.447 594.682 233.447 cv
595.756 233.447 596.627 234.318 596.627 235.392 cv
596.627 242.304 591.004 247.926 584.092 247.926 cv
cp
1 .55761 .36051 .10901 cmyk
f
584.092 247.926 mo
577.181 247.926 571.558 242.304 571.558 235.392 cv
571.558 231.409 573.479 227.626 576.696 225.271 cv
577.562 224.636 578.78 224.825 579.415 225.692 cv
580.049 226.559 579.86 227.776 578.994 228.411 cv
576.774 230.035 575.448 232.645 575.448 235.392 cv
575.448 240.159 579.327 244.036 584.092 244.036 cv
585.167 244.036 586.038 244.907 586.038 245.981 cv
586.038 247.056 585.167 247.926 584.092 247.926 cv
cp
f
559.384 227.63 mo
558.31 227.63 557.439 226.76 557.439 225.685 cv
557.439 218.287 563.458 212.269 570.856 212.269 cv
571.93 212.269 572.801 213.139 572.801 214.214 cv
572.801 215.288 571.93 216.159 570.856 216.159 cv
565.602 216.159 561.329 220.432 561.329 225.685 cv
561.329 226.76 560.458 227.63 559.384 227.63 cv
cp
f
563.539 218.777 mo
562.946 218.777 562.361 218.515 561.983 218.011 cv
561.341 217.156 561.486 215.961 562.337 215.313 cv
562.343 215.308 562.399 215.267 562.405 215.262 cv
563.91 214.007 564.679 212.356 564.452 210.916 cv
564.346 210.223 563.935 209.189 562.58 208.153 cv
561.726 207.5 561.563 206.279 562.215 205.426 cv
562.869 204.573 564.089 204.409 564.941 205.062 cv
567.327 206.885 568.083 208.927 568.295 210.319 cv
568.736 213.122 567.499 216.057 564.984 218.174 cv
564.902 218.249 564.817 218.316 564.72 218.388 cv
564.367 218.65 563.951 218.777 563.539 218.777 cv
cp
f
583.494 210.65 mo
582.419 210.65 581.548 209.779 581.548 208.705 cv
581.548 207.631 582.419 206.76 583.494 206.76 cv
588.591 206.76 592.736 202.614 592.736 197.518 cv
592.736 196.444 593.607 195.573 594.682 195.573 cv
595.756 195.573 596.627 196.444 596.627 197.518 cv
596.627 204.759 590.735 210.65 583.494 210.65 cv
cp
f
579.977 232.923 mo
578.903 232.923 578.032 232.053 578.032 230.978 cv
578.032 227.936 575.98 225.311 573.041 224.593 cv
571.999 224.339 571.359 223.286 571.614 222.242 cv
571.868 221.199 572.921 220.557 573.965 220.814 cv
578.65 221.957 581.922 226.137 581.922 230.978 cv
581.922 232.053 581.052 232.923 579.977 232.923 cv
cp
f
605.271 247.926 mo
598.359 247.926 592.736 242.304 592.736 235.392 cv
592.736 234.318 593.607 233.447 594.682 233.447 cv
595.756 233.447 596.627 234.318 596.627 235.392 cv
596.627 240.159 600.505 244.036 605.271 244.036 cv
609.576 244.036 613.254 240.818 613.825 236.552 cv
613.899 236.004 614.202 235.513 614.659 235.202 cv
615.114 234.891 615.68 234.789 616.218 234.921 cv
617.01 235.116 617.759 235.211 618.507 235.211 cv
623.759 235.211 628.032 230.938 628.032 225.685 cv
628.032 225.116 627.975 224.521 627.862 223.919 cv
627.695 223.027 628.166 222.137 628.999 221.776 cv
633.772 219.701 636.857 215 636.857 209.801 cv
636.857 205.513 634.743 201.495 631.201 199.051 cv
630.692 198.7 630.38 198.129 630.362 197.511 cv
630.342 196.893 630.617 196.303 631.104 195.922 cv
633.639 193.928 635.093 190.946 635.093 187.741 cv
635.093 183.731 632.737 180.034 629.092 178.324 cv
628.349 177.976 627.905 177.198 627.982 176.381 cv
628.013 176.053 628.032 175.723 628.032 175.387 cv
628.032 170.025 624.016 165.573 618.691 165.032 cv
617.902 164.952 617.243 164.402 617.019 163.642 cv
615.732 159.233 611.626 156.154 607.035 156.154 cv
601.295 156.154 596.627 160.823 596.627 166.563 cv
596.627 167.637 595.756 168.508 594.682 168.508 cv
593.607 168.508 592.736 167.637 592.736 166.563 cv
592.736 158.678 599.151 152.263 607.035 152.263 cv
612.915 152.263 618.217 155.94 620.341 161.345 cv
627.026 162.621 631.923 168.449 631.923 175.387 cv
631.923 175.399 631.923 175.411 631.923 175.424 cv
636.251 177.973 638.983 182.674 638.983 187.741 cv
638.983 191.337 637.654 194.726 635.274 197.338 cv
638.737 200.525 640.748 205.035 640.748 209.801 cv
640.748 216.052 637.313 221.747 631.883 224.694 cv
631.909 225.027 631.923 225.358 631.923 225.685 cv
631.923 233.496 625.229 239.824 617.252 239.039 cv
615.674 244.223 610.833 247.926 605.271 247.926 cv
cp
f
605.189 179.015 mo
598.323 179.015 592.736 173.429 592.736 166.563 cv
592.736 165.488 593.607 164.618 594.682 164.618 cv
595.756 164.618 596.627 165.488 596.627 166.563 cv
596.627 171.284 600.467 175.125 605.189 175.125 cv
607.394 175.125 609.486 174.289 611.083 172.771 cv
611.86 172.033 613.091 172.061 613.834 172.842 cv
614.574 173.621 614.542 174.852 613.764 175.592 cv
611.441 177.799 608.395 179.015 605.189 179.015 cv
cp
f
613.179 244.368 mo
612.681 244.368 612.184 244.178 611.804 243.798 cv
611.044 243.038 611.044 241.807 611.804 241.048 cv
614.658 238.193 614.658 233.55 611.804 230.695 cv
611.044 229.935 611.044 228.704 611.804 227.944 cv
612.564 227.184 613.795 227.184 614.554 227.944 cv
618.925 232.315 618.925 239.428 614.554 243.798 cv
614.174 244.178 613.678 244.368 613.179 244.368 cv
cp
f
594.682 226.352 mo
593.607 226.352 592.736 225.482 592.736 224.407 cv
592.736 219.47 596.754 215.452 601.692 215.452 cv
604.672 215.452 607.447 216.928 609.115 219.4 cv
609.716 220.29 609.482 221.499 608.591 222.1 cv
607.699 222.701 606.491 222.466 605.891 221.576 cv
604.947 220.178 603.377 219.343 601.692 219.343 cv
598.899 219.343 596.627 221.615 596.627 224.407 cv
596.627 225.482 595.756 226.352 594.682 226.352 cv
cp
f
594.682 227.209 mo
593.607 227.209 592.736 226.339 592.736 225.264 cv
592.736 224.744 592.48 224.26 592.049 223.969 cv
591.704 223.735 591.293 223.65 590.879 223.73 cv
590.471 223.809 590.116 224.043 589.884 224.388 cv
589.281 225.279 588.069 225.51 587.183 224.911 cv
586.293 224.31 586.059 223.101 586.659 222.21 cv
587.475 221.004 588.711 220.187 590.139 219.91 cv
591.568 219.633 593.019 219.929 594.227 220.745 cv
595.729 221.76 596.627 223.449 596.627 225.264 cv
596.627 226.339 595.756 227.209 594.682 227.209 cv
cp
f
603.667 200.419 mo
602.593 200.419 601.722 199.548 601.722 198.474 cv
601.722 197.399 602.593 196.529 603.667 196.529 cv
606.882 196.529 609.497 193.914 609.497 190.7 cv
609.497 189.625 610.368 188.755 611.442 188.755 cv
612.516 188.755 613.387 189.625 613.387 190.7 cv
613.387 196.059 609.027 200.419 603.667 200.419 cv
cp
f
574.414 197.953 mo
574.084 197.953 573.751 197.869 573.446 197.693 cv
572.514 197.158 572.193 195.969 572.73 195.037 cv
573.505 193.688 573.71 192.116 573.304 190.613 cv
572.9 189.11 571.933 187.854 570.584 187.078 cv
569.652 186.542 569.332 185.353 569.868 184.421 cv
570.402 183.49 571.593 183.171 572.523 183.706 cv
577.169 186.378 578.774 192.332 576.1 196.978 cv
575.742 197.603 575.087 197.953 574.414 197.953 cv
cp
f
638.334 209.448 mo
637.319 209.448 636.464 208.661 636.395 207.634 cv
636.272 205.817 635.667 204.053 634.645 202.534 cv
633.093 200.227 630.736 198.663 628.007 198.13 cv
625.283 197.597 622.505 198.156 620.198 199.709 cv
619.305 200.31 618.098 200.073 617.498 199.181 cv
616.898 198.29 617.135 197.081 618.025 196.482 cv
621.194 194.349 625.004 193.577 628.753 194.311 cv
632.502 195.044 635.74 197.193 637.872 200.362 cv
639.277 202.448 640.108 204.872 640.276 207.372 cv
640.349 208.444 639.538 209.371 638.467 209.444 cv
638.422 209.447 638.378 209.448 638.334 209.448 cv
cp
f
626.487 226.067 mo
625.996 226.067 625.485 226.032 624.957 225.956 cv
622.552 225.608 620.782 224.524 619.72 223.675 cv
618.881 223.005 618.744 221.781 619.414 220.942 cv
620.086 220.103 621.308 219.965 622.148 220.636 cv
622.834 221.184 623.973 221.883 625.513 222.106 cv
627.567 222.407 629.212 221.689 630.011 221.236 cv
630.949 220.704 632.131 221.034 632.663 221.967 cv
633.193 222.902 632.867 224.09 631.932 224.619 cv
630.905 225.202 628.964 226.067 626.487 226.067 cv
cp
f
581.263 180.46 mo
580.064 180.46 578.769 180.259 577.429 179.736 cv
573.576 178.234 571.844 175.04 571.277 173.736 cv
570.848 172.75 571.301 171.604 572.286 171.177 cv
573.271 170.748 574.418 171.2 574.845 172.186 cv
575.135 172.854 576.283 175.113 578.842 176.112 cv
582.447 177.514 585.688 175.229 585.825 175.131 cv
586.696 174.504 587.913 174.702 588.539 175.575 cv
589.167 176.448 588.968 177.663 588.095 178.29 cv
587.705 178.571 584.937 180.46 581.263 180.46 cv
cp
f
594.682 237.337 mo
593.607 237.337 592.736 236.467 592.736 235.392 cv
592.736 186.994 li
592.736 185.92 593.607 185.049 594.682 185.049 cv
595.756 185.049 596.627 185.92 596.627 186.994 cv
596.627 235.392 li
596.627 236.467 595.756 237.337 594.682 237.337 cv
cp
f
568.979 187.403 mo
565.312 187.403 561.8 185.622 559.575 182.56 cv
557.089 179.138 557.264 175.403 557.456 173.956 cv
557.595 172.891 558.592 172.142 559.638 172.282 cv
560.703 172.423 561.452 173.4 561.312 174.465 cv
561.183 175.449 561.06 177.985 562.723 180.274 cv
564.365 182.538 567.168 183.789 569.883 183.457 cv
572.898 183.087 575.435 180.909 576.348 177.91 cv
576.663 176.881 577.745 176.299 578.777 176.615 cv
579.804 176.928 580.383 178.014 580.071 179.042 cv
578.71 183.513 574.897 186.762 570.358 187.319 cv
569.897 187.375 569.437 187.403 568.979 187.403 cv
cp
f
620.782 211.904 mo
620.501 211.904 620.215 211.842 619.945 211.712 cv
618.975 211.249 618.565 210.087 619.028 209.118 cv
619.106 208.957 620.893 205.139 618.978 201.768 cv
617.25 198.725 613.247 197.246 609.468 198.257 cv
608.424 198.532 607.365 197.916 607.087 196.877 cv
606.81 195.839 607.427 194.774 608.465 194.497 cv
614.024 193.014 619.732 195.218 622.361 199.847 cv
625.218 204.878 622.821 210.206 622.539 210.798 cv
622.204 211.496 621.508 211.904 620.782 211.904 cv
cp
f
621.739 186.157 mo
620.799 186.157 619.971 185.471 619.82 184.512 cv
619.709 183.796 619.296 180.084 622.132 177.247 cv
624.375 175.002 627.823 174.243 630.909 175.314 cv
631.924 175.666 632.462 176.774 632.11 177.789 cv
631.759 178.805 630.652 179.342 629.636 178.99 cv
627.938 178.401 626.078 178.8 624.882 179.998 cv
623.318 181.562 623.65 183.816 623.665 183.911 cv
623.831 184.973 623.104 185.968 622.042 186.133 cv
621.94 186.149 621.84 186.157 621.739 186.157 cv
cp
f
748.972 244.256 mo
767.623 206.319 li
792.429 206.319 li
810.424 238.898 li
810.424 238.898 800.474 238.11 795.07 238.852 cv
789.665 239.594 782.969 241.821 776.468 243.893 cv
769.967 245.964 758.403 249.343 748.972 244.256 cv
cp
.330877 0 .78497 0 cmyk
f
774.417 178.631 mo
773.343 178.631 772.472 177.761 772.472 176.686 cv
772.472 170.337 li
772.472 169.263 773.343 168.392 774.417 168.392 cv
775.491 168.392 776.362 169.263 776.362 170.337 cv
776.362 176.686 li
776.362 177.761 775.491 178.631 774.417 178.631 cv
cp
1 .55761 .36051 .10901 cmyk
f
776.362 156.201 mo
776.362 167.269 li
789.758 160.954 li
776.362 156.201 li
cp
774.417 172.282 mo
774.054 172.282 773.692 172.18 773.376 171.98 cv
772.812 171.623 772.472 171.003 772.472 170.337 cv
772.472 153.446 li
772.472 152.814 772.779 152.222 773.296 151.858 cv
773.809 151.494 774.473 151.404 775.068 151.613 cv
795.51 158.866 li
796.253 159.13 796.764 159.816 796.802 160.603 cv
796.841 161.391 796.402 162.123 795.69 162.46 cv
775.247 172.097 li
774.982 172.221 774.7 172.282 774.417 172.282 cv
cp
f
828.844 238.096 mo
828.153 238.097 827.483 237.727 827.132 237.075 cv
808.479 202.517 li
800.154 217.642 li
799.642 218.587 798.457 218.933 797.516 218.42 cv
796.572 217.907 796.224 216.726 796.738 215.782 cv
804.978 200.649 li
805.669 199.383 806.991 198.6 808.434 198.6 cv
808.438 198.6 808.443 198.6 808.449 198.601 cv
809.897 198.606 811.221 199.4 811.904 200.673 cv
830.554 235.227 li
831.065 236.173 830.712 237.353 829.767 237.863 cv
829.474 238.021 829.156 238.096 828.844 238.096 cv
cp
f
810.95 241.814 mo
810.259 241.815 809.589 241.445 809.237 240.793 cv
776.133 179.48 li
775.718 178.714 774.992 178.63 774.698 178.629 cv
774.698 178.629 774.698 178.629 774.697 178.629 cv
774.405 178.629 773.683 178.713 773.264 179.481 cv
740.849 239.003 li
740.332 239.943 739.151 240.289 738.208 239.772 cv
737.265 239.255 736.922 238.073 737.439 237.131 cv
739.952 232.517 li
769.847 177.618 li
770.817 175.841 772.675 174.739 774.697 174.739 cv
774.7 174.739 774.701 174.739 774.703 174.739 cv
776.73 174.741 778.59 175.851 779.558 177.635 cv
779.794 178.075 li
812.66 238.945 li
813.17 239.89 812.818 241.07 811.873 241.581 cv
811.579 241.739 811.262 241.814 810.95 241.814 cv
cp
f
763.146 248.687 mo
756.264 248.687 749.125 246.499 741.891 242.168 cv
741.3 241.813 740.75 241.472 740.201 241.114 cv
739.487 240.663 738.753 240.184 738.006 239.644 cv
737.135 239.016 736.937 237.8 737.566 236.929 cv
738.192 236.059 739.407 235.859 740.282 236.489 cv
740.963 236.98 741.63 237.416 742.3 237.839 cv
742.829 238.182 743.337 238.498 743.818 238.786 cv
751.09 243.141 758.122 245.141 764.764 244.75 cv
769.287 244.495 772.613 243.254 776.466 241.818 cv
780.236 240.412 784.511 238.817 790.682 237.861 cv
796.907 236.907 803.285 236.857 809.649 237.713 cv
810.212 237.786 810.751 237.862 811.277 237.952 cv
812.336 238.133 813.047 239.138 812.866 240.197 cv
812.686 241.257 811.678 241.968 810.62 241.786 cv
810.143 241.705 809.652 241.637 809.136 241.569 cv
803.133 240.763 797.129 240.809 791.275 241.706 cv
785.499 242.602 781.598 244.057 777.826 245.463 cv
773.849 246.945 770.094 248.346 764.984 248.635 cv
764.373 248.67 763.76 248.687 763.146 248.687 cv
cp
f
828.943 238.134 mo
828.682 238.134 828.414 238.08 828.159 237.968 cv
824.576 236.386 820.793 235.448 816.919 235.179 cv
814.081 234.98 811.204 235.153 808.386 235.685 cv
807.33 235.888 806.314 235.19 806.113 234.136 cv
805.914 233.081 806.607 232.063 807.663 231.863 cv
810.807 231.268 814.017 231.077 817.188 231.297 cv
821.513 231.598 825.732 232.645 829.73 234.409 cv
830.714 234.843 831.157 235.991 830.724 236.974 cv
830.404 237.701 829.691 238.134 828.943 238.134 cv
cp
f
777.519 197.128 mo
762.494 197.128 li
761.419 197.128 760.548 196.257 760.548 195.183 cv
760.548 194.109 761.419 193.238 762.494 193.238 cv
777.519 193.238 li
778.593 193.238 779.464 194.109 779.464 195.183 cv
779.464 196.257 778.593 197.128 777.519 197.128 cv
cp
f
817.617 218.562 mo
810.949 218.562 li
809.874 218.562 809.003 217.692 809.003 216.617 cv
809.003 215.543 809.874 214.672 810.949 214.672 cv
817.617 214.672 li
818.691 214.672 819.562 215.543 819.562 216.617 cv
819.562 217.692 818.691 218.562 817.617 218.562 cv
cp
f
781.671 415.29 mo
759.686 415.29 li
759.686 383.685 li
781.671 383.685 li
781.671 415.29 li
cp
.0682689 .537316 .521691 0 cmyk
f
741.704 434.697 mo
826.383 434.697 li
826.383 367.416 li
741.704 367.416 li
741.704 434.697 li
cp
828.328 438.587 mo
739.759 438.587 li
738.685 438.587 737.814 437.716 737.814 436.642 cv
737.814 365.471 li
737.814 364.396 738.685 363.525 739.759 363.525 cv
828.328 363.525 li
829.402 363.525 830.273 364.396 830.273 365.471 cv
830.273 436.642 li
830.273 437.716 829.402 438.587 828.328 438.587 cv
cp
1 .55761 .36051 .10901 cmyk
f
815.123 393.512 mo
793.582 393.512 li
792.507 393.512 791.637 392.641 791.637 391.567 cv
791.637 390.492 792.507 389.621 793.582 389.621 cv
815.123 389.621 li
816.198 389.621 817.068 390.492 817.068 391.567 cv
817.068 392.641 816.198 393.512 815.123 393.512 cv
cp
f
807.897 405.374 mo
793.582 405.374 li
792.507 405.374 791.637 404.503 791.637 403.428 cv
791.637 402.354 792.507 401.483 793.582 401.483 cv
807.897 401.483 li
808.971 401.483 809.842 402.354 809.842 403.428 cv
809.842 404.503 808.971 405.374 807.897 405.374 cv
cp
f
812.192 381.651 mo
793.582 381.651 li
792.507 381.651 791.637 380.78 791.637 379.705 cv
791.637 378.631 792.507 377.76 793.582 377.76 cv
812.192 377.76 li
813.266 377.76 814.137 378.631 814.137 379.705 cv
814.137 380.78 813.266 381.651 812.192 381.651 cv
cp
f
810.93 429.097 mo
752.412 429.097 li
751.338 429.097 750.467 428.227 750.467 427.152 cv
750.467 426.078 751.338 425.207 752.412 425.207 cv
810.93 425.207 li
812.005 425.207 812.876 426.078 812.876 427.152 cv
812.876 428.227 812.005 429.097 810.93 429.097 cv
cp
f
803.602 417.235 mo
793.582 417.235 li
792.507 417.235 791.637 416.365 791.637 415.29 cv
791.637 414.216 792.507 413.345 793.582 413.345 cv
803.602 413.345 li
804.677 413.345 805.548 414.216 805.548 415.29 cv
805.548 416.365 804.677 417.235 803.602 417.235 cv
cp
f
813.623 417.235 mo
811.47 417.235 li
810.395 417.235 809.525 416.365 809.525 415.29 cv
809.525 414.216 810.395 413.345 811.47 413.345 cv
813.623 413.345 li
814.698 413.345 815.568 414.216 815.568 415.29 cv
815.568 416.365 814.698 417.235 813.623 417.235 cv
cp
f
741.704 363.525 mo
826.383 363.525 li
826.383 359.764 li
826.383 358.751 825.559 357.927 824.545 357.927 cv
743.542 357.927 li
742.528 357.927 741.704 358.751 741.704 359.764 cv
741.704 363.525 li
cp
828.328 367.416 mo
739.759 367.416 li
738.685 367.416 737.814 366.545 737.814 365.471 cv
737.814 359.764 li
737.814 356.606 740.384 354.037 743.542 354.037 cv
824.545 354.037 li
827.703 354.037 830.273 356.606 830.273 359.764 cv
830.273 365.471 li
830.273 366.545 829.402 367.416 828.328 367.416 cv
cp
f
780.199 378.487 mo
780.215 378.487 li
780.199 378.487 li
cp
754.357 413.345 mo
779.727 413.345 li
779.727 378.487 li
754.357 378.487 li
754.357 413.345 li
cp
780.199 417.235 mo
753.885 417.235 li
752 417.235 750.467 415.703 750.467 413.818 cv
750.467 378.014 li
750.467 376.13 752 374.597 753.885 374.597 cv
780.199 374.597 li
782.084 374.597 783.617 376.13 783.617 378.014 cv
783.617 413.818 li
783.617 415.703 782.084 417.235 780.199 417.235 cv
cp
f
569.025 584.022 mo
569.025 584.022 563.734 556.267 591.202 556.267 cv
618.669 556.267 626.882 567.817 626.882 567.817 cv
626.882 567.817 622.039 581.563 604.432 581.563 cv
586.824 581.563 589.215 577.857 585.701 584.41 cv
582.186 590.963 583.083 591.362 583.083 591.362 cv
583.083 591.362 575.051 578.015 569.025 584.022 cv
cp
.0682689 .537316 .521691 0 cmyk
f
608.467 632.73 mo
607.833 632.73 607.199 632.706 606.567 632.658 cv
596.107 631.868 589.601 624.732 587.857 622.565 cv
587.183 621.728 587.316 620.503 588.151 619.83 cv
588.993 619.157 590.215 619.289 590.887 620.126 cv
592.384 621.986 597.959 628.106 606.859 628.779 cv
609.611 628.987 612.366 628.66 615.06 627.808 cv
616.977 627.203 618.465 625.548 618.943 623.487 cv
619.156 622.573 619.363 621.718 619.562 620.897 cv
620.534 616.88 621.303 613.706 621.644 607.917 cv
622.233 597.904 621.458 587.83 619.341 577.976 cv
619.115 576.925 619.784 575.891 620.834 575.665 cv
621.893 575.444 622.919 576.109 623.144 577.158 cv
625.335 587.356 626.137 597.782 625.528 608.145 cv
625.166 614.283 624.321 617.772 623.343 621.812 cv
623.147 622.623 622.943 623.466 622.733 624.368 cv
621.945 627.762 619.454 630.501 616.232 631.518 cv
613.681 632.324 611.076 632.73 608.467 632.73 cv
cp
1 .55761 .36051 .10901 cmyk
f
579.53 606.695 mo
579.527 606.695 579.526 606.695 579.523 606.695 cv
577.184 606.687 572.692 606.189 568.894 602.949 cv
564.484 599.187 561.341 592.154 564.204 586.527 cv
564.58 585.794 566.646 582.103 570.71 581.284 cv
574.792 580.46 579.128 582.751 582.096 586.902 cv
582.296 586.011 li
583.483 580.761 588.735 577.407 594.008 578.54 cv
596.496 579.074 599.042 579.354 601.572 579.372 cv
610.147 579.42 617.003 576.494 621.191 574.018 cv
622.11 573.473 623.306 573.777 623.855 574.702 cv
624.402 575.627 624.095 576.82 623.169 577.367 cv
618.559 580.092 611.083 583.343 601.544 583.262 cv
598.75 583.242 595.938 582.934 593.191 582.344 cv
589.992 581.659 586.81 583.687 586.092 586.867 cv
584.709 592.992 li
584.516 593.843 583.782 594.462 582.913 594.508 cv
582.036 594.545 581.248 594.013 580.968 593.188 cv
578.986 587.323 574.57 584.473 571.479 585.098 cv
569.121 585.573 567.812 588.016 567.671 588.294 cv
565.783 592.002 568.095 597.153 571.42 599.989 cv
574.274 602.424 577.731 602.798 579.538 602.805 cv
580.612 602.809 581.48 603.683 581.476 604.757 cv
581.471 605.829 580.602 606.695 579.53 606.695 cv
cp
f
563.127 590.293 mo
562.363 590.293 561.636 589.838 561.328 589.085 cv
559.814 585.398 556.74 575.684 560.844 565.144 cv
561.863 562.538 564.318 557.514 569.347 553.135 cv
582.348 541.818 603.477 543.17 617.624 550.351 cv
622.174 552.661 626.344 555.726 630.017 559.461 cv
630.423 559.876 630.625 560.449 630.564 561.027 cv
630.295 563.616 629.661 566.148 628.683 568.551 cv
627.44 571.604 625.668 574.388 623.417 576.828 cv
622.688 577.619 621.458 577.668 620.668 576.939 cv
619.878 576.21 619.829 574.979 620.557 574.189 cv
622.492 572.094 624.013 569.703 625.081 567.083 cv
625.806 565.303 626.309 563.439 626.583 561.531 cv
623.37 558.394 619.767 555.802 615.864 553.82 cv
602.871 547.227 583.603 545.883 571.902 556.07 cv
567.336 560.044 565.183 564.728 564.469 566.558 cv
560.875 575.787 563.592 584.354 564.926 587.608 cv
565.335 588.603 564.859 589.739 563.865 590.146 cv
563.624 590.246 563.373 590.293 563.127 590.293 cv
cp
f
569.689 628.01 mo
568.615 628.01 567.744 627.14 567.744 626.065 cv
567.744 601.938 li
567.744 600.864 568.615 599.993 569.689 599.993 cv
570.763 599.993 571.634 600.864 571.634 601.938 cv
571.634 626.065 li
571.634 627.14 570.763 628.01 569.689 628.01 cv
cp
f
604.278 640.289 mo
603.204 640.289 602.333 639.419 602.333 638.344 cv
602.333 630.766 li
602.333 629.691 603.204 628.82 604.278 628.82 cv
605.353 628.82 606.224 629.691 606.224 630.766 cv
606.224 638.344 li
606.224 639.419 605.353 640.289 604.278 640.289 cv
cp
f
756.921 593.922 mo
756.921 593.922 755.459 593.922 752.191 593.922 cv
748.924 593.922 746.553 596.223 746.553 599.362 cv
746.553 602.501 746.553 613.483 746.553 613.483 cv
756.921 613.483 li
756.921 593.922 li
cp
.330877 0 .78497 0 cmyk
f
817.161 594.576 mo
817.161 594.576 827.757 592.666 827.757 602.54 cv
827.757 610.45 823.966 611.647 823.966 611.647 cv
817.161 614.376 li
817.161 594.576 li
cp
f
748.405 589.374 mo
747.33 589.374 746.46 588.503 746.46 587.429 cv
746.46 575.85 li
746.46 558.242 761.606 543.916 780.224 543.916 cv
787.865 543.916 li
806.482 543.916 821.629 558.242 821.629 575.85 cv
821.629 586.983 li
821.629 588.057 820.758 588.928 819.684 588.928 cv
818.609 588.928 817.739 588.057 817.739 586.983 cv
817.739 575.85 li
817.739 560.387 804.336 547.806 787.865 547.806 cv
780.224 547.806 li
763.752 547.806 750.35 560.387 750.35 575.85 cv
750.35 587.429 li
750.35 588.503 749.479 589.374 748.405 589.374 cv
cp
1 .55761 .36051 .10901 cmyk
f
810.867 590.803 mo
810.882 590.803 li
810.867 590.803 li
cp
811.184 591.539 mo
811.184 591.54 811.184 591.54 811.184 591.541 cv
811.184 591.54 811.184 591.54 811.184 591.539 cv
cp
767.957 586.004 mo
772.125 586.004 775.908 587.79 779.104 589.298 cv
780.139 589.787 781.143 590.262 782.12 590.659 cv
789.416 593.619 798.32 593.225 808.587 589.496 cv
808.745 589.438 808.908 589.402 809.07 589.387 cv
809.291 586.847 809.051 584.36 808.352 581.979 cv
804.802 569.887 797.018 564.255 783.854 564.255 cv
776.3 564.255 770.589 566.09 766.392 569.865 cv
761.906 573.901 760.193 578.975 759.664 580.969 cv
758.852 584.023 758.754 586.849 758.953 589.198 cv
760.433 588.051 762.016 587.205 763.69 586.668 cv
765.15 586.2 766.576 586.004 767.957 586.004 cv
cp
792.705 596.512 mo
788.375 596.512 784.353 595.763 780.658 594.264 cv
779.617 593.841 778.544 593.337 777.443 592.816 cv
773.426 590.921 769.278 588.961 764.878 590.373 cv
762.781 591.046 760.831 592.409 759.08 594.426 cv
758.6 594.978 757.854 595.214 757.143 595.039 cv
756.433 594.864 755.883 594.305 755.716 593.593 cv
754.985 590.455 754.423 585.544 755.904 579.972 cv
756.521 577.641 758.526 571.708 763.79 566.973 cv
768.665 562.588 775.415 560.365 783.854 560.365 cv
798.797 560.365 808.031 567.077 812.084 580.883 cv
813.044 584.156 813.283 587.585 812.794 591.074 cv
812.794 591.075 812.792 591.075 812.792 591.075 cv
812.313 594.476 810.131 594.374 809.689 594.318 cv
809.189 594.254 808.728 594.03 808.347 593.701 cv
802.774 595.574 797.55 596.512 792.705 596.512 cv
cp
f
784.344 641.14 mo
782.222 641.14 780.108 640.835 778.057 640.232 cv
777.026 639.93 776.437 638.849 776.739 637.818 cv
777.042 636.787 778.122 636.195 779.154 636.5 cv
780.848 636.998 782.594 637.25 784.344 637.25 cv
797.144 637.25 808.04 624.858 809.151 609.039 cv
809.228 607.967 810.125 607.173 811.228 607.234 cv
812.3 607.309 813.107 608.239 813.032 609.311 cv
811.778 627.159 799.177 641.14 784.344 641.14 cv
cp
f
760.476 622.996 mo
760.05 622.996 759.621 622.857 759.263 622.571 cv
756.138 620.074 754.684 616.108 754.684 610.092 cv
754.684 609.017 755.555 608.147 756.629 608.147 cv
757.704 608.147 758.574 609.017 758.574 610.092 cv
758.574 616.32 760.354 618.462 761.691 619.531 cv
762.53 620.202 762.667 621.426 761.997 622.265 cv
761.612 622.746 761.047 622.996 760.476 622.996 cv
cp
f
813.404 612.453 mo
816.556 612.453 li
821.743 612.453 825.963 608.233 825.963 603.047 cv
825.963 598.334 li
825.963 593.147 821.743 588.928 816.556 588.928 cv
813.404 588.928 li
813.404 612.453 li
cp
816.556 616.343 mo
811.459 616.343 li
810.385 616.343 809.514 615.472 809.514 614.398 cv
809.514 586.983 li
809.514 585.908 810.385 585.038 811.459 585.038 cv
816.556 585.038 li
823.889 585.038 829.853 591.002 829.853 598.334 cv
829.853 603.047 li
829.853 610.378 823.889 616.343 816.556 616.343 cv
cp
f
751.531 588.928 mo
746.344 588.928 742.125 593.147 742.125 598.334 cv
742.125 603.047 li
742.125 608.233 746.344 612.453 751.531 612.453 cv
754.684 612.453 li
754.684 588.928 li
751.531 588.928 li
cp
756.629 616.343 mo
751.531 616.343 li
744.2 616.343 738.235 610.378 738.235 603.047 cv
738.235 598.334 li
738.235 591.002 744.2 585.038 751.531 585.038 cv
756.629 585.038 li
757.704 585.038 758.574 585.908 758.574 586.983 cv
758.574 614.398 li
758.574 615.472 757.704 616.343 756.629 616.343 cv
cp
f
773.078 632.792 mo
765.539 632.792 li
754.841 632.792 746.46 624.713 746.46 614.398 cv
746.46 613.323 747.33 612.453 748.405 612.453 cv
749.479 612.453 750.35 613.323 750.35 614.398 cv
750.35 622.531 757.021 628.902 765.539 628.902 cv
773.078 628.902 li
774.153 628.902 775.023 629.772 775.023 630.847 cv
775.023 631.921 774.153 632.792 773.078 632.792 cv
cp
f
772.525 628.134 mo
772.396 628.134 772.282 628.248 772.282 628.377 cv
772.282 628.659 li
772.282 628.788 772.396 628.902 772.525 628.902 cv
776.373 628.902 li
776.502 628.902 776.616 628.788 776.616 628.659 cv
776.616 628.377 li
776.616 628.248 776.502 628.134 776.373 628.134 cv
772.525 628.134 li
cp
776.373 632.792 mo
772.525 632.792 li
770.246 632.792 768.392 630.938 768.392 628.659 cv
768.392 628.377 li
768.392 626.098 770.246 624.244 772.525 624.244 cv
776.373 624.244 li
778.652 624.244 780.506 626.098 780.506 628.377 cv
780.506 628.659 li
780.506 630.938 778.652 632.792 776.373 632.792 cv
cp
f
794.848 595.868 mo
794.626 595.868 794.399 595.83 794.177 595.748 cv
793.842 595.625 785.909 592.628 783.113 584.667 cv
782.757 583.653 783.29 582.543 784.304 582.188 cv
785.309 581.83 786.427 582.364 786.784 583.378 cv
788.96 589.578 795.46 592.075 795.525 592.099 cv
796.53 592.475 797.044 593.593 796.67 594.598 cv
796.379 595.382 795.638 595.868 794.848 595.868 cv
cp
f
814.302 811.422 mo
763.708 811.422 li
763.708 782.252 li
763.708 778.974 766.365 776.316 769.643 776.316 cv
814.302 776.316 li
814.302 811.422 li
cp
.435218 .00509651 .10486 0 cmyk
f
737.22 813.366 mo
737.518 816.401 739.519 818.754 741.937 818.754 cv
826.151 818.754 li
828.568 818.754 830.569 816.401 830.867 813.366 cv
737.22 813.366 li
cp
826.151 822.644 mo
741.937 822.644 li
737.17 822.644 733.292 818.131 733.292 812.582 cv
733.292 811.421 li
733.292 810.347 734.162 809.476 735.237 809.476 cv
832.85 809.476 li
833.925 809.476 834.795 810.347 834.795 811.421 cv
834.795 812.582 li
834.795 818.131 830.917 822.644 826.151 822.644 cv
cp
1 .55761 .36051 .10901 cmyk
f
825.051 811.403 mo
823.977 811.403 823.106 810.532 823.106 809.458 cv
823.106 760.898 li
823.106 759.706 822.047 758.735 820.746 758.735 cv
747.265 758.735 li
745.964 758.735 744.905 759.706 744.905 760.898 cv
744.905 809.458 li
744.905 810.532 744.034 811.403 742.96 811.403 cv
741.885 811.403 741.015 810.532 741.015 809.458 cv
741.015 760.898 li
741.015 757.561 743.818 754.845 747.265 754.845 cv
820.746 754.845 li
824.193 754.845 826.996 757.561 826.996 760.898 cv
826.996 809.458 li
826.996 810.532 826.126 811.403 825.051 811.403 cv
cp
f
814.301 811.403 mo
813.227 811.403 812.356 810.532 812.356 809.458 cv
812.356 770.353 li
812.356 769.673 811.803 769.121 811.123 769.121 cv
756.886 769.121 li
756.207 769.121 755.654 769.673 755.654 770.353 cv
755.654 801.905 li
755.654 802.979 754.783 803.85 753.708 803.85 cv
752.634 803.85 751.763 802.979 751.763 801.905 cv
751.763 770.353 li
751.763 767.528 754.061 765.231 756.886 765.231 cv
811.123 765.231 li
813.948 765.231 816.246 767.528 816.246 770.353 cv
816.246 809.458 li
816.246 810.532 815.375 811.403 814.301 811.403 cv
cp
f
610.583 782.272 mo
613.587 778.886 613.587 773.346 610.583 769.959 cv
610.583 769.959 li
607.578 766.573 602.662 766.573 599.658 769.959 cv
599.658 769.959 li
599.335 770.323 598.912 770.505 598.489 770.505 cv
598.066 770.505 597.643 770.323 597.321 769.959 cv
597.321 769.959 li
594.316 766.573 589.4 766.573 586.396 769.959 cv
586.396 769.959 li
583.391 773.346 583.391 778.886 586.396 782.272 cv
610.583 782.272 li
cp
.0752575 .211215 1 0 cmyk
f
589.789 795.616 mo
589.905 796.26 590.021 797.228 589.934 798.396 cv
589.507 804.107 584.792 806.773 583.136 810.775 cv
582.16 813.135 581.975 816.616 585.633 821.45 cv
589.719 821.45 593.804 821.45 597.889 821.45 cv
601.974 821.45 606.06 821.45 610.145 821.45 cv
613.804 816.616 613.619 813.135 612.643 810.775 cv
610.987 806.773 606.272 804.107 605.844 798.396 cv
605.757 797.228 605.874 796.26 605.989 795.616 cv
589.789 795.616 li
cp
f
579.032 781.379 mo
578.495 781.379 577.962 781.158 577.578 780.725 cv
573.046 775.621 573.046 767.314 577.578 762.209 cv
579.831 759.669 582.858 758.269 586.101 758.269 cv
589.343 758.269 592.37 759.669 594.625 762.209 cv
596.993 759.669 600.019 758.269 603.26 758.269 cv
606.503 758.268 609.53 759.668 611.786 762.209 cv
616.314 767.314 616.314 775.621 611.787 780.725 cv
611.071 781.529 609.84 781.599 609.041 780.889 cv
608.237 780.177 608.163 778.947 608.875 778.143 cv
612.086 774.525 612.086 768.41 608.875 764.791 cv
607.369 763.094 605.376 762.159 603.262 762.159 cv
601.148 762.159 599.154 763.094 597.649 764.791 cv
596.112 766.521 593.25 766.52 591.715 764.792 cv
590.209 763.094 588.215 762.159 586.101 762.159 cv
583.986 762.159 581.992 763.094 580.488 764.791 cv
577.275 768.411 577.275 774.524 580.486 778.143 cv
581.201 778.946 581.126 780.176 580.324 780.889 cv
579.953 781.218 579.492 781.379 579.032 781.379 cv
cp
1 .55761 .36051 .10901 cmyk
f
610.694 823.395 mo
578.669 823.395 li
578.105 823.395 577.568 823.15 577.199 822.723 cv
572.771 817.612 571.576 812.804 573.648 808.432 cv
574.597 806.428 576.149 804.747 577.651 803.122 cv
579.918 800.666 582.061 798.346 582.349 794.971 cv
582.422 794.102 582.371 793.221 582.193 792.352 cv
581.977 791.299 582.656 790.271 583.708 790.056 cv
584.76 789.841 585.788 790.52 586.004 791.572 cv
586.256 792.807 586.331 794.061 586.225 795.302 cv
585.823 800.005 583 803.063 580.509 805.76 cv
579.146 807.236 577.859 808.63 577.164 810.098 cv
575.874 812.82 576.663 815.903 579.576 819.504 cv
609.787 819.504 li
612.699 815.903 613.488 812.821 612.199 810.098 cv
611.504 808.63 610.217 807.237 608.854 805.761 cv
606.363 803.064 603.54 800.006 603.137 795.303 cv
603.031 794.065 603.105 792.81 603.359 791.572 cv
603.573 790.52 604.594 789.842 605.655 790.056 cv
606.707 790.271 607.386 791.299 607.17 792.352 cv
606.992 793.224 606.939 794.105 607.012 794.971 cv
607.302 798.346 609.445 800.666 611.713 803.122 cv
613.214 804.747 614.766 806.428 615.715 808.433 cv
617.785 812.806 616.591 817.612 612.165 822.723 cv
611.795 823.15 611.258 823.395 610.694 823.395 cv
cp
f
570.926 834.624 mo
618.437 834.624 li
618.437 827.427 li
618.437 825.203 616.629 823.395 614.405 823.395 cv
574.958 823.395 li
572.734 823.395 570.926 825.203 570.926 827.427 cv
570.926 834.624 li
cp
620.382 838.514 mo
568.981 838.514 li
567.906 838.514 567.036 837.643 567.036 836.569 cv
567.036 827.427 li
567.036 823.059 570.59 819.504 574.958 819.504 cv
614.405 819.504 li
618.773 819.504 622.328 823.059 622.328 827.427 cv
622.328 836.569 li
622.328 837.643 621.457 838.514 620.382 838.514 cv
cp
f
614.153 783.571 mo
575.21 783.571 li
574.135 783.571 573.265 782.7 573.265 781.626 cv
573.265 780.551 574.135 779.68 575.21 779.68 cv
614.153 779.68 li
615.228 779.68 616.098 780.551 616.098 781.626 cv
616.098 782.7 615.228 783.571 614.153 783.571 cv
cp
f
610.593 791.965 mo
578.769 791.965 li
577.695 791.965 576.824 791.094 576.824 790.02 cv
576.824 788.945 577.695 788.074 578.769 788.074 cv
610.593 788.074 li
611.667 788.074 612.538 788.945 612.538 790.02 cv
612.538 791.094 611.667 791.965 610.593 791.965 cv
cp
f
594.682 765.702 mo
593.607 765.702 592.736 764.831 592.736 763.757 cv
592.736 740.921 li
592.736 739.847 593.607 738.976 594.682 738.976 cv
595.756 738.976 596.627 739.847 596.627 740.921 cv
596.627 763.757 li
596.627 764.831 595.756 765.702 594.682 765.702 cv
cp
f
601.987 751.054 mo
587.375 751.054 li
586.301 751.054 585.43 750.183 585.43 749.109 cv
585.43 748.035 586.301 747.164 587.375 747.164 cv
601.987 747.164 li
603.061 747.164 603.932 748.035 603.932 749.109 cv
603.932 750.183 603.061 751.054 601.987 751.054 cv
cp
f
432.299 823.854 mo
432.391 823.854 li
432.391 781.684 li
431.637 781.718 430.875 781.493 430.224 781.041 cv
430.185 781.022 430.132 780.994 430.056 780.953 cv
429.871 780.853 429.692 780.736 429.511 780.629 cv
428.986 780.321 428.458 780.019 427.936 779.705 cv
426.58 778.887 425.234 778.002 424.049 776.946 cv
422.781 775.815 421.801 774.317 421.826 772.569 cv
421.858 770.187 423.877 768.744 425.954 768.13 cv
427.843 767.572 429.22 768.628 429.771 770.045 cv
430.617 770.051 431.469 770.319 432.115 770.883 cv
432.207 770.963 432.299 771.045 432.391 771.126 cv
432.391 745.534 li
410.921 745.534 li
410.921 823.854 li
418.994 823.854 li
418.942 824.159 418.89 824.465 418.89 824.784 cv
418.89 828.17 421.915 830.915 425.646 830.915 cv
429.378 830.915 432.403 828.17 432.403 824.784 cv
432.403 824.465 432.351 824.159 432.299 823.854 cv
cp
.0682689 .537316 .521691 0 cmyk
f
452.462 809.791 mo
451.958 809.791 451.453 809.595 451.072 809.206 cv
444.555 802.541 li
443.805 801.773 443.818 800.541 444.586 799.79 cv
445.355 799.04 446.586 799.053 447.336 799.821 cv
453.853 806.485 li
454.604 807.254 454.59 808.485 453.822 809.236 cv
453.444 809.606 452.953 809.791 452.462 809.791 cv
cp
1 .55761 .36051 .10901 cmyk
f
432.39 816.67 mo
431.892 816.67 431.394 816.48 431.014 816.1 cv
430.255 815.339 430.255 814.108 431.015 813.348 cv
444.004 800.375 li
444.004 781.291 li
444.004 780.216 444.875 779.345 445.949 779.345 cv
447.023 779.345 447.894 780.216 447.894 781.291 cv
447.894 801.182 li
447.894 801.698 447.689 802.193 447.324 802.558 cv
433.766 816.102 li
433.386 816.48 432.887 816.67 432.39 816.67 cv
cp
f
367.64 816.67 mo
366.566 816.67 365.695 815.799 365.695 814.725 cv
365.695 797.169 li
365.677 797.064 365.667 796.956 365.667 796.847 cv
365.667 750.259 li
365.667 746.581 368.66 743.588 372.339 743.588 cv
437.129 743.588 li
438.203 743.588 439.074 744.459 439.074 745.533 cv
439.074 746.608 438.203 747.478 437.129 747.478 cv
435.595 747.478 434.348 748.726 434.348 750.259 cv
434.348 770.366 li
434.348 771.441 433.477 772.312 432.403 772.312 cv
431.328 772.312 430.457 771.441 430.457 770.366 cv
430.457 750.259 li
430.457 749.268 430.675 748.326 431.065 747.478 cv
372.339 747.478 li
370.805 747.478 369.558 748.726 369.558 750.259 cv
369.558 796.525 li
369.576 796.629 369.585 796.737 369.585 796.847 cv
369.585 814.725 li
369.585 815.799 368.714 816.67 367.64 816.67 cv
cp
f
425.651 833.902 mo
424.576 833.902 423.705 833.031 423.705 831.957 cv
423.705 830.882 424.576 830.011 425.651 830.011 cv
428.301 830.011 430.457 827.855 430.457 825.205 cv
430.457 783.033 li
430.457 781.958 431.328 781.088 432.403 781.088 cv
433.477 781.088 434.348 781.958 434.348 783.033 cv
434.348 825.205 li
434.348 830.001 430.447 833.902 425.651 833.902 cv
cp
f
403.922 765.193 mo
378.927 765.193 li
377.852 765.193 376.981 764.323 376.981 763.248 cv
376.981 762.174 377.852 761.303 378.927 761.303 cv
403.922 761.303 li
404.997 761.303 405.867 762.174 405.867 763.248 cv
405.867 764.323 404.997 765.193 403.922 765.193 cv
cp
f
402.371 779.454 mo
378.927 779.454 li
377.852 779.454 376.981 778.583 376.981 777.509 cv
376.981 776.434 377.852 775.564 378.927 775.564 cv
402.371 775.564 li
403.445 775.564 404.316 776.434 404.316 777.509 cv
404.316 778.583 403.445 779.454 402.371 779.454 cv
cp
f
402.38 793.715 mo
378.927 793.715 li
377.852 793.715 376.981 792.844 376.981 791.77 cv
376.981 790.695 377.852 789.824 378.927 789.824 cv
402.38 789.824 li
403.454 789.824 404.325 790.695 404.325 791.77 cv
404.325 792.844 403.454 793.715 402.38 793.715 cv
cp
f
410.922 807.975 mo
378.927 807.975 li
377.852 807.975 376.981 807.105 376.981 806.03 cv
376.981 804.956 377.852 804.085 378.927 804.085 cv
410.922 804.085 li
411.996 804.085 412.867 804.956 412.867 806.03 cv
412.867 807.105 411.996 807.975 410.922 807.975 cv
cp
f
364.933 830.01 mo
418.405 830.011 li
417.592 828.788 417.078 827.349 416.973 825.799 cv
360.157 825.799 li
360.449 828.151 362.446 829.981 364.868 830.011 cv
364.889 830.01 364.912 830.01 364.933 830.01 cv
cp
425.651 833.902 mo
364.933 833.902 li
360.131 833.902 356.23 830.001 356.23 825.205 cv
356.23 823.854 li
356.23 822.779 357.101 821.909 358.175 821.909 cv
418.899 821.909 li
419.973 821.909 420.844 822.779 420.844 823.854 cv
420.844 825.205 li
420.844 827.855 423 830.011 425.651 830.011 cv
425.651 830.011 li
426.725 830.011 427.596 830.882 427.596 831.957 cv
427.596 831.957 li
427.596 831.957 li
427.596 831.957 li
427.596 831.96 427.596 831.961 427.596 831.963 cv
427.596 831.963 li
427.594 832.334 427.489 832.679 427.31 832.973 cv
426.98 833.51 426.398 833.875 425.73 833.9 cv
425.702 833.902 425.676 833.902 425.651 833.902 cv
cp
f
432.401 784.977 mo
432.067 784.977 431.729 784.891 431.419 784.711 cv
423.667 780.174 li
420.149 778.103 418.96 773.555 421.013 770.034 cv
422.338 767.772 424.797 766.368 427.433 766.368 cv
428.728 766.368 430.012 766.715 431.149 767.373 cv
444.229 775.034 li
446.488 776.358 447.891 778.813 447.891 781.439 cv
447.891 782.513 447.02 783.384 445.946 783.384 cv
444.872 783.384 444.001 782.513 444.001 781.439 cv
444.001 780.187 443.335 779.019 442.262 778.391 cv
429.188 770.733 li
427.558 769.789 425.306 770.405 424.373 771.997 cv
423.397 773.669 423.964 775.833 425.637 776.819 cv
433.386 781.354 li
434.313 781.896 434.624 783.088 434.082 784.015 cv
433.72 784.633 433.068 784.977 432.401 784.977 cv
cp
f
434.348 751.69 mo
439.91 751.69 li
439.91 750.259 li
439.91 748.893 438.893 747.711 437.545 747.511 cv
437.375 747.482 437.255 747.478 437.129 747.478 cv
435.595 747.478 434.348 748.726 434.348 750.259 cv
434.348 751.69 li
cp
441.855 755.581 mo
432.403 755.581 li
431.328 755.581 430.457 754.71 430.457 753.635 cv
430.457 750.259 li
430.457 746.581 433.45 743.588 437.129 743.588 cv
437.489 743.588 437.828 743.612 438.167 743.672 cv
441.357 744.143 443.8 746.979 443.8 750.259 cv
443.8 753.635 li
443.8 754.71 442.929 755.581 441.855 755.581 cv
cp
f
419.535 398.386 mo
399.994 410.697 li
398.625 411.679 396.253 410.784 396.253 408.62 cv
396.253 383.998 li
396.253 381.959 398.435 380.906 399.994 381.92 cv
419.946 394.916 420.682 393.945 420.682 396.309 cv
420.682 397.259 420.3 397.95 419.535 398.386 cv
cp
449.474 394.183 mo
449.435 392.032 449.121 386.319 448.197 381.981 cv
447.287 377.796 443.989 374.666 439.926 374.205 cv
433.619 373.489 424.086 373.131 411.327 373.131 cv
378.556 373.131 374.942 372.748 373.545 388.317 cv
372.963 394.738 372.966 406.56 373.545 412.935 cv
373.904 416.935 374.3 426.09 382.728 427.05 cv
395.494 428.498 427.146 428.5 439.926 427.05 cv
449.446 425.968 449.848 414.762 449.474 394.183 cv
cp
.330877 0 .78497 0 cmyk
f
398.682 383.467 mo
398.576 383.467 398.489 383.505 398.444 383.529 cv
398.28 383.619 398.199 383.769 398.199 383.991 cv
398.199 408.612 li
398.199 408.847 398.274 408.985 398.45 409.076 cv
398.622 409.164 398.799 409.151 398.86 409.108 cv
418.499 396.733 li
418.523 396.718 418.546 396.704 418.572 396.689 cv
418.688 396.623 418.736 396.596 418.736 396.301 cv
418.736 396.227 418.738 396.161 418.735 396.099 cv
418.329 395.669 416.619 394.629 414.297 393.215 cv
411.17 391.311 406.44 388.433 398.932 383.543 cv
398.845 383.486 398.758 383.467 398.682 383.467 cv
cp
398.736 413.034 mo
398.041 413.034 397.325 412.872 396.673 412.537 cv
395.193 411.777 394.309 410.31 394.309 408.612 cv
394.309 383.991 li
394.309 382.335 395.161 380.883 396.59 380.109 cv
398.005 379.343 399.714 379.409 401.056 380.283 cv
408.515 385.141 413.212 388.001 416.321 389.893 cv
421.663 393.145 422.626 393.731 422.626 396.301 cv
422.626 397.931 421.886 399.259 420.542 400.045 cv
401.03 412.335 li
400.392 412.795 399.579 413.034 398.736 413.034 cv
cp
400.061 366.424 mo
366.958 366.424 364.901 366.805 363.517 382.23 cv
362.861 389.467 362.861 403.143 363.517 410.373 cv
363.573 411.029 li
364.111 417.34 365.283 424.14 372.428 424.953 cv
387.177 426.627 423.44 426.627 438.191 424.953 cv
447.207 423.929 447.957 413.175 447.514 388.881 cv
447.514 388.88 447.514 388.88 447.514 388.88 cv
447.476 386.754 447.147 380.138 446.08 375.127 cv
445.203 371.097 442.033 368.091 438.191 367.656 cv
430.998 366.839 419.935 366.425 405.308 366.425 cv
402.643 366.424 li
401.763 366.424 400.9 366.424 400.061 366.424 cv
cp
405.31 430.091 mo
392.386 430.091 379.463 429.667 371.989 428.819 cv
361.078 427.578 360.11 416.212 359.697 411.359 cv
359.642 410.722 li
358.956 403.179 358.956 389.431 359.642 381.881 cv
361.38 362.523 366.886 362.544 402.643 362.534 cv
405.308 362.535 li
420.081 362.535 431.293 362.957 438.629 363.79 cv
444.128 364.414 448.651 368.641 449.883 374.309 cv
450.975 379.438 451.355 386.036 451.405 388.81 cv
451.405 388.81 li
451.795 410.307 452.104 427.287 438.63 428.819 cv
431.156 429.667 418.233 430.091 405.31 430.091 cv
cp
1 .55761 .36051 .10901 cmyk
f
259.106 759.195 mo
254.912 759.195 li
254.912 816.874 li
220.973 816.874 li
222.46 818.314 222.897 820.54 221.672 822.604 cv
220.293 824.926 217.316 825.54 214.838 825.002 cv
212.402 824.473 210.499 822.269 210.747 819.817 cv
210.579 819.422 210.478 818.992 210.458 818.547 cv
210.431 817.938 210.615 817.37 210.922 816.874 cv
184.646 816.874 li
184.646 825.822 li
258.522 825.822 li
261.466 825.822 263.853 823.436 263.853 820.492 cv
263.853 763.941 li
263.853 761.32 261.727 759.195 259.106 759.195 cv
cp
.330877 0 .78497 0 cmyk
f
182.818 753.613 mo
181.396 753.613 178.946 755.294 178.946 757.016 cv
178.946 811.525 li
178.946 813.246 181.396 814.929 182.818 814.929 cv
214.011 814.929 li
214.011 757.016 li
214.011 755.203 212.952 753.613 211.744 753.613 cv
182.818 753.613 li
cp
215.956 818.819 mo
182.818 818.819 li
179.692 818.819 175.056 815.757 175.056 811.525 cv
175.056 757.016 li
175.056 752.785 179.692 749.722 182.818 749.722 cv
211.744 749.722 li
215.139 749.722 217.901 752.994 217.901 757.016 cv
217.901 816.874 li
217.901 817.948 217.031 818.819 215.956 818.819 cv
cp
1 .55761 .36051 .10901 cmyk
f
217.901 814.929 mo
250.699 814.929 li
251.907 814.929 252.966 813.339 252.966 811.525 cv
252.966 757.016 li
252.966 755.203 251.907 753.613 250.699 753.613 cv
220.169 753.613 li
218.961 753.613 217.901 755.203 217.901 757.016 cv
217.901 814.929 li
cp
250.699 818.819 mo
215.956 818.819 li
214.882 818.819 214.011 817.948 214.011 816.874 cv
214.011 757.016 li
214.011 752.994 216.774 749.722 220.169 749.722 cv
250.699 749.722 li
254.094 749.722 256.857 752.994 256.857 757.016 cv
256.857 811.525 li
256.857 815.547 254.094 818.819 250.699 818.819 cv
cp
f
259.557 827.767 mo
232.247 827.767 li
231.173 827.767 230.302 826.896 230.302 825.822 cv
230.302 824.747 231.173 823.877 232.247 823.877 cv
259.557 823.877 li
260.81 823.877 261.908 822.237 261.908 820.368 cv
261.908 764.649 li
261.908 762.779 260.81 761.14 259.557 761.14 cv
257.294 761.14 li
256.22 761.14 255.349 760.269 255.349 759.194 cv
255.349 758.12 256.22 757.249 257.294 757.249 cv
259.557 757.249 li
262.999 757.249 265.799 760.569 265.799 764.649 cv
265.799 820.368 li
265.799 824.448 262.999 827.767 259.557 827.767 cv
cp
f
201.232 827.767 mo
172.355 827.767 li
168.915 827.767 166.115 824.448 166.115 820.368 cv
166.115 764.649 li
166.115 760.569 168.915 757.249 172.355 757.249 cv
174.618 757.249 li
175.692 757.249 176.563 758.12 176.563 759.194 cv
176.563 760.269 175.692 761.14 174.618 761.14 cv
172.355 761.14 li
171.103 761.14 170.006 762.779 170.006 764.649 cv
170.006 820.368 li
170.006 822.237 171.103 823.877 172.355 823.877 cv
201.232 823.877 li
202.306 823.877 203.177 824.747 203.177 825.822 cv
203.177 826.896 202.306 827.767 201.232 827.767 cv
cp
f
216.108 827.767 mo
211.412 827.767 207.592 823.605 207.592 818.489 cv
207.592 817.415 208.463 816.544 209.537 816.544 cv
210.611 816.544 211.482 817.415 211.482 818.489 cv
211.482 821.46 213.558 823.877 216.108 823.877 cv
218.66 823.877 220.736 821.46 220.736 818.489 cv
220.736 817.415 221.606 816.544 222.681 816.544 cv
223.755 816.544 224.626 817.415 224.626 818.489 cv
224.626 823.605 220.805 827.767 216.108 827.767 cv
cp
f
207.932 765.839 mo
185.025 765.839 li
183.95 765.839 183.079 764.968 183.079 763.893 cv
183.079 762.819 183.95 761.948 185.025 761.948 cv
207.932 761.948 li
209.007 761.948 209.877 762.819 209.877 763.893 cv
209.877 764.968 209.007 765.839 207.932 765.839 cv
cp
f
204.723 793.008 mo
185.025 793.008 li
183.95 793.008 183.079 792.137 183.079 791.063 cv
183.079 789.988 183.95 789.118 185.025 789.118 cv
204.723 789.118 li
205.797 789.118 206.668 789.988 206.668 791.063 cv
206.668 792.137 205.797 793.008 204.723 793.008 cv
cp
f
198.304 806.593 mo
185.025 806.593 li
183.95 806.593 183.079 805.722 183.079 804.648 cv
183.079 803.574 183.95 802.703 185.025 802.703 cv
198.304 802.703 li
199.378 802.703 200.249 803.574 200.249 804.648 cv
200.249 805.722 199.378 806.593 198.304 806.593 cv
cp
f
207.932 806.593 mo
204.723 806.593 li
203.648 806.593 202.778 805.722 202.778 804.648 cv
202.778 803.574 203.648 802.703 204.723 802.703 cv
207.932 802.703 li
209.007 802.703 209.877 803.574 209.877 804.648 cv
209.877 805.722 209.007 806.593 207.932 806.593 cv
cp
f
198.304 779.424 mo
185.025 779.424 li
183.95 779.424 183.079 778.553 183.079 777.478 cv
183.079 776.404 183.95 775.533 185.025 775.533 cv
198.304 775.533 li
199.378 775.533 200.249 776.404 200.249 777.478 cv
200.249 778.553 199.378 779.424 198.304 779.424 cv
cp
f
246.888 765.839 mo
223.98 765.839 li
222.906 765.839 222.035 764.968 222.035 763.893 cv
222.035 762.819 222.906 761.948 223.98 761.948 cv
246.888 761.948 li
247.962 761.948 248.833 762.819 248.833 763.893 cv
248.833 764.968 247.962 765.839 246.888 765.839 cv
cp
f
234.411 793.008 mo
223.98 793.008 li
222.906 793.008 222.035 792.137 222.035 791.063 cv
222.035 789.988 222.906 789.118 223.98 789.118 cv
234.411 789.118 li
235.486 789.118 236.356 789.988 236.356 791.063 cv
236.356 792.137 235.486 793.008 234.411 793.008 cv
cp
f
246.888 806.593 mo
223.98 806.593 li
222.906 806.593 222.035 805.722 222.035 804.648 cv
222.035 803.574 222.906 802.703 223.98 802.703 cv
246.888 802.703 li
247.962 802.703 248.833 803.574 248.833 804.648 cv
248.833 805.722 247.962 806.593 246.888 806.593 cv
cp
f
243.193 779.424 mo
223.98 779.424 li
222.906 779.424 222.035 778.553 222.035 777.478 cv
222.035 776.404 222.906 775.533 223.98 775.533 cv
243.193 775.533 li
244.268 775.533 245.139 776.404 245.139 777.478 cv
245.139 778.553 244.268 779.424 243.193 779.424 cv
cp
f
421.902 603.248 mo
420.985 599.583 419.754 595.596 421.205 592.229 cv
421.094 590.493 422.148 588.667 424.387 588.667 cv
425.377 588.667 li
426.359 588.667 427.176 589.125 427.754 589.789 cv
427.754 563.155 li
391.719 563.155 li
391.719 616.838 li
422.704 616.838 li
421.922 612.37 423.044 607.811 421.902 603.248 cv
cp
.435218 .00509651 .10486 0 cmyk
f
426.608 627.744 mo
384.03 627.744 li
382.955 627.744 382.085 626.874 382.085 625.799 cv
382.085 624.725 382.955 623.854 384.03 623.854 cv
426.608 623.854 li
427.682 623.854 428.553 624.725 428.553 625.799 cv
428.553 626.874 427.682 627.744 426.608 627.744 cv
cp
1 .55761 .36051 .10901 cmyk
f
436.17 583.105 mo
435.095 583.105 434.225 582.235 434.225 581.16 cv
434.225 551.468 li
434.225 549.057 432.263 547.095 429.853 547.095 cv
380.771 547.095 li
378.369 547.095 376.413 549.051 376.413 551.455 cv
376.413 581.148 li
376.413 582.222 375.542 583.093 374.468 583.093 cv
373.393 583.093 372.523 582.222 372.523 581.148 cv
372.523 551.455 li
372.523 546.906 376.223 543.205 380.771 543.205 cv
429.853 543.205 li
434.409 543.205 438.115 546.912 438.115 551.468 cv
438.115 581.16 li
438.115 582.235 437.244 583.105 436.17 583.105 cv
cp
f
427.754 582.438 mo
426.679 582.438 425.809 581.568 425.809 580.493 cv
425.809 557.003 li
425.809 556.8 425.631 556.622 425.427 556.622 cv
385.221 556.622 li
385.013 556.622 384.829 556.8 384.829 557.003 cv
384.829 580.493 li
384.829 581.568 383.958 582.438 382.884 582.438 cv
381.809 582.438 380.939 581.568 380.939 580.493 cv
380.939 557.003 li
380.939 554.648 382.86 552.732 385.221 552.732 cv
425.427 552.732 li
427.783 552.732 429.699 554.648 429.699 557.003 cv
429.699 580.493 li
429.699 581.568 428.828 582.438 427.754 582.438 cv
cp
f
413.656 618.783 mo
396.982 618.783 li
395.908 618.783 395.037 617.912 395.037 616.838 cv
395.037 615.763 395.908 614.893 396.982 614.893 cv
413.656 614.893 li
414.73 614.893 415.601 615.763 415.601 616.838 cv
415.601 617.912 414.73 618.783 413.656 618.783 cv
cp
f
381.062 641.852 mo
380.864 641.852 380.662 641.822 380.465 641.757 cv
379.442 641.427 378.881 640.33 379.211 639.308 cv
381.799 631.299 li
362.19 624.963 li
361.165 628.14 li
360.835 629.161 359.735 629.724 358.716 629.393 cv
357.694 629.063 357.133 627.966 357.463 626.944 cv
359.086 621.917 li
359.244 621.426 359.592 621.018 360.051 620.783 cv
360.508 620.548 361.04 620.504 361.535 620.664 cv
384.846 628.195 li
385.867 628.526 386.428 629.622 386.098 630.644 cv
382.913 640.504 li
382.647 641.328 381.884 641.852 381.062 641.852 cv
cp
f
429.848 630.677 mo
429.093 630.677 428.374 630.234 428.058 629.495 cv
427.509 628.21 425.933 625.783 424.544 623.641 cv
423.143 621.481 421.82 619.442 421.216 618.12 cv
421.06 617.814 420.946 617.478 420.871 617.235 cv
420.584 616.025 420.502 613.137 420.388 608.515 cv
420.32 605.697 420.224 601.836 420.069 601.125 cv
418.156 594.775 418.408 590.247 420.835 587.722 cv
422.608 585.877 425.022 585.679 426.699 586.114 cv
431.242 587.281 431.859 592.097 432.355 595.967 cv
432.577 597.707 432.808 599.507 433.331 600.823 cv
433.386 600.946 433.675 601.377 434.225 601.802 cv
434.225 581.16 li
434.225 580.375 434.697 579.666 435.422 579.365 cv
436.149 579.062 436.983 579.226 437.541 579.78 cv
442.817 585.018 450.023 592.483 451.684 596.825 cv
451.851 597.284 451.981 597.697 451.981 597.697 cv
452.768 600.321 452.362 602.886 451.622 607.542 cv
451.373 609.086 450.95 611.402 450.511 613.81 cv
449.905 617.135 449.277 620.572 449.029 622.387 cv
448.885 623.452 447.873 624.191 446.841 624.052 cv
445.776 623.907 445.03 622.927 445.176 621.863 cv
445.434 619.961 446.069 616.478 446.685 613.111 cv
447.118 610.734 447.536 608.447 447.78 606.928 cv
448.45 602.708 448.786 600.589 448.26 598.835 cv
448.26 598.835 li
448.26 598.835 448.16 598.516 448.04 598.185 cv
447.175 595.925 443.84 591.792 438.115 585.891 cv
438.115 604.843 li
438.115 605.405 437.872 605.94 437.448 606.309 cv
437.024 606.679 436.465 606.849 435.902 606.77 cv
435.184 606.67 434.399 606.312 433.368 605.815 cv
431.438 604.898 430.137 603.357 429.707 602.238 cv
429.012 600.487 428.749 598.44 428.496 596.462 cv
428.012 592.685 427.584 590.358 425.727 589.88 cv
425.597 589.847 424.446 589.581 423.64 590.418 cv
423.014 591.069 421.777 593.312 423.81 600.058 cv
424.072 600.952 424.149 603.176 424.277 608.42 cv
424.35 611.392 424.45 615.462 424.623 616.218 cv
424.622 616.211 424.622 616.208 424.622 616.208 cv
424.625 616.208 424.663 616.317 424.722 616.436 cv
425.239 617.565 426.544 619.577 427.807 621.523 cv
429.354 623.908 430.954 626.374 431.635 627.966 cv
432.058 628.954 431.599 630.097 430.611 630.519 cv
430.362 630.626 430.102 630.677 429.848 630.677 cv
cp
f
429.576 641.852 mo
428.754 641.852 427.991 641.328 427.725 640.504 cv
424.54 630.644 li
424.21 629.622 424.771 628.526 425.792 628.195 cv
449.102 620.664 li
449.596 620.504 450.13 620.548 450.587 620.783 cv
451.046 621.018 451.394 621.426 451.552 621.917 cv
453.175 626.944 li
453.505 627.966 452.944 629.063 451.921 629.393 cv
450.896 629.722 449.801 629.16 449.473 628.14 cv
448.447 624.963 li
428.839 631.299 li
431.427 639.308 li
431.757 640.33 431.196 641.427 430.173 641.757 cv
429.976 641.822 429.774 641.852 429.576 641.852 cv
cp
f
380.785 630.683 mo
380.53 630.683 380.27 630.632 380.021 630.525 cv
379.033 630.102 378.576 628.958 379 627.97 cv
379.683 626.374 381.285 623.904 382.835 621.516 cv
384.095 619.574 385.397 617.566 385.885 616.505 cv
385.99 616.29 386.014 616.202 386.014 616.201 cv
386.185 615.459 386.285 611.409 386.356 608.451 cv
386.487 603.182 386.566 600.949 386.83 600.065 cv
388.859 593.312 387.619 591.066 386.993 590.414 cv
386.188 589.576 385.036 589.841 384.91 589.874 cv
383.051 590.352 382.624 592.682 382.142 596.463 cv
381.888 598.442 381.629 600.489 380.926 602.259 cv
380.487 603.372 379.186 604.906 377.272 605.823 cv
376.267 606.304 375.439 606.679 374.706 606.768 cv
374.149 606.833 373.599 606.661 373.182 606.293 cv
372.766 605.923 372.527 605.393 372.527 604.837 cv
372.527 585.884 li
365.494 593.14 363.213 596.586 362.59 598.22 cv
362.472 598.531 362.379 598.83 362.373 598.848 cv
361.856 600.586 362.192 602.706 362.862 606.932 cv
363.108 608.489 363.54 610.852 363.987 613.292 cv
364.587 616.589 365.21 619.997 365.461 621.865 cv
365.604 622.929 364.856 623.908 363.791 624.051 cv
362.727 624.194 361.748 623.448 361.604 622.382 cv
361.367 620.605 360.753 617.243 360.159 613.991 cv
359.707 611.516 359.27 609.119 359.02 607.542 cv
358.282 602.886 357.874 600.321 358.65 597.72 cv
358.654 597.705 358.785 597.279 358.955 596.834 cv
360.622 592.463 367.828 585.003 373.103 579.773 cv
373.661 579.219 374.497 579.058 375.22 579.359 cv
375.945 579.66 376.418 580.369 376.418 581.154 cv
376.418 601.803 li
376.969 601.373 377.26 600.937 377.313 600.817 cv
377.831 599.511 378.06 597.711 378.282 595.97 cv
378.776 592.097 379.392 587.277 383.939 586.107 cv
385.604 585.674 388.023 585.872 389.797 587.718 cv
392.225 590.244 392.481 594.774 390.557 601.183 cv
390.411 601.854 390.315 605.723 390.247 608.547 cv
390.133 613.15 390.051 616.027 389.798 617.101 cv
389.716 617.443 389.578 617.813 389.394 618.182 cv
388.817 619.445 387.496 621.48 386.098 623.634 cv
384.706 625.78 383.129 628.213 382.574 629.503 cv
382.258 630.241 381.54 630.683 380.785 630.683 cv
cp
f
192.485 437.585 mo
192.485 437.585 193.242 429.991 196.342 424.753 cv
199.443 419.515 205.877 415.366 205.877 415.366 cv
205.877 415.366 211.57 426.475 220.55 426.475 cv
229.53 426.475 236.426 411.802 236.426 411.802 cv
236.426 411.802 244.64 417.901 246.313 422.7 cv
247.986 427.499 248.615 431.56 248.615 431.56 cv
248.615 431.56 235.255 443.228 217.83 443.228 cv
200.405 443.228 192.485 437.585 192.485 437.585 cv
cp
.0682689 .537316 .521691 0 cmyk
f
238.452 404.791 mo
238.253 404.791 238.049 404.76 237.85 404.694 cv
236.829 404.361 236.27 403.264 236.603 402.242 cv
237.247 400.263 239.14 392.644 239.543 385.609 cv
240.111 375.684 240.7 365.421 234.434 358.526 cv
229.345 352.924 221.81 351.526 216.385 351.339 cv
215.215 351.341 li
209.856 351.526 202.322 352.923 197.231 358.526 cv
190.968 365.42 191.527 375.226 192.122 385.608 cv
192.524 392.655 194.419 400.266 195.064 402.242 cv
195.396 403.263 194.839 404.361 193.818 404.694 cv
192.787 405.026 191.698 404.469 191.365 403.448 cv
190.678 401.345 188.663 393.263 188.237 385.831 cv
187.625 375.104 186.991 364.012 194.352 355.91 cv
200.355 349.303 208.975 347.664 215.148 347.452 cv
216.452 347.45 li
222.691 347.664 231.311 349.303 237.312 355.909 cv
244.677 364.014 244.041 375.105 243.427 385.831 cv
243.011 393.106 241.107 400.975 240.301 403.447 cv
240.034 404.269 239.273 404.791 238.452 404.791 cv
cp
1 .55761 .36051 .10901 cmyk
f
198.149 383.391 mo
197.223 383.391 196.404 382.73 196.235 381.788 cv
195.962 380.259 195.822 378.705 195.819 377.17 cv
195.816 376.038 195.886 374.899 196.027 373.783 cv
196.162 372.717 197.129 371.958 198.202 372.098 cv
199.267 372.233 200.022 373.207 199.887 374.273 cv
199.767 375.222 199.706 376.194 199.709 377.161 cv
199.712 378.471 199.831 379.797 200.065 381.104 cv
200.253 382.161 199.55 383.172 198.492 383.361 cv
198.377 383.382 198.261 383.391 198.149 383.391 cv
cp
f
215.829 402.972 mo
215.619 402.972 li
203.812 402.718 197.501 389.866 196.285 381.824 cv
196.249 381.545 li
196.164 380.911 196.006 379.732 195.963 378.281 cv
195.931 377.207 196.776 376.311 197.849 376.279 cv
198.915 376.246 199.82 377.092 199.851 378.167 cv
199.889 379.415 200.024 380.424 200.104 381.027 cv
200.139 381.287 li
201.159 388.033 206.282 398.88 215.661 399.082 cv
216.037 399.081 li
224.913 398.89 230.445 388.539 231.524 381.249 cv
232.01 378.152 232.597 370.573 227.617 366.73 cv
225.792 365.312 223.362 364.53 220.588 364.465 cv
219.514 364.44 218.664 363.549 218.689 362.475 cv
218.714 361.416 219.579 360.575 220.632 360.575 cv
220.649 360.575 220.664 360.575 220.679 360.576 cv
224.292 360.66 227.515 361.725 229.998 363.654 cv
234.659 367.25 236.618 373.878 235.37 381.835 cv
234.182 389.862 227.89 402.717 216.078 402.971 cv
215.829 402.972 li
cp
f
198.082 380.17 mo
198.018 380.17 197.954 380.17 197.892 380.169 cv
196.817 380.161 195.953 379.283 195.962 378.209 cv
195.971 377.139 196.84 376.279 197.907 376.279 cv
197.962 376.272 198.025 376.279 198.085 376.279 cv
200.969 376.279 206.397 375.677 211.496 371.812 cv
217.287 367.422 219.064 361.444 219.558 359.078 cv
219.777 358.027 220.812 357.354 221.86 357.572 cv
222.912 357.792 223.587 358.823 223.366 359.874 cv
222.781 362.669 220.684 369.729 213.845 374.912 cv
207.846 379.461 201.469 380.17 198.082 380.17 cv
cp
f
185.336 430.702 mo
194.03 437.532 204.864 441.283 215.962 441.283 cv
227.053 441.283 237.884 437.532 246.579 430.701 cv
245.161 418.656 234.917 411.702 229.539 410.25 cv
229.311 414.068 227.317 417.212 225.504 419.314 cv
222.596 422.689 218.382 425.332 215.912 425.332 cv
212.207 425.332 202.978 418.829 202.3 410.488 cv
191.888 413.459 186.315 422.616 185.336 430.702 cv
cp
215.962 445.173 mo
203.621 445.173 191.584 440.873 182.064 433.064 cv
181.575 432.662 181.312 432.047 181.359 431.415 cv
182.303 418.768 191.602 408.362 203.972 406.109 cv
204.594 406 205.224 406.19 205.674 406.627 cv
206.125 407.064 206.337 407.693 206.244 408.313 cv
206.182 408.718 206.151 409.124 206.151 409.519 cv
206.151 416.264 214.345 421.417 215.914 421.442 cv
216.73 421.427 220.014 419.78 222.661 416.654 cv
224.275 414.747 226.092 411.751 225.58 408.31 cv
225.498 407.762 225.655 407.205 226.009 406.779 cv
226.363 406.353 226.883 406.098 227.436 406.079 cv
233.551 405.827 249.287 414.474 250.555 431.415 cv
250.603 432.047 250.339 432.662 249.85 433.064 cv
240.329 440.873 228.294 445.173 215.962 445.173 cv
cp
f
195.157 580.021 mo
195.157 580.021 201.37 568.674 213.667 564.426 cv
225.965 560.178 237.574 561.944 237.574 561.944 cv
237.574 561.944 247.717 568.272 247.717 580.021 cv
247.717 591.769 243.362 595.311 243.362 595.311 cv
225.783 585.351 li
227.02 594.803 li
227.02 594.803 206.117 596.154 195.157 580.021 cv
cp
.0752575 .211215 1 0 cmyk
f
187.408 609.528 mo
186.496 609.528 185.683 608.885 185.5 607.957 cv
185.468 607.799 185.429 607.73 184.721 607.233 cv
183.44 606.331 181.504 604.969 180.504 600.813 cv
178.967 594.429 180.662 591.715 182.353 590.562 cv
183.993 589.448 186.193 589.525 187.953 590.758 cv
188.833 591.374 189.047 592.587 188.43 593.467 cv
187.815 594.349 186.601 594.56 185.722 593.945 cv
185.371 593.699 184.873 593.553 184.543 593.778 cv
183.991 594.154 183.315 595.868 184.285 599.902 cv
184.943 602.632 185.921 603.321 186.959 604.05 cv
187.81 604.65 188.977 605.47 189.318 607.209 cv
189.524 608.263 188.838 609.285 187.783 609.492 cv
187.657 609.517 187.531 609.528 187.408 609.528 cv
cp
1 .55761 .36051 .10901 cmyk
f
244.505 609.528 mo
244.382 609.528 244.256 609.517 244.13 609.492 cv
243.075 609.285 242.388 608.263 242.595 607.209 cv
242.935 605.47 244.102 604.65 244.953 604.05 cv
245.991 603.321 246.97 602.632 247.628 599.902 cv
248.597 595.868 247.921 594.154 247.369 593.778 cv
247.038 593.552 246.54 593.699 246.19 593.945 cv
245.315 594.56 244.101 594.349 243.482 593.467 cv
242.865 592.587 243.079 591.374 243.959 590.758 cv
245.721 589.525 247.921 589.448 249.559 590.562 cv
251.251 591.715 252.945 594.429 251.409 600.813 cv
250.409 604.969 248.473 606.331 247.192 607.233 cv
246.484 607.73 246.444 607.799 246.412 607.957 cv
246.23 608.885 245.417 609.528 244.505 609.528 cv
cp
f
215.959 640.716 mo
201.17 640.716 188.354 626.903 185.49 607.872 cv
185.33 606.81 186.061 605.819 187.123 605.66 cv
188.175 605.49 189.176 606.23 189.337 607.293 cv
191.913 624.405 203.109 636.825 215.959 636.825 cv
228.808 636.825 240.004 624.405 242.579 607.293 cv
242.741 606.23 243.737 605.491 244.794 605.66 cv
245.856 605.819 246.587 606.81 246.427 607.872 cv
243.563 626.903 230.749 640.716 215.959 640.716 cv
cp
f
195.156 578.075 mo
195.775 578.075 196.357 578.369 196.723 578.869 cv
199.752 582.988 203.703 586.432 208.15 588.828 cv
214.049 592.006 219.796 592.886 224.199 592.935 cv
223.925 592.049 223.717 591.145 223.576 590.228 cv
223.255 588.163 223.273 586.072 223.632 584.015 cv
223.754 583.312 224.251 582.733 224.927 582.505 cv
225.602 582.277 226.346 582.438 226.871 582.922 cv
229.092 584.982 231.512 586.858 234.062 588.499 cv
236.751 590.229 239.61 591.712 242.576 592.918 cv
243.566 591.239 244.336 589.451 244.873 587.586 cv
245.892 584.041 246.044 580.209 245.312 576.504 cv
245.312 576.504 li
245.31 576.504 245.134 575.759 244.664 574.566 cv
244.329 573.705 243.409 571.531 241.917 569.347 cv
239.599 565.957 236.593 563.599 233.94 561.518 cv
231.355 559.493 228.582 557.626 225.696 555.971 cv
225.649 555.945 225.605 555.917 225.561 555.886 cv
224.48 555.143 222.998 553.798 222.079 551.605 cv
221.777 550.884 221.564 550.121 221.442 549.343 cv
220.951 549.683 220.459 550.104 219.997 550.624 cv
219.217 551.501 218.622 552.567 218.274 553.705 cv
218.123 554.2 217.78 554.615 217.322 554.858 cv
216.865 555.098 216.329 555.147 215.833 554.994 cv
214.233 554.494 212.583 554.105 210.928 553.84 cv
210.151 553.715 209.367 553.616 208.58 553.543 cv
208.954 556.602 li
209.067 557.528 208.508 558.405 207.619 558.691 cv
203.338 560.068 199.46 562.199 196.094 565.027 cv
192.839 567.763 187.92 571.898 186.604 578.726 cv
185.698 583.422 186.795 587.626 188.186 590.733 cv
188.584 589.129 189.093 587.553 189.711 586.016 cv
190.714 583.52 192.011 581.128 193.562 578.906 cv
193.921 578.392 194.506 578.083 195.134 578.075 cv
195.141 578.075 195.149 578.075 195.156 578.075 cv
cp
189.214 598.305 mo
188.605 598.305 188.018 598.019 187.646 597.511 cv
185.591 594.713 181.007 587.211 182.783 577.989 cv
184.361 569.807 190.14 564.951 193.591 562.049 cv
196.94 559.235 200.738 557.041 204.901 555.513 cv
204.434 551.699 li
204.364 551.137 204.543 550.572 204.925 550.153 cv
205.306 549.734 205.887 549.509 206.419 549.517 cv
208.131 549.565 209.856 549.727 211.545 549.998 cv
212.789 550.199 214.032 550.461 215.257 550.782 cv
215.743 549.787 216.362 548.858 217.09 548.038 cv
219.027 545.861 221.309 544.866 222.88 544.416 cv
223.538 544.227 224.234 544.395 224.734 544.854 cv
225.232 545.313 225.456 545.999 225.325 546.664 cv
225.193 547.328 225.062 548.657 225.667 550.101 cv
226.229 551.441 227.161 552.254 227.705 552.64 cv
230.726 554.376 233.632 556.333 236.341 558.457 cv
239.072 560.6 242.472 563.266 245.129 567.152 cv
246.847 569.666 247.903 572.165 248.277 573.123 cv
248.88 574.654 249.096 575.604 249.119 575.708 cv
249.98 580.058 249.802 584.524 248.611 588.662 cv
247.819 591.413 246.594 594.018 244.97 596.405 cv
244.465 597.146 243.523 597.444 242.684 597.134 cv
238.932 595.739 235.323 593.935 231.957 591.771 cv
230.345 590.733 228.781 589.609 227.281 588.408 cv
227.31 588.816 227.357 589.225 227.421 589.632 cv
227.652 591.131 228.106 592.584 228.77 593.955 cv
229.053 594.537 229.027 595.223 228.7 595.782 cv
228.375 596.341 227.793 596.702 227.147 596.745 cv
222.052 597.074 214.313 596.566 206.305 592.253 cv
202.165 590.023 198.415 586.979 195.327 583.365 cv
194.559 584.685 193.887 586.058 193.321 587.468 cv
192.156 590.36 191.427 593.409 191.152 596.531 cv
191.081 597.337 190.518 598.015 189.739 598.233 cv
189.565 598.282 189.389 598.305 189.214 598.305 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 20.1.0
%%For: ( ) ()
%%Title: (i1979-01.eps)
%%CreationDate: 8/25/2016 3:49 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj26BpGi)`^9;=d6QA#rLqPHl8nV':"9HJQ'LU;6,b%r,EF/Q-qfA('mcomqAnEa?0?sR>8T!Y?g$;W#rr$*&hlPCtkIK/N
%lP\O'XQc1VBAf,C=Yo^-rceDAMqUJL*GCa]IESCo>1PB%+$3#dTk@*W19bPf<TuHZAoGH5WeB2G^/])o]'Gd^cZ1hJ><[g<b*`cK
%^#&TAPH1$#Qd@,4[SKN'H<=p))Wb;Fa_Cr8:T3m>0(a_rn28&<PO/R)%`;T`<X3,EoDA@>&$OJC!M$P\c#d69@G/BTR.s#"I+s2g
%^?'.!Q!*s*&>%Lb]hZ+>CGe=0j%."p__WBhm4s.kErcU*^ErY/;[C^lrHaNkP_iV\bMI7DLKM[b[1Ui`?8*IDf&8:^a7"Q8g;&2R
%3rU3[]D;kA)]:GAnN?^G"e<Kg#*,"SD"uWo*V:iq+Cp<E8HeIgg5U.9ZC?;qZ.i..B\1G@O>t//]rXMZCu*B_ctWhWG(a.u:55p0
%OaVK9kuPe[9Xt/Z7u6@Ao2GFZ(B1k9GnH@C@7ROrd-2S%rW`)C2,29hSsT+Dh\@4So]orKD6qdqoGiJY]Wo)NC066TnK=ZSR5dd3
%)Z:F'NlmpaYQlr2WqUL?f/'!F5C;4)m$*!SaQ0q"A?R"3O';!c\SJ'NAUQr?&[AElOp9\H)e@]P`n0")iQu\LQdGt(#[S,'j'Xj2
%S-6+/^CLCMf;Y=mRd7P'A_'!$&[Lr>;ldp4!G';sni%&MoopP*reP\!'mdQt.1ssePPhR-Am0BP:s<s%d;PO5b;H)iiR*^AlcOc8
%2%/MP):iMJ#&MjtRG?+pfS'iELG[Juhi<?(I33t%o+Gf,pt%@m;d_g3J+KS7&p<AT+NPo/`cmGqbo?tX3DQP!#PEL]j87KKLO[h0
%pT^.T@l&Ld^Tgp*O3R6@m$c8\-i#m5.@'DO;TWpWH`;Z-8gWoDMrl>WMKhnq'YDN69bY+u+)H[ViGWOeGY)`I1IMS"@iIfCIhV75
%*8DG%_Vb+uOi$!8'GHC[7\oN4iJoQ&N-O<_9N,6u2FH!`2mt0#&12UX(=/4W=u*)H2g8j")$+&-YE%eD`QPBH:&#eg6QGVT%`KC/
%R.Fs"j7!416QG2_1MO?TieYA>*?rRPJA9(_&VRp()<-IeGr(joR(0d1S5\t[/REI\gcAacdiOu5nK_rgHU`N$cV*;dH#1$.gdM.Z
%2Me$e;+-MW1ZnTiieY@S)=ooKaE6Cdp`%s1K$[eD\We?d+4%cn0%jA_NT<0)4L5GPKbP01[nM3V+4HfoB&_4tji0jhGkouccHjE"
%!;nkW'8pKhA^9GOB*.T7-2PZ`*(rNjJaQE^@l]akMWK@K?-5FVM:=]N-7Sc\DG+0R]7Fa\jJ;2u8`XpRP3'nM0R)'pIVEI9aKG#*
%rb!)G;>cd\=Vec5s7/D<DVGSWs7/D+jnJ:Pro\S)hXdJp4n102pnRU;s3'O!IJfH362*]s61J=]="Nq>pb2ZrU45MUiu[2uhHt^b
%hsk'ldBN2->q2)#W]0j8)[,IUiTl("Ifn$j"#'0!U0B#\F;#ghj]SF3J_Lk!c+FSe"n3V[?=Il(^NiDnhh#J1V_K_U#;JjT`"D/(
%^aUk#C`d;ef/,.pa4DYG)JIndd!;!Da!";:Hp82&qH'-h>+R\^jss"_+e$GCO`\slb;gKb>XBuUDOmcb(1CaB>n/HJ-tkM6LU3I)
%3.YR)3!SBM:Tq!4Ti=?6g:h9r6Im.$ZlKV=%6U"\'=90T7S,.uO8u*I4sB"XhuUD8dEH'N!bYg:Fm6*UUk6-uV35&%M[$8u%VU#)
%d"E,nG2O-]G/P;+S,*l$)3n+,n*n38Q\Jp$..68d"%jj`Xd:h\0*bEZ%SE$-+SN6W!':W36o1<A0N/Bq9$I)Obq:\/),pA^Fr34@
%h_U`/bQ0;c)5j9Y[f[lYOs7a:-#A=\EBe.*nT.e0p$aVSSJ^$il4`muXpTQD7<^QjZ-G)TVTk=_Yh6W''S:r(j'Ip[6,rsc!5"Ro
%qJ[bU*jLCMZnd))&gtaP5,)q$!`id3EHj(]=;rRaMu0Xj^O*WO!+[WfnoR]I]'U@hZr,m!+WYO^:aT$Tn3-W\50q6l'Q]2c\[b+\
%`L?MWilSDdd+ksY..BU9%P.YL//A`^J3;m1n>"IE&or[<i(B\)O,l(@V0Qkm?+7mJFpmfN_!Rq4.ETQ0+6*oQduZ[?M6Ql]=h#Y^
%%rqbK#A=dD-,i*WMl^[Op<^+`Q6B7U\Lu_kqP5B\LDE[]ONT;rc&"<V+jZ&[&;:28&?$1oWcX0'FTo%1&l?t7MED0G-<FZRnK]L/
%%rhYK*adVU=Ej8<5srX1!,1>bhIS^_@3[RJ]f!%r2AOl,BN$$;/QcK>4lUUS/O7Kgi8/c>2f95$j[i&)6"m1[09K!M(\a@eQ<;UG
%,smTL\=''9Io<(j-[dTq^tA5Wndm@/ncqUM-UQshfqiDGMmQUoMLc`F0S75>W+V6;DBV9%F)uopk4;tX8_`=:4#UPr9,gE(]0c4Q
%(JlR_G/0i?$iEj.'aP)%mBNWVEBtqfSL/o=/TGk,+&^s8F+24ajpSC5Tbr#<r/I"<=ErgqM761l4_/`FM!>'(o0>u#cbS-XW][nS
%Zhl%-&$r%Ppnbd7Fha/bJ-JHAQ>g/,Rg-`3kH`FMZV.PuloWJ[TfCJJ`8O1B*&C]TR,'"B?(@.!LNV_7^s9R#)u(oN?m#m0@3rp^
%/nV8:bQVlhJ^k:;AW/W!:"tl!bCOY3o3U9>b\]2`DB>bE\q07l>pjK)k.iIa/3\3qJI=eL;#c^(1Dojg+:)c#1Pt+A0k'GWV$['[
%B]^?7EH=%70d9*mQQBgkAfKrq8Yn!u%<j##%F:nW0mHS>14V#,@c4L2s0W4k.m%U!mH'7O%gSD9AW>"T=!/MRIT3\dH#A5`[ghBu
%r#8jJ%h/Wd%b*@-&U=]7-n(4ok'&epi!l1/Q]3H[q4_^1=tZF+quCqEY]+DSI;(f`qfIIF2mF+^3d++t5h-rS?\2!l"$r^l[iin>
%;;f_`Ugb/T"!RTq'&!"&C)"9e!U;:?0QN)JQBNe](GEa1k]pu87^9bKf/-X^$"E1/qgA=(3Z-gbhg$c0.lM$g=-?UTOT5hu#LZbp
%?&@'boG[k;-,^dRLC'IX3tH\!DQ1g\KS26Vd^MNIOA7LX1P#FY:<;8\TC'aoKO+X'M*;\91i+@i'7t;@hOD1XOu[dm:gB)4m3!kN
%`3d>+)U&=KIM([(@SIN_Z-d[qLW,>A!">O\<2A[\V]##[XO/mu^5ciYq/mBQ<)e[@_KA7-^^6QQ'MGEVE'&p2b]q=`mb-qF&J[kl
%EW`;ad@T$!E".W^CgF-G5`q!o5*uaJ$u-br>C;Dp_R!4t'6KVo9u+NNE?)/R]ct'C-Nka7j!7YoY6H"Yo`&UpfKnd<S%$UR+d-nu
%hd_h>P:d(($c%VmfL4/X_SSC^X$!HMJ>eN5kNL"866chJ,5WuO8q$c@0Ei!69$lEeG?t!N[d\-1K?)!"KbSqoA6s^<)+jZI_A9JT
%2/V:RgMtk]YVm6#f_ue0&9=7:<LR<k,..j>9)W(RW*X"q;FV?Ug*)TpGSE#<W?`94Q7>!<1fE[UbL](?Q6blei@ROhX"B'9W#<S'
%b`f!.BU'jI;6Zm$EjJ0fJNC%?1+dZP/Q13"SC4.WmO,#0E^OolH0fea<QT-6oIU]E*[JuQqVuUYgL1A]R5jUWd`%)!n7-p2Bb/]W
%lq>bLX<\7<4'TqSOc*%''W2j+"=58orY4SsW`+-[34R%8Yk%;d3Nglpd2'iT+rr<<-//)ujMd9"7(apc!LRRm8!3LL0MWZ-&.^JV
%3F>$$ZPYZ")$R`Z[/>iV8gZ>A_AA7KcTr)RhT-8:-Y!m7s/;oXq&RtuZ2&"'#H/TO3SYCLo3G<.Fs)5N>8a4C&!IR`mNi_mR[+A8
%KaUSAJk"AR_O6Y:>foU;`6L&V'Bg0/eiB/;0QPTYQMs$eMD&RCEFmaXEFiY!IZ,DQM4uRLN'+/6,g?FkD%Z1C9Q<6+aZ6E@*j1JG
%3_>hQ"G&(NLt2rhLpdli*W0#@ke9qd3cUrF&_A#gD35VCUg(W]c%-E2V+FW2SnHpaYr/=i+n?iX-0n3!+X`##TeR8$iu=Jr_+.9q
%joo;f#4WD]2i'(PD3H=r4^_<WS;Tk11hE*d#(bt<9sF"X4+g.4$B%Rni"'ar08"_$D1IOp3>6L89q\_)M-qH6I4LS>?lO@Na=s*3
%.iEZQjrl07Z$(q>*+a\KR@2$Ve_!lEQJFm7`B8LHi!KuI%]uQ[9p$_Ce\H>sUj0Z,XQ"f/GaWJ-n?fbG*JX!+>4pIWpb[FeT,i["
%Ieu&fjs@gblP=T@2=\WX\,X/(cb,J?H65=uhJ)Z;gWd(UDuX#KWia`(o.I-:>+OC)@5YB8q@2:4B9oJS,'26_='uG]+194VC[L4<
%".&66:71!9TeF*EJ(+$CKP.D^,9DB/`TE5chJ+PCF1X7RmaoY,E[O3r6j)l,I_[=BTMmru2@Os$;iMZ<\nrPtNC%Id`kSC%nkkjT
%G&#8P6P-?Sl2B<#>iLLgl[:6JBm$`??fAL,%kkh,j^N1&!W=C@G'j0oGZ`[Lq]*XjQRfiU[<`kMjBM;'XVu?m/"PC..WkF.]o,Re
%*]C(TLm\)uhC./AL8>dXn7Udg<NgNad<I-O*tYSTlJ^^JDD+]&:\cd(FP\IU05?bGY1)iGA<'iqH8PJ[c_Hc+T@$0]1F61M@AgZf
%AGTQ%<AYP_0^//=cP4\@obo_%HoOd***.kN_raL='[7l<dkqM)o^P+<oPpu?<'0H3)f>E=7e06C;QSG7Oc3,&f=!^;ZOD_*Vfk*j
%g2X=AC/*&5RDXKU(WHO0C:(5W0lqS:DMKM/ZK5LWUjW<q<OJE6CLcb3Y47:&n",0KlX<N@j61Vt*T"Keh0IhVL@i&RX'k$j\asmd
%7iRkm^DcblI(0BF!D:7AJ2UYdL-__9*c+ccW7@r>YXpF*bi<OoC=.h3X7m:TL(BVm9tS01H$fmM2U@SHI['/HdHVpWSR;"YZtksH
%g^I4+)m2pn3e&?oVSG[.RhRVl;#)UF)LkI?$9qI^n8iUu"PY:i]mWaAdDr"[X/<Z9)bg[-(:j'0(%umBc:E.Va_M7E'!56aTe^IG
%Z.JH7p;*6"K]B&L]uH3])LQ!"NCTfYG5Lqh8mXEG'KX6Y>akW2?DUa&&Z4Mi[IM0LAQH.XUNKc.L8@Z?]ar>T7VrXBT+l=jemY`d
%0&(UR]@7<`qU97cU30(>1C=6_3Xj"Yam`u6dSL^.rB<ncM[iti:*k;5JS5BXf1]]<RZh6lOUG-MBXL3"Au%[<DE?T7][e(!*0V=O
%9O(mP#4#/dQ9nhoBbf^1N*jB\6?ngL=G1]nLs@3/RjJh]-'Y_OU"o[-;!tD`#1($_\lJ&KK"7Sr9KJP6+c8&mbb`Aq/Rl7Z/@UGs
%(9uX=Q<V:J=+_T1^1+WPkfcRK[q<iM1m\]/l&Y"JiK(3lGYtWPrqrr1k[lR+@FJ"<mMm)C'X9s5="T(iC@nU'<*lHUHr>3[f))3n
%e\;OO-Kt[r0DE*7>.L%?NSS^Rbph;IRRXD\-`GYGi/gF/=!srtdtu,pCTl=B=Z>\Q,7QF[l[+<>9M0RN?"'hsX3`*irk''g[j:=a
%c[)&8TP-85SkDpJd-Z&&b*DJ#;GN!DUA7,%r$sV.b^Zf\8oA5qI@J+:7\oqSE[TaZG'i=_)Q^)bR2CBVH3B.U[9LoF7L7">Ai/FJ
%_oI>QIPa`Z8t5X$Gg/d7`nr5lpj;!a`dXu>m-UUlE38!R1(K#:mKgR9-CpaXL1fdGkhI0_gb<;\P;@dSB!kd"H#@fJ0l7gOKito*
%jij]nJW6PZft:!'+.!WTO#6_f.Z'A)_4'e?0[nrf:0R&1cQRSE;sR^G_Hn-kB$*<o^ic&kgK:ZPkRdn)j7og65Adk%-CN_[.$@/>
%k\f$5&!<#2l0Y8_[/&L<>@#4Bb%FT51DCjXSuR2)'Y$h`=u-nC9mKVmfKREd>4l,J%0'(B:q*sD0b=":oPBCXhOS\pek\XFfl47%
%k.FZ)<GV@mD0$J(VV%9(3Km1TAH-WijK86IX\S`pT5U+6853M011+d4TtI7%H-Ofd^bcj;(<Ysp6kAlc90*;=lSQS+bO!=E"E%r/
%Q@R;#($loHN).Dq;_RHN*6)-Dob>rt1O-An`==Kfp0W0UIqg9F<Xd<55G2C`D2?>BBs/mXpg1i;'q6u]`>,:"fP5"lB,Y<Xri"j"
%`<f`IU>0R>ou""/?Rh6$5j_118`:J]3*a'UITO-Tf\.$Sh0-J:$1UZ%G0B9@1c^ON%%#tPD'gGI/L1;=>^<:r?B.OC?D_`%AAbCt
%Lf85,;rlG?a%$$JO&;FCNm$Hoi8*^``,t=S<-p@edZNZIktF;0,=NeeG,.;*1@tL4S[4R"88%RkB5&i=lBBuL'I'BH'M\Rq&/^>[
%5l4+rfa5cS9n?ZZ>/P:<97pEtFAc3u>KnuQ<@[r:s-e#t"B%kP8YK.es&o=]asTpKb[.iD;JC0p.5l$USQ6tpZCkfn_P:FQL?0-$
%*%L&rA[dr%>$Yi'.AZ;E]N.bu:b-E@0f2d]\#hL'D/4`sD2PGT%F7t`ZD-/C,E$TKejuW^=)VjXF7<SG2/c?K1)0gnAY(AKdNC=r
%l&.tVau&3m;fUC<bPF>$U83'nf*mt>/A<oZ2JZ1<aO[G[Sf+_#8`<ju81i!a)65Oq[4%;cW^TL3bb>ka;2auqXNdITA]eJQ0a/us
%=c8G8,>PqOSYoYU1s!mu7m61G.&loLg8/:cCJcSQ</ZnDR9>[Ks72Cd(2IY_mH"ea`[(;![ND*-WkrPV'=7GONS3!@>@#2n="m_%
%0+>9b$M6HGPQ*U01lM&X9u_*PT(FgW&')EOVuB@hZ/4gr1CLm>'><NZoNDS7/G.X_Y:]D#9^&ln#9XCuD;hWlZW[a!8JbQIU"+%X
%eJ?Ha_HC)V[=qYN(TjR+#b=ZII!aR<P(Ei:p.0A(%KI;SFE90W(LiV\":HqfLf&b:Cb9.p.,\U2%oUsI.;^HoOb%Q*YPf3epZpq5
%-i`^R^kj2@phlc>7-]Gbf#[$$bhBs=C<^L<<bm`pilsko=$%u-$E5(WTX:7(C?(Q#ih81r;-Q/Ik'#+?_hZZ^g\<apnL2Z3_d)gj
%Nt@_1Vn(U.P>EU4,oM-Kcn`0A^U4LJCqsi]])a!aDWb3Ej<B\T4Rm":>bh,kU;C7KkYA!=2q8_(cV+q#3ct?SQLRcBG"fO;O'LUm
%E7?W^a'mGH8\W_g\%3-^me'*7WILnn-E.:A'"aR]!\':\Q_Q<Jl=OG!M7K0+E(D3!QP5UG2#Aul>V(GY2;S-`WZ3O?K/kHnC?hp2
%\Pqg"1r<Q;9/;-#13E^U;`=34*kjTM7WK7T,&Xp"Mjo0RRsp:ehci2BrJr&B[lFDY<jfP!s';/p0$\q_kJ&rDCC\[?kOQeY(?`G2
%GQ(7l,G"lSg."\1EcL5'V&>IG:M_W.Hl$G0M_j60gWU?IZZ^NCmtUX=':bA#)BQN=@q$KF>/<3mq4RIMlUbOX1T]24Iu[%$?9>pc
%6%cQP5#sKDG(Ue^ju&r2jo*IB"Aih,/_PNoFl0Q1=s;aDA<]u%2"*BA()aF2aH35rm>EgS:t-7pZ:15Ks)a]G:;6@DNm_J)d;PP!
%_Q^QO?=LDF[]=T.gA"N\e\g65-`h3m3p#MFF6uEqC_Dfa8Wh7+lgQN<^.E$#1#:ca^o@6UXjQTsqL6/3=ct?aS>Iab-kW_:?IM;X
%;[OLXlj3?&-J9H)d2_<joL8=ZWfmtLG$"c8[rZ=D#:=P7R=a`-ju5iL?L9Mu@O5&Zr2U8=dZ"fs].=RJMo<d_nZk]u/.sUo`60@p
%Z:MWe[8`N*iP^Yq_GL5COa*;R#]u2R\OkdlEdlI7eG2d4!pNMa4>WNo\krl#obiTHIGVp?gn_XVPgLa6dqh6b,0^2kVYsp:Bcbd.
%GhBrVi%XO/S!^['^6mZQ9r+s0S::?;YP%V4[?::YKlNVlKf8><EUb<OkqJ.hn0Fn'H>6k)B-Poq+ksMO!n2N[Ja!C9\p4)"ios+"
%@ae`^jRAmKD>h$?P+)D$%k3sN>PT_>XgP[(5;b(0b[5!YnO8Sj;-G>E?h)b/==Xgj.DBYa)GR\c9YL.7SXjo@*_JdIXJSt=ZR59j
%K]E*O(uV%QmX,3@e$_'AGRQ>hS$IjsAg'Li:$qq)%_W.s<=VG,-Y;gi.h+OheuG^lcpYK;+g\'#.?I-]%o1Il9SZ"SLN%kE@%>8>
%4D];*a-a\6^ff_QAgjOEq)jBj#C27b3%XV;;]FuHR`mGU(lLMr[-c']O0Qc9bX`cW,ICc;<C,%W5+@?&m&X-goZHjYX]h/KB'qUD
%0[]A'6)jDs=7])iM%ghj\U(DQZesC;:Ag7>m^1\m;FkNT'G%N1/U,*1-iDg3S!>g-c9V7uiRVfcp1h:`W8qh?h1=sRC@tR'Q=rG+
%U:#6_F(>gu%iUmE+a"_%Z$=R@:t-9,)7giqk3tAuWD*+jVq">5$E;^S0U^*3-I'^9PHlXOS>t15'48.F4!(kpoXN"QK5N40F4BZK
%p?Q*&B/;!(apXd6.!>(,P;N/H9NYJ:HHBrb-r#oRR'2+F<9VOs_,hOSVS(\7%1:QklkQ#RP>Sg3(C(:gG+d2$kEaBHE<7=@8%JC/
%of+apMUrWSpj\ckT;6rtj0;iM'sWSWIPjHMBPnF,/Y]dE1q/;'ro7ZEKt"IGk2mhUS&=g$3K*&u4==SBj1,k+/],%e34B1V(?+$m
%S6LYfKCP!c?f>6>FCleg>LVaXTM('YoS7P/X]G,-;bggO(@g0B`,kPDbn;JbKZ+$2-6K%\]Ke\+?NW7Yc]qTp+*6sWM&C]D_uu3l
%+6E1Q4<S,halkdqX8J7Kl_jDrj`2T`TN8[0WV(_CVofs%HU$h1ZIGW)V"cS(2p9O+*2USd<lCqiN&QquP]e:Kh<N3iHLmal^h;rI
%4(k_0K.]=41-]-WD77240?)C)`7Hp0>>=rXmkdnY@#ml6>j?7#3inQE\N,MtPJZV2Mc?&;lf.6Uf<2Gg.WU.^-A>faHC8ZcF&oGs
%Bt#\IHkF0n.l:.RNU+g@V=\+g46I,8EDeoF.'1=uPj)VQmDM\KR6mI/s/n6UWQkU@QBT1@Pk5*Ma`C\S;kZZE_G7\kjji*j#Ut<F
%@0C5kRp1+A$dW44](SU#A32U(6&HdO,(>.]l"ZQAiKqFFbLIC.C:BYjN=_&\/=`Gg;fmpmdD@:-cPLUMA9auBU)SQpqNTae\P)#@
%@\*)^ZeMR0@DpqK].Z[^;)\Rr9o?V^3$Xc(AE7c_,*E.c;7-]:*3ADE@FSe7&ic8B<k\*'hcfHtH5DPpeJC!bP`8A/TUpW0=KhDk
%bI*HUjMElOYsOq'j-[j%09"q5m)-1La7O[m@2EQ#elp_GH*E:7QpG&+g#04u4h%3IB4jGHFVQ^S&Td^UTDA=anZe-JRE78IH2Pss
%`H,Y57pS6EBJNfA.)U!QSng"n3aC!EikJp*,05"Fl"(c.PRV7kcVM7%H4IX#f9E)UFC\HkF`ssP[HU^*oAq";lQ\T2s$kchASC4u
%Og-eT&'7pHiN>rS;_i5Db;9fQp3tD;fL\^8$pS:^#(FhHZeF27f)698R=R^<4A%l7Nc+73e8oV+1';kZodW7'o2Wgekte?!Q/X^\
%X@^g`44Nk4=HV4lT7rh6XY[fka0b5QYC)dNG@r*]Bk1,3?P(*Cd\\*"XXC2E9)WA`?maFF4>C!ic"NMjB=$b/2OcOml1;+&EYC#7
%Tb%I4"<Vd/c0e`'Dc2rhT"g[p1\FMsggr]fI(<f8&g*(_A3K0Gl=8K7:rup<Y:h)iJ'+sQ'$K#YZ+QnJh!dsumK_LXG#E-WUG"tY
%R#Rc&f<+1!N'bi-=qgC1G[>0cTD\Dtf5:B.j3RGbIJCKGhdccr$EC5W0U(hp],-mkEjL-7Fu"E8.]dXFLDg(J?`r!rkA2h?e"]sE
%rYU+Y.i1Q:I_;2mM?O"nalV:ZC*V;b(lVYWZ7$_KXGj;roRm/]>VGa,0Aks=JkkbG*sg^,EI?;QrRmuj.$I;rJ/ue*eNO)u]ETu3
%OZfd'g@[.7Uh08hQ`P5Es5'(SEWEk[[VM;.Q%9a[k?&e<Y^G'S!2lo6BSH]cAp)Q[C`?^u]']:b_RBBdqZ)D6Ki@Giik(QHl5RP<
%"S-)H1S6jHRHe_[i;lOVbZoi*;NWqZZ-(?U&kG<24O*TCos!$U)7f]E_T(%uf0ps$hf2>;TkhC0^^K&j29cbL?2AXC,BS8Q8fRs+
%&<6F6,=Re<r:[o($N/uEogH.CD"DgXd):ZE7@K_D6XBe15T_'HCn.s!37Ru+C5DuTW#<OJ$a!%9!?jn*g]L<^J+?\COIu#Z_WCka
%0o/1\*c55VEF`I+eM.$N/>MRIrKD$aq#-DQ#L2\YO)h/11"M.JA,K_N:`QU7Rs[<hUhW5,RtaQ.<ol(Vq`H'+M/9aa'aUD^ReW.V
%j%E+?/b$tmfR$?FUd.mrra.G"^F.13Y1!94FJPjD(+>GYUtP!h1W%D%_YT>cC'!'a#K%dXQ%$3oC.s3T]2]VPn!;?36Q6AQR%@6+
%L"mZ.YE8V2l^9D'm[jA;"oLLcR_2k.<TZf2qjs/I9]+)W4p]@)CX>iN"i.JXjXYj/O!)BRg0!E6I2t!n,5spe.6u/&\irNtj00J,
%Gg1#k'!0Z+:"Q\*C&2<O)dA7qbP4(DLk4j5[9D2@F5#o1S$<Wup%CGSoC;WQ>0PMl;r^`:WoOjJIF[h/\.i?8VICR*YZIuZYOrtg
%`rFYK\Q]dTP>jZBZmLlO=GA3S&8_63Ei4-8.X.m1H=2-?aIIIkBX+"jK4%p81NK9bXkTkBHXR,K.uH#LCWEkXHh>[2VA$qg,6kku
%63,j,pL"T8IQQr$V_N22[N0piT4sYH@40O+2>[!Ui%sMdX+Ljp&o>q4;t>+BK,:+fVHO_Sq`@JEGQj)3D.?3'#tjW0_J\$%&S@'?
%^Nu;W[FQk#f'9Z7<33Z@H=f"<be3&\boc'8@D(0YZ"VW86O0c9^RZeSKmI/@a@4SN1.iT11>o\/h6;6g3@K)u@AifX;)ND+!q5ar
%![g%qom:Q.rUF.r!a"!^;f83$bNE;G^X\?(.%2A^&&Tm^hfjrC>qmuE8\=@jDie$=jmJsqR@7AP[9^sJTHbh"Q`F3?]j.a4c#/BP
%Ybdmm>_DE;d-n@d&mV+\TlALrWu**H4@#6.rRdDX5HhOkbOpLlh62$4EXjn/;3D\YHAp1(mndFdd"UlT^']?"i.-/%\,s5'9tuWL
%Qe;[pK_6K$Y@Z!'('83Rf:$-FgZu4!A$^Buq+fY[_m'-7gk/VDoO2CEd%ueYgWZV`:9.9q,HiFtX"B>C8XruL>!pKu=gc?71>"5P
%lZGdkG@:_*$(h\ndo"IC2g_q@:o2rA8WOnun5Xor:(Dh&q''aX)Ju\pEPOahW#Ys,IY?$5!M(@>(]Wd>qEN(P3V#]RbVFJq@][LU
%q?SA#;@U$_KUk"B"*Ca+U3>`3]<D0`fg*:QPEtGkq6cHee8&ntLmSGC$P_S\lpH!<]%kM<^PrWdArcCS=#,,C9b@I-^6M`s)HMVI
%?fpnE<\O9ZCT@f@\:5p&p$k+MIP.o'EMH*_4H=j)a-B+pP-EKK#R>4k5Z9ooXJpPeh0>4):T;*p\d-Q&RI+J?d='&<1U:bmpe(;3
%=fm/'5,c^eeP8'Hq7#\AdYM'#RZYb;Ant3GXu&3*2_3LeBm6o.n@X]2I!mO+,NOuf<bA#`Bao8a.f81Al:JZJI(j3Rc6$Lg_Ep3.
%%_mfUm"C#N1H;(glRuU8/K?;-U%C/BbpsQ'D>I<qgZ]+b?%'Wm#=aY_@pm*J8F,u*H-`\<4/*nF&&buUBZX\q(,odq18ZKKPj;t!
%[Cb&\&[Xed:MN(:Mare-BoQn*m7U=TZl<%]rJ';?I3'Q5cr#W"L8bSpd1n-n^4rY1*S)KI&6"*fXBrpS/<)tVGH^&YZXsa15ODdt
%Xl!<[+DJMY\NPlpL+qV4j"bt=(9M_&QK:)1L'/aU2p.]7mZmL`Qm4V=^Dhe'-i;T1<fJ7<A+ftnO>/d2;7H2MY3O8,2+pA^f?6Ve
%2E"3Za;FJK_f"kS=WTM,]b?56GTP[VL_QPW>)K"`![_P&CDX+uhd`ODr.iaI\T0^-Z!pag1C6mTepuZY'_L($C',DU\X#R^2;bom
%_upHRdlNV1>q1M?i9OB!V`utk%bR`*#ar](booC(Q&SjdSmuH\Mo7eVkqgig\*EXJS=!i_2jA7f#@R=Oh-N8!DHChml3^_4[K;qU
%XWTf`I%eq4o)`=tPf#s"Y?<DP4a%3`Z!3djm)9ghUZ'@$<cE)E_d*6^P&;(B4".RQf.59(EV)!`g/6Ml>$QN8+&QU\Z"X%PbJP,J
%nW\`I]UlE76KCVr$IW!/\&YRGBfKupHF<VB4ocH89'De245F\+2IV&\f@k#IY17j1F4P)4X0$Y;.a@ChPY'0%W6H#Wok(>H11YDS
%C@blt0c?,i@42RgSJoGQWYnL8f^$"sg*U+&Oj,pZ7Gt\aD%PK+oB\NA0db=N`p:Q&A.<l2cCcI<+/-jP#TJK"6+cf)]eOLNcVI_j
%N2Jom]3)hHB#lCHM,g-uCme.@2WNfadB4D9(EB@ElW/]+3Y:.j\m^MSP-8e]QF#AYcG3khmU`L0%SlWd>-_R0R0Zi[H*&`#Y1HT1
%P='PLP58bUF;n=X-$5Xq(Klj5+j$<(%:dGHgAT`4@=:B,S;#?m;7:hLh!G8S-//S\>a/B#YX?6Mk'<k07D[65RoPS`*XiaITN_'C
%_9<f+:VA/FI\g+d/k53IPB"&GZe[U+X_,!IV*0qo4A=g3Q+c-Wf545kS>/L/;9<An7KI*UK4K5-X/@Aj<h/a(e=)Vn',QAN`3F>;
%@nml*!tXD'X%OO!%sP^)U+<%bA&9rR&rm3RKO^0ER)Hb2;?JFFDP!;(Uku9J04#[kRUqN.ND#nPlh*Hp,FI\e6j:K8%&1"6.%M@O
%5S-2`YI!eU"h'CcC9AZ1_R;3:^IB$_,oh'MmIn&UZiJ7Rk@2JJ_ucn)?q0t'[Z"=jH!N*SgQl7)O2KFj[I?u6f1-XmVO;HPbk*O)
%N!NiI^q!Q\hp)(E&N2H$ndjNWE\i?[\P2t_Sta'GPe6]6?WDZ&U@ZuQk&$FhL>Q;)QPfL1X.O).o4;+M%#>^K6He:Qcc[I#[3kXk
%.#bO%JVg-&RXfmbf><(g@AZM/U7A3L\_g1FrImD7f.)1Ef>[&2Yi+n\JJ&ag?p(c_&,<(6X)=KI$`\>*rT5E_BuuCn@*'-;Ehu]M
%O%V5S[d[[`!ugbC-^MRYUtBYuf3NJR;_KAnjrMH#5J#EcPth"hl>0hrBZd2BSQ\BdnTCXhLXQTG'UamMjYi`0f<-U>JW\BP)@]JZ
%bGFR6R]X_$Vpu%\^`QfTHdrk@7Zm1324cuiHi&1KJm*-."cRfal%$nl^u3>Pq.n^E;hj;.^8a&cm)HGX*qiAq2j>F#4@!nLhNmPf
%R0k$OI[E*C*_?Z7)<;t_NJi!*XiC6^U_HIt+TUpi\C*k`rPiQX>cULe)2CgJ51rfS2I_6tNbkoXD9<E`-laPua@=U;$r!6jX15S@
%k6qec,ATY\NtO-"k`e;9SP-pq?E`P1os:9J]cO3k5s3=LYjk>H"@h"h_pS\+W$]sI,N@-;h/fYEGc[T/9<-df@^M,oYi)n]@gltS
%6SMaJm1G47>m8F]c?9C[#X2n1<S<o.`'LW_0R4La+u`d(UfEX.&*n/P)V\7g\@&YH'RAS0<75"<,c*mtMq"B=#idap=BBak8nF;X
%lr"2V)H8c"drKB)r%m\]rt1B&-fKA>#:/:9VJ.s^M?Q_J@moYMAd/*g5t-uh(Pe=sNSsgk[5lj.;PMNg/\ThDjMi37N\GTIL)j,u
%OM9fD\s\?L;Q2Os!"WA'GU'Ntbui0NUO[Dnb6A?>!d_BfmU0"IPH2fu2`T$"DgQX.!oGK`BtnRLgO&F(Ab5]=_i=6aeX,EN]sZWr
%kBZ)srOdF=Aa.M*d_gI7SF,0ShS(C!GLs=\5(C.Z4^6h>j5KE,VdFF:7:Xr]Y?TR`:$WS/(!]mgHWqFrZB)FP=52Q5mOR<P9XD.3
%F/L6e^$Ok+?bG(Fg9e`7I-o&)8g0[PG^a5,Sa$HIcn1LMYIbmKpBoeAkH'_[X$NMgdg`_rHP\2.S\+hu_7Fi\qc82k%+>p9[$R[X
%8%[s\BC<AjTDf+Vo%A5^B3!]gJ)8nl/:HAYmq*LhL"6)!daIaP),*Ei.X_IT/t@>RG'!>YqYTrlgdNlGiI98i'`%Tu:sjL$Df%[b
%Gg$9+U:^4Sk?hE^lG<53G'3[WDU&'%00!4KgZ1f903A$)NW3j0V,FDIDjKr1f#bpDE8Q&IP'an=F_**'n80Trp)cGGp[[ak7\s"s
%`)j@3in;T\:T\DnbAO5$n*>;ebKFY'IfJ*=[Eco:rF"gX_08:TH#)I%KaH3f)t,t/"jP3-`laM$NQ5qsO!cg:IG?tAK2,u^?b'Fn
%UEM.AQecjN3VQtG*h->U]p=.QL/$6CT.I+HL:On-hd@Efm+gL@Df=Jq0!>%/5'EU'rQ2VIeBPJ:XDGVOITe[*ms_-RT/Q-?8l)!J
%GB$hN3QKF7-BdY.mW-u`'+F`?\teM^n*Ur4QT$"Nm]:g&i%tpmn:a?*-8:F&qYR]iDcWHq2T;`Aj5MS,T3j1!jjB"t`\qf*HYqm/
%e)IB)G]s'S%!;DXF//U!obZ?,BZ2[^?I"kc5c`\`BF1<k-0Rut%^8rH&^7tQ/"@0]_)m$V3?Of1Q/JV1D5D4Fpso+J\btr'c8g=M
%`o"Q2rb\m+cg;Oo%Vst2^40HRLM:e[LSGM0kXVQIZ$<"H]ZXIHK=t1Ag[RkLp<@lqERqXL?HSm'dXd-K^Uii![1uL$*I_q>$MJWa
%]dab_X07mOP1D/ca9'%up<CadGNJ:PdSn1:Df$KeILhHFpA.jQ)^):M$+UrB4*Ta^LEJm0H$fZ\nRM7k\aah6=[=S:Z"4OiCjt1k
%'nAdqXfg_grg1J"8eP4]>e(`r50kjmIA.BaUQXp(cL]uTV+uEE\^K@0>$<t6Pmt+FUQ<Fc]e>kfOsEJdrdc/WQ6*E"o,#]gAT;9/
%>Di4kjPWC`Pg*XAMN#+Mda`RBaPC.IT3i;EmRH=*6/[2KNX,;es$cll@dr9I(Y;\`rF+I??\YcT0MQMn>?q8@o@,GSG!9.@>;%j6
%g-,JoSq6AF%F'-8m9X@rhL90a^V3PpfH6*<VpE-;1Fck`!3aOJWE?C\S?oZuNc\&tJ+7EAAh?.Eg4#:`euL]Lp#`keE-1XL*fTW(
%,oWF^>]%/48e9M.:Vjm#`C&k_q*E;/fsqZoF1H8`n:^u1D-aA</A?K26>CV0iRR*9Za=lSj?;f*YD#p@i])10^X>ibHOq/:IB%YO
%l>)lbh."!He&2]!0=B'[j\i]kg3g%V.B<C-_5";.(9fBJlINAlIW=VopZ'os%"*p@^!q,L@=dCrPm6*sQ&Y2!)<gP3>s"tYl^rdH
%Y:oM,;a:&g[J;#=KdL0aJNh_3OOHGf:P-L`OVN@<NDZSSUp8ILX?YVp;[)jaLWsIYq53Jl.c8c_p-*>-YEg(qpf5RQYOlSFY?l[&
%ikqhk:B=MQ;ITEINdBV?C=BKPq.f.V07//#=3LS,G7r`n$p5)^eh08#B*[qk>Ci9"`bdG)Zp8H(%Rec&$A2h:bE$t^]W;meEd1<g
%3Z8/;6.7Nb1aF\h3HrOu0cK">dpVo9.Rf7:S98IC:^>!MCd(!\]"dV!D*k;4cf!EQ5c#gP^[u)1&p!T'63JY"a+pk[-sqRn\2[3'
%[taA?9fHQi-fSj!43o4d@&]n!Vl,\W$&W]6pan92Yn'TXFV1CQ8[C"%"2C!dMGFn(OZ-rl7^0oj]^bO;Nf$o^03@C,+4)j^kf)`u
%0dK1%XKh:l\e9WD=:6%e6lSN63f+0<0p9^WUm2PkoJA9QNlSK?J')dFDcq*rR=$t>[g-@N',_s]fF?q-AQ>2bS(JZrE)Ue<AK%<>
%HU^chZtT3o:+VIhq1$>AZn2>f-5su_cG&Z3a]F-.,/UiRr$1G>4pm>,]kWkA*em/r#Fl[3rU>Fd=O6T0db!:cl_Q\(Z=qgrn9!KM
%*l-Jmn7N)p>K:sFT''lr::?%FbO5to[OFCph:j"lm\mk@at\T3(p,)/*a3=;Hu8Zsqh4k$bC@H"0+j7ZGIQEl>k7J&rI^/b=0K@$
%<0VDN@;sREltmbll("Jh>Mj2Za_=d(Zrhg[ePA*T^6VrTT0E7&q%En2n(Pb'lI"X^ZYHQjTr">B4YMJLMD&G*M]A[^I6XTgnBV%&
%p6=c9odh57`;nPoQWe%g[Tsd/]`m6C>*!k<rWmIOkWj\PDh%[D_+T[,KcI%@)8)c$>bjFu1$TZ$a+8@W6N2!C7ke74gNat9iU-S:
%iASB!R3N5$-<31Xg]\`5Dp*t&`?0e83ThR0Y^DmdZh<Q[m`k^V4`ZgqQd9eu#cZ<MKt./^o.!tsroTMVb$j4Z`"Q>d1gdc]l8qMP
%hV2,Ip)p6VU[^rG`>hS"ViL?sP(Vr.\o[k-@KVuE%M,]p2;B]E^UtY?SA!UooLB'kXnJ?qIm<W)Pn!&%Enm2t1!JcITkp;*L\7ba
%k^NM:Y8f[Z1Uc/snO5EaoI'ig?!:a$"3/C)]D7@Lm]=<`:JN/CI*Mf1=k!M`bM<m=<;+Y>85RklDYTC,1nNKZ5DXPj>H]sM)K+*K
%6mV0\8t3daZI((<l-&6[G>#ne+2u^=ml*AkYLRu\5C%-Xk@O)+rmnfgr1WXa/@GN:IdlLmiB%IijTii`9L7gl"3nOGTC-JVm;2`H
%G;&:k9J+5)@.sVHC7$@-bgKOiF7Igbh`ZEX1MgaN2SNW#R+KX]r3eBU?9@m*BD$>7^A>9b-a=2S^'+GTX0q/D,O9]b(3$W]>i"]C
%rpiMBdIO:@Wp:K'T[dcjbgf"YFL$;W!c^*,2G_(E[uT@I4BT@#3NRchoY2!M/%YRLWoM'%iFV3"=2ATPq;tHB.6!533AF\u0fGQ[
%!LZ?ufo2,*1X8p*0?2.,:lHQ$Cn9['h3p^qLUBq9<#!+1#DPp7%8b&mEsIZ7'Ot'kSpsb<-L86ek;@"*jU_7%i7/(Gb'WsFea$tD
%g@//i$SMAfiVYL6OFM8:NRM(scI4<l$om!br5;nP^HMo,WF"pUcIK6+3Xg>e,[U\OiAk8[ofa0f^>/_kb<NbJof`%\.5G<J&bghd
%G4+/k@ee\kK?fCQO$D3YSdjrQ:DDdr'>AOJ%[;=QgHJ<bF)L8\R`2N+Aaf6o4I-H+4_MsWb)5m_?nM1m5SY>ellV&Zc+@2Lce^i6
%Cc?+$Eq[->g#1,MrU\t*BVgB&F8u&K2g;6&4/rD##3O%f_Y0mu8*GLD:_V4+RtnnImi=R$G??o:qqsj#$qQ\bHhUPK0:.ukaQ88d
%!4`p/pFh(Rr80HYmN#UBRFMAFHI+7H4EA_HH\_LK5086+H?ZREMl,?^D*G_poQEhD'^"bWlrrDTLNg,m:X:u=(m2q:]^G3sZa9>Y
%_`,3cl`CAf_M8qgL*;msB<T*-)kU?,rj],]]1;;Tb/W:'PE#(Tng3DRemG%fe;C</O#j42>7V52dc]eQhP5kYmTZK'Y40lq0%cKG
%$[-H[3U`U'?g$<0)dj4sp<gGB$!cca#I)Z]h\EUt%&INd_T2H4=?8YaZ4C(Le5q\%V"FW)AtcqK`t#E-a=hc+'[@3'[dpi`n(GM6
%em?^N]%n:E8@1=sH[DkegYY/@X9X+<`E-7_\[LdhMm[CSD0=G-5&0;`_#7Md>r_Gj4t_9mHOg<Ol@8+^49AmJbD2a5Z1eN\Q=QE)
%Mk[\1`63pI4kj">jlmH!*6'<(APbJr>lT?PacjTpRk>Unef&#20CG.s_<:DfId?pi`P!YqG2PU!%#-\I*dudhGI1X.D&.H?E^2;8
%rI&J[3'?*hg78mLAIb-*BIlBBr;p<Z^IX85qgZ^b2P8TF)_4_?k:b3=I/g_H+keL]Zt?S$.K29A,MsPY]fS=@.t^'/?M4c[KBh1A
%qWi'dMWYJaNh#!"c+H$IM<+AW@,OmMXo\5MYlt[(O"\@'?R<6M9;T^f]meqZQYs::H<Me90&O;@(-(m&pKV4sWI:%GhY[lGm.)A]
%:`K6D-p?l[pi&`a$YMsML^1>oL*DN0h9TH#h_3f2[FMhbV,oWlFg=C0ed"9_^5Rh7mn<J_B4`\a1;6&8_8Z$u]3_=\n%[C0_nNc3
%4F_ZA"M_iu3-/;LpTYZs]2;bcXr_'Qq?LbnpP!SX$O.7BPrM6lNettM9?Wp_ff01Kl1qer:X>F?NBb&1g3hVgWsY]qNo3q1YsM!`
%]DBp#qUR,#p=cQ+W&!ugdnhPulBdZR1t5(p?J9*/.s;T'?HXr3U"@2t4kqX*5((un>/An?LhVD9YIm_B/:g`rSZhLbQsa-Z*o'=5
%Z3fq8HS\7oU:e1j"*$M>#+G(`oEJF`X&c<Lkh(Tk([^[snS/FP4bpT4q1l(5*C!/_A*(hUO"V4LJJn<SX1MU1.+/Y3U(3bg\<$Kb
%3Y'`mc8I`rY%k+KpVjG(X4Q*5#NC,bdhG`0>!1=n+0,=R(t.@RJpKGq1QB"kfV8TTXdrd,FmjZW3`)1AB\<]=6dn.G<do6V6_ne$
%;_!(u0*XS$mk5/o.%K-RCHQhAdJZ!OG*.N("hUGBMcnbQSE:_[A)k)/ZM/;AB_Z0+\opkn5osChK;hMs@8k'#dHnnXS+Y48lC\ZJ
%FuWY*;3nu[?Pi[EA7/H0G!Gi.U.!Og=?Tf5ZhshKR+IC7GLnd-Y:EhB:?ml\:mb"+bC+kH%(tcZ*Zh,\Q'PaZ^!#_[)r6KmrBUOi
%5$1j`Iep`DmNlT2B9b0M3r=JPg-/Rh"KC:>Dos`K$#F;pBDo%jW/+Z=$BLGnd2=`[%V@`8li&%ej+jJZei>G]@K38eSrFbJN/8/a
%-0t[D*?3q4D!hL_X';eekDu'gBo#9;Q2^5"J[^sD*F2*HJB>Sj28br,=fjaRhL9q:\^0h"ne[pu^LIQCqpsmKo1S&mX3KOsF6CAW
%kbj]g%uOR1TAP5jlFpEKN7IA3;#27e_$lsDK7ga`S5@>hpKQJ8pV.MN]ek<;n)i?A[&Y_Zf`1.VSb/D=[QD-kIo888S_lA-qg[+c
%Vr&R2+\[4S]sLqB#c<Q&<MZLfH4i9@.q4P;#:iTYgtrK=MuYC(S9GLEX\Eofg\8F``>R(rC:/)hDNl71kNZjZdI[)Sh`"t^HFZ$8
%a%]li3UN0IIdUQN"iit;T%9@27i#rr]&=PjlCW:]m.&dam/Gb9TQtk?NV$Iba=g#8XJ/V%OVmg5ppFK*5f4-,6,gP%a.E]63t@;-
%\jnLNr6)3\4+M_=30E>k8q/u.S(6*$J[YBcXX$f$?Fbi\7tjI@a-Fp"&$L#)\%7RZ4fBM^,dic,1lD-MK7rPl"<T-q$2.]=^iS-!
%%nI!OZ)0IpK<5DDD3U)ch_;us>l8c[<:jD&ig9BUDaF-!I2LE3X7LN'dl3t:G"R7C*5&Z6gLq<PcEa"q?!a\Ec0[G?'X/+FZ/:'b
%YZlDZ>^c'NEUAC&T!OI%22)3K?WPL*UI+^;oDM\bfb917QQZ.Ye<:P8UHEjSEc\g@q5!Mjp>N0kDUC]`rdtYpN#KT]PJ>bMXqeD2
%q;VK75Vq9pEOW=I.d,dIm!i8W.3qGpd%*]te1aA"Ml0'64'%Q%WB[+5nY/XDDOF2okYq>3,&'uV-M'%Z`U_W!X$Q@1Sc.!gV9]>Q
%`?0f#GL!R?JTC7D0,rYm0+ONFpMWh.S$4/c7pn<M2dU6d+@cBL).rY2c1=$_G<`"*>-e*jQ/_4h&(7qm$F4d'/QSIWJ>(g`B]&F=
%(-gXHc]9fDL:+_1S::0)E-+tAi@=lbe)-mhTEa6Rc0Wh0R;Sle:W#l_5T;8l4)@A^2fRU6V)EHEV)E?C^6?J]Is@Zs`U*l5$*$?$
%.3-=\`dnM_m;b"//CQh/.T``t=mu'iPu_7;Fr9,KgMU>0n/G3Rqm";7^r,`(E493Ce_9[M(q=2tOmb('H,u&=%.OpN6+\/'42Z"5
%%37+#f+15"OM#VK/_JA4(>fM<$\H&moK^M(NN3ai^,]ia.pMH%QbFS2IoF'@L?acoH['Z&[68iUaLH['^YT4pBGhb?4/]jlDeZgM
%)nOLoXT/ca4_sr^Fof$@[Ui'H-d_X*F>4WaG_4i#6XLW$rm0L$f>$H0M:-mAO=$UO]OpA1e$k90"/(:N*<d3C$$doGIhZ-*j6X8T
%^&@>JIV*:SoDY+2JH$_aOd>de8Zm\q9h2PSl]O)3UVE+sq=KY=RctddNCrtPZNsRe1UA3C30!$4/^q.ArP"co%,XsU3shjfB6@M<
%'ot$glHm"%Gs$\FoaSq]%5kGgmHH`bT(QsH)@88a5ZP;T#e!L7%>S+P#$pg)<]1!t@gr!YoTj/cbQ.($UX9"&jIgurI7*b8L?BF6
%X-*'<B\5SKS$aim&1_ic04X3HehqgXR=<_04;0tL<\j_S#+:dFWBaf"7as:cJJoI![4Qq`XO9mpXK80_Hg2P;h5k**+I/C^eLVYp
%Z[f84-rZSdo51@hDE'iQeX`cL91:J[ZC:47)$:`-em42"T'8<CO9;Uil3]f"K?7MriK\+Z)&u@,%@?f1Y]*Q`-&@lR!<FcZD$X6W
%VIf::\khN.=kI,P_$8=+Yg%I[CEbhZ]GMFha"95,4)8R8@VkpEi$9S"T@I2qj:O9(p(OJ=+<lE&oc;p_1k\.77q[i@9Z'[m[LJ]9
%l`)Wh\=,l`@!@[1@)JjG#"t9LgUQKof(F-=UdP>%1k]T4NqaY-!SBt"`?o<5i?pmpkI?f,f>r9,-5[-QE-]c8hdKrFX\>B<6*t/a
%CKU`K4kN'VB9;Mr;@N_qc?G\qJb=/[rDgl;(#fGqmsC'P+Du_>J^6AX`6ED0Q9fm:M44eY674lpEAM#kbu:<j!I\f`Q*qO(#[7_%
%Z=^lXQKbBSL6Hqd4!8<(>"a'=;6rrXHJ;Ih9``5-#!h">h2XnJ"?U+.#mlJd<CP.thD3W)#4SN^U(U%d!A`d$`djjN6ecS)!D,*&
%XJT^'.VV.Cf@;HQJ<\#$Op2ld33KGC[(oEt,V>.S`?81/&F'qt7?RjCY[HjuUqs^0lOSlAJ^U>uWi-fFWO*\.W$riXe,X7ZSu%;_
%DRo(ZWWXbuVMH-A:q)SsO]bCYd"&#Gh_kZam4-H^&kN1hDJ92j"`fXl>6Abs!`^3GAVB#=`IT]_$[9Q0%?2A6'K=i%m?(5aJH2;f
%lZejW&umo&.`TB"^X0*%J?;?Jjg($DSt5Oj[_3aY#ioVJ:_cD0FHUDK+s'*OdWl=IACc:'B"082A=.r8Ct*PuW7ofgs3GdV65.9Z
%7."(&e+^2?AI4p1i</h:TK_kA.sIMV3sd=<ct?l_*N+#XO\fTl;q&(5OHQ;6Pt:GfL-q4<DOX7q%_CPAe]hqVTZW:_kh>7/3>/?"
%1M#9JJIPN&F7fQMcqmimJ[HKEn[LoiHFb^laVY?el@YPF":rU4#"?<aclX/OOpQk8f*<S:7-3jjm_Ag(QcheF1Bea)bV$HT2RrOJ
%k:nSs-9ZsT`j/]^+tap`6aH+)YQ7X>6/g_i"$!cuWN)[^!X]k'5n=B*$*QL]*7>EqQ!iO6BZAuu`6\Y/YH6\aE1dS#Tf^6o#KBS_
%Ks$thbX)-&5ZJf-Nr'3gYr)A*B3TV-&DRjQ&>=^YkpZP0l.b.Ipk"VK$j,B.3%hY7JA<H4*X/rZ)eq_Vr(*0eEKEQFFT_sqQJFOD
%GKC"VW9r:_(=I`(EAS4V+b:?b.aq!$G)b)i2iOuV:]dIi_%s[Xa)`9n`D"Y%((cOdU?gJ`><_6b$N)Sc0OP?e%pl#,!N1l+eA]Ab
%LZq+?ku6dc2>#8-2.UB][LtkAQr?9QYYa*kTK\.)&0Sb`Rc"QeN[A48?[!148eBAm>$p(37JDO\f)p/d+_8t>VGP'L_"#Y[@tS.)
%HNlMnY41O]#>('iWdCT]s'+EUl`OVE#lC,#`*&be*FAhI&.9!tAZH7pmD-0R`n85Y'-N[n@,=hT('R?SL5%K(P$Ss"$=B?*K!6o0
%cd6JC9"<QccGTGpnI7dn'&*I\"-8M<2Z2(PR2?3PLkd-QEa8oO"jH=;C?23h,7_^9EWT[u'+H\-2+_:I_^Q]_0D1<t^oj8`Z3(k5
%dpu"OBkDr6!^q]pobgN!+^j7q[)8ZLa<F!uXo'BlARPkd@BX.O/.6S2gX=^b=.kEP[qlaj9cj[A'KE/sfZkT.$S2sD:<c?+i<hEh
%(A4WhO+aNK\;K%E&7cU.iXR;S/;Pc@j/E>)$\AUh:F'm1a+c;R'0$b8CAWhjNWn13>A=40J]%j7"Xk!C(>5o[!f&+F?'-+g#om2(
%k@eE.#@,EQY9af@.O[pI+OG0C#oj<s,0NM&E"l9:":d'1ERb1%fHO"9W!OFO`79#9'0+Xkcj(4D8--b,,]Jj80TV[<;&?"k%+l]O
%:*ad0n4PT"OhagZ8cjd@?6XrQ7*tTp!XIllSM?5AZ!_7s9-eI-5RD8$R_VcdE<6B=]&sC+9F2]mE[R!9;>Db<i#ob*l)IS'e[(k:
%j!]J2Rg[H5B+bN@+Zt7fUlCI"<<.U9*:SYUO=no7kX6RoJ4'[ji1Gk#kaO1GaD%$h25r>0"m;6_NdN'e\EHoMd0[%/bm.V>5GQJZ
%TK>`DL:oPaTVGs^`Z54_7dqj$@?6"L2V$2<EL\:U2B8`WOA]Nc#P:>`KseG5WYu0lfI7b]#%pDV_)\ba*3.qNR<6e'jsVY*<qDmC
%#fE?\(dM7"S`IqJ5nbK9@//Ra?t*DCWUO\I_#\bt95mQlKdI@MBiJRV1kF9/EITQHi66Q/(e/9U\JOIgWWTR;^15?6$:@h+9^o=&
%4W"K*n\RDJDNek>dJsA)7jBnla2[l?,W+0iEt>i>$C[X_<SW$PD+u_HI'f<7D$3<'0hdAeL%a1>%9."S@2qj6qG:j7(Tsq!f2BCO
%cbW0[9a".k'LG@cHmCP"l]k=s/Q0<8`su^%><-jN[AA[Q$rt],;8J;K7m^4g//'A>oDph/0f#\6,:PB&1t`ZB$>32/`m=k)YN#7K
%Bkm_g3uUODR'nn(NdP)*HC-1(-OE6)f!ICXMFSKj`KVmm90;JSK;WOEL+<(NT%+QVN1l*!7"7lL1m]]A":ihmjN<3E<K-s?n"s`L
%G.^*nGigX*g]45g68'fib51$bdO)Mbk'@dI;^VL=/TJQGHXOiLCR,IH+!(JB&l8\J3!dVGn801<+BeK^!&a5<.*rQ%"9Oq@`fq#1
%a:ZcGrN2"n!T]Kt9u8^mmI3@c)@(l<XD*8UM!'[]cnSj/gb<'K*,PtQ*:Jre*ZGKK<J'>dqKfDQYI2"$qYGBAL0rg3VI.@3f8sQk
%SuD`?kfAW/-mnfO6[\7hqnWoYA=InGEqs@MHf_l7'!:kCiF/qFklo?'kj(u+i*S[P*^07QEMF;=<HUtONB`MF=R0JY>@).$;;2rA
%m`!PV<(\u-B^qGSW)IVRS"88onF31-`oWIIjbBji<!Q7"4U8R2-o\4"Yk'pG/a%sKal:+`d\k(4pQ(LS%OPI0Z%WKo:NK)/D'+P^
%/-WV;6A#3KUB#/`?AI#JVHSB]!^[V)9^`8WMLdZ$O#S"g0MmTe`'EU`!gHJ5:dB49MCAsm8gC9E3ag1Y,E(\\6.&k8TNJN]R_W_F
%?1P;NES,I4b?_p;$la8iQqSh!LjBW^LZ)Ht!l\I70uJg([KpVXY2@)785)rc%N%;CK]rb<BC-O'Fg?uEFZ<KnKpl#0=+Kk`2$taL
%"I7^eHD:eabYUEW$AoXp6H,sid0+2O.!(mTJ@0F/Jb7@_XR3;V6LNAQWtmum)I/)#Hs_HYSg1O&QEGdAn8/o9Tg>te*+C$/'b/,*
%)GS,$#2d`Tdn3G#Ys\o;D9t!Nj`h-^JLHBH&CDaQ-sDQ2P`&R3PGeqab\cbMaJ`_u(=5TkTX#(<0TSqnRdjj<b?S=3<KpsSK";#J
%,`5*M#T6F=mR+WTFW^)U7)qu4gtdWCaYVF,@S".r#SsO%*\,%m.Trq1KR]WK7Y12;4DLWZX^V(=&U)as9bg8C>l\um@8Sp:6V&>U
%[>EgdoKukYB67P$Ok1"&]!Utn%F_/6Y)*5o9Q"T/B8R^K\TJui_==J?[:+A\<0g+)RfsF9l9arb[&'([oaQiO"aY7(Ni-UtF]h">
%d0+&L&S1bCW_j$uW3?k"Q;7<n]3*,=P",iTb1<5V@qB(V6RXSVT+qWL11gkjbTeP3L+\-d2HD_]AE-prU."ngp<Fk<n1$;^XH.1P
%.:N`be'V8P8=`_2@U6<sCh$tVjH?EWAk`@b171!2cf`YL2@X%Q@VGqSKP?4^dPgsX)BNMt_GPp50jN@Y/@EIt7E=-_A0'$(p.^9F
%VTi<%TVSQ@k?bYI`(i?JKoMVCl#1#GMs,%gedq_-kR1l3=4gWhm*iVMM)cMKnU%,dN/.^be+K)V/5PG`d)0<>1G"?.&-SBR%.^VP
%VS[-"4i:YC2=[mTk66oP+5lJd&]hutQg4:<^jDBS(`JMgK%bJEA")KJ@(eSeBadUS9a$.ZF=[^I0KK5%i.qhqI6fdCF:pQ0'96R,
%d_'A0/"n$'0eaN8<33(L4G"E90-R8h6rspVR_lsmg*Y,G=N=e\KQ\[KSE]#F1P.1(2H_edVK=<kU!NsK#UH>tJhmkF%7)o6k7@dK
%o)<>Mp_q)?(8,8#f[mt!"HmLrMR^2fA`(GdC!/E=MMr"2NAZ/ETFK\82%#?Rgrsit@0rAVeFC7B<n)lk2EciK'oVN4mL#O-DR0gD
%&2W8?%Cq2>82J@'i3A5L=OLluVAQsTh:Gr<&E#'rW7/+Ip4B5Z,"X6A<Y$]GM"Vm9`/^f!X*?tGpn7!S"QLC)[/tJZ#e(Nr1E6V1
%=T3gn_m+%ZZ:V3]Ln4b.r>"[7i>ifiEQj4u"p^qb)greY<]h+mWfm],Yq9-&T/:o5gd@k[J)cd1eOr=#EB!0.gX&)Up=OVOKa,a&
%Z=/d0!_W`tKFZK?*FHUb!7E(3TVLqQ/3#!#FGFoG]"D[,)MI`3RMCT1A=s,m#"=X6d`hfFDE\AqTNlLmbsf5@gecTK#daqiCsTC)
%jBt9]kY&dJ5heU9(D"eS:UII46ioZ/:Zn8K11]<p--*Gr$TJ>C[GtI7^hpeS$O.f"1,\L2NgLN=J#PI>bqrHB3>UI)TL)ZZBc<o_
%#Gd?b_eW?gDIR34c[B)_:0Gtg-aS^4@aX-rarAL3![.ZdZE6C>>s[KOdt/aYdD/!;>acG!@CjIPi@Bfr(^]IHiXEuI1)0p0jFSSs
%,2l:IFA1=d\1^3l:gl9EmN$BRk_.#)CtY-V"+qIIL`e:==V`5J_sus;"[nsC_F1]!Pj*DeC&qHqWbR>Td^^Ms->od:/4hOPNn:2q
%":4TS\g_dTQ%iD*A2rjnGSc7#:$TBiVgZfg)ql,0;_:t%L@%o^Kq?5LU2\Oc#R*A-PD]M>m4e2ie@O!DMd6e;Hg79-\M$3"h\8nL
%[3V^5#q.2oS%?3YmkBh>WDBW)?Yhd1j8ji!FfIFL:]S=Q!i?!4+u\!!MZbCn"i\-O6CB4KBUT.KT3toClsWpUb>pUXG(!'Wa^ZD,
%GBE\'Y1YV9AlDJjJ:h[#f8--a1$LaRC3W&-j[-25U7/n5eLm1k$1dmE+6U6Q-Sq;b`DcF6\4;/AI*N3I0t?.nTT6P^AjFt,Z53MH
%/UII!.`@Bo1)(-=Qu\`10rAhc8HS`gj>>f_k`u8o5-mQB\Q5Gu"9,LA&/S%V]%)P\`=ZcP9LJ[6Q7HbBiWOt6Z:$Vae:^QE8ln"n
%'B9fpZ8WV&$,pS.4VPQ!BlYpWJOl=V`76EleMBcI4'5g(>L^rBWT4(F=H\6lMf+V_Ff=ZTPs12QjW"9N/[Uq5(9tEa%P-Be%R<^j
%[m?+N7K/B[CBA76P+t^T-76"%?33EqBo1eV>up#Zl!,#5@4183C?TG<njXEJ\Z[EdF@[^6^,f`_1">gIk5t43d<nas"L9j^R1<7u
%$F>E2RDsA/Gh@ce!Y5N<U(DtsKHO?$0LS('8(2dmk_a"H#iL"fX?+akEX"Q]![&L%4MeLO[5P=l9C5EUo5X8Y_I=(Iq_6)G>hR^`
%,h0f:Gs[U.]:pt*SGRVakZDb9gX>*bLX[&8X=lo%mRgH,1a<8]FZGu\l\=bA=j4nrlUD$1%V[[$Go@4VnnGah21d$p_4.">An^=3
%dcQua$G\qJLs@+m;K6al5S/"YaOeq[%,cDWeBS^$KcL#L])iRe!A['!K,2A3`.Gh8F$j<]%R>8WbX(9g9,oKf*;,"KAhAO0"(O$t
%LMCL3&dsa&&S)c,.i'cKb'EO*"CF4/+p8=V5gaA%-5tUr]Fi4A*+&_D?``0@4gcHc6?$.VaVa5p6nThnW6%Y3JYL>=Vi<bEW(%[+
%Esu0;8m[j=)$>tH[)!6K%O)HeB$:q8e8[iPIse@A*\IN9H"f,J'VukGnf@E;+PIPC84Vk\;qSZmX!epsF1*ki)oIZ>NZ)ACiWqP"
%Z/QI'(5H]$5foG.-Sjp9eC+.Z#XMbY99U%L#]bVK26[:D!.7ca6'rE(j$=M+Zn",3%Q3k^X+HS0=IKdgBt>]#ohFE$6("DB^:7J9
%TGZVs6\B,R*7W"Ea"fu/d?NQL[5\\9\G1\m%VfEGhm5*^%24&3&G`@rN>t;+mtmtY9^s7%5u^+,j\.uMnp8\R[:jp??8G,.D(B>c
%WNT*qaVMm@81AdlRs\#T_&.deFZg%O$nH@1?&D8]MIfBcnhd'rJUlDZUf3q<+O.6(`$!3S/Drao2?[2r4^"&M+_S_)`N`9j^mQOl
%3C(A)n^o-CYXj46A6$/m*Vo01O_AGkAkbs'!?]`u'l"=bL"\`IhD^.^Eca@B68)Ks)5*e!n2Pj=\g&:pFf4V9514%lnF3;%6hl\Q
%MjMfD[nra)JJL2O>d7;%'QjVBY!pA"fPbs&+roL!8"+1[*.mnD`\sh93sibZ=IVIg(lC39L1aF#M)0)FbQ8lgNK$As*gqEs1FRu1
%kI!1YKRoucL;nXaQQ/!@i9Zm6!p)mt<@4OF'WdV\Tc];4M9B=ZM8d[n8T[(4dlmDGP>KNO#9(1fBafU3EE*G>Lh<.`6V@On]!4L*
%/9kG$!/Q3Prhel;^*49?[jIYe@58ToS&!I)b&JH\q4YZd5f3G4)B,H^+Wf>V\gYPH^u%\5^bN<PXb_NlQa<BVZ#(Zu0d(V(egLSs
%?hDN`5LC%Phph>;E%snO2?k(%'$XJ1EsUi9T#"&Bb7NX\K,1b%+A!&+h>pIWF5tWX/=ti%";HM<:NV#LI>=Nk?j;:7b_Yc?7#r4p
%_/d&5&%RtC<DP;3!IY25$*2EI&c>g7L9,t@G)1]%hn:.o7>pcV,tJ*JZjm)``Epq.,!Us"Z%Pa45gn,[J;lN*e..'e`tD)5l?okV
%G&^_XhkK^Y@/T;A=`Zu!$Wb)B+c=o?5TNcHaS@/HCP640>q(`">eK:=_MW?+&9KIEi!U"pFYNS[O=0?@%BSk`M!J!D"X%09P>^Nj
%6]nU4k8Gu0s5Z]fQ+k5;b-sB,K]ff1)WPj,3LGBlV0!>jK+0]8R-;aY#-!JOJYH5&B,uN'kttgpG$"8AI8D.H@>1`-Q'&]IdmY:-
%!?X*b!<7lP2\p+LgcqF'q#Z5u%56]H:D:RQDpT7l-:*o4o87%>Wk]i--%&SaHg!&lipr@epDg,P_<1%d![P;5oK?DqLf-Qp(^REi
%NBs4k`4]F.=V8s]&%S"9[\.s]cPh$O>4a[+[u2AeK.%]L;ZP>!a>+?D\Jm^lAGkX7)\8r2JcI^gMOSP;U+XS&BlN^^aH=<3h"GjK
%<*Q6>_4`]i!^mq=&&*uj_arm^iO!I>;aGXK_\9"^"cCSX7U)"P,83]N@dKa\&G;=";e[X;X>4#h;Wj%4Qk8c7aTf`PnuWhp-OauC
%DY$hSK_p@`\ZIKBfLlc\/7&?+=K52FA.I.Akid#BVmBc.![muCCZl$M!LfVkfZ5kbA2j?^T^"'4)<asp2M]E^8TJ?!%mG#lUL6bf
%fkA*J]PbY`<^?=NglLdn`'StYJe'HG=!F6:6!cXX0`+3q4sanCUgP-/-.ChcHBaQ%QA7bH*8O1C`(T3HLi5ur;H+2uP8e-C,h0`1
%f?^D59n\k_bTh#37Ah'&l#i;4$!$q'<5,/qa#LG.e*-%0dXdb[GmGbZ?@5`n8s!FJQTai:+Vo.h;j]+0"1frb6[2aq'ERaN&+bCq
%=EnLPC!h0'!>9j7:tAK27FC/cNoQ)Mr@q1=N0@`+QulDCI%*3TGGN3\i.XJAkEBEc6It?,/dNaFf]MA>;<FL1T'OOgKm7ndOYe(u
%:Xd=I>dC)'IXj72ahDIo3'fXaC4%D!Tl'ujK]gT_)1'MhD?u=W6/iLtio)X'@U-)#(?O@@qA7%sWhD[ReY;+*7$si('".ej/b67s
%=b5u\%VP@=^joa_a\+?K(brhDZ(/nQZe8!h;c\!u&1$]8d1Mnj`P7l(Md%AHVPku'YN*t2n[.2IGS.nt*ftXcou.3S&]NK?D?9E!
%&!1h:(^2.>;3cph%QoEkFUD&(EG8IoP6sYmJr)#YMMY(lZ]2Ks_<dI^+V)`^b3P^r4U%r-?f!V_/9/D_LhCe%ql4XCRkrP"ndIIO
%Z_NG"$dB;pk-Rb)B3,r@QAqZunUmde)mZQD"B&<PR(tZ6#b_(ZM@rAb6N>UqAb'1n%?b%XJTs#aAWO*R191NaLW:+,W3Tjua3\80
%VoE3,I=iCUE-T0<Vq[Jo_kU_[K/F-2Sl1*%%Stk6nmg\<@ZWWh"9mr;0ctrVO)=B_:I2Z;<5)(l7KJnKoY@eWAA/7q)I%ce2raA0
%GoJR+<"0h"n5R2ZcCb<i_K("o'O96*IZ1=1>Y".chSYud"!qZVW+HL4/u]GT<BoB=oe]O1XSLkd"V)T.MlpU?pq"%4e)EM)LCK5]
%UGDJHH@VJ%O`ePe\LfR"-AJ-N`K`2kBQM:!"A3&?6R.bE?F-Go/-pHR_RCthGU\j9H.@Jb!`D3)O*r/t4HSFoe:n3*r.:9+HrotP
%'mp`tdQlD\9/OR2*m7KW/'bTPE(Us::la0s\4.oghbdlEbaF@tG9$H&d+:A\2.ZZHjk@RE`cN.Ha#.0!bqe:S@R!R`J0Iq9R+pU-
%]80gn/7-d1!aX$;gUt!m6]:4aj@+9ORh_%EA>rCof;+/(_iO<+8jJk3%RiTS>`V-2,`NH;#kB!1U^eeI^o;<PA.CSg5ZKbE+"6<&
%V)_YlCLfhB_Qm04SA9r31=:[7/"dqSjbn3dQH8hb(Xg69'80P:*\[+8#guj-M'NKqCc^l[E]"!]$^WWJ6_j0cWQb8_aQ%ApOs6Vu
%,*SN4asA4;@he.;,+iXS8FdUn,c4P>875l"O%n/B;3m,8($IB3C-%<74fGkYk07QQW@!k9CBh*OS[5A"3+<3=[?Pc=bU$+a:Ba2/
%58>T0KZK[TY.8O!&Xh;BCc@Jq6tVL;FXSo"&C'::eXX;5H<<pK`^ro>0Up?8ULYdE[LkaDM,f1#=hI.3'akVQRR]861;bk94/EhU
%.)ClhATf8)Y$e9jbOP,$=LP.b2"B6AP\cWLGH>`G?pr8g3u/R"(i_SY$cH;@Dt%ei?\,02O9"8H64sFtc5HhB!st36IXF!D0?P9'
%#0P*2dgZJT8rWtrdh2q4J;l_Na3g:^*gCB!-epM'pjudg/k(o#1_-'k)WLImA^DT)"A5Vi(lD4Dp!GIsY.6<MMC4sNXM^*-k-HBu
%oL0C+1*(*I\k3]$\MDqC86+R[Pg7,W3=Cmj:%9VH!tWaMQn2n.A;tDh.*)uJE*3&'La-6j-X:dBDUj0O8!VH\YsLtPc,b=,$J,Q`
%L]^XDd;@>e@cQs7Rjs(:"C=Du"Xr?C-k0\FO+t8Q8bi&t(7-\l)ALOAVq\!f,A\S93A5L?h+BNB)H32B,98o/k;$Vp@/P.;9P\%d
%'n%N]:X<2'lN&'m>6NWRT%Tg<Y1OP,Xsq%#e+%f_J>q;ijd;oIYsD'#U9ig86Q][$^#Ds=WV.:M($;d#rXr9"X'9aiDf:i'n-RjP
%.;CJ??t81A'+6mt]1>aJc>Yq/T=!"T8!*+2&D_$!Lrs\c'1H4C=..&NXLb&ko=-G-PpKOhr'`t8kK`d7@q(N'HJD3d[HV,q"4L]s
%1?fnb6mVnhg6JBbc]X1CjJ)s]3HREes*tP8'-MBbHt0Ca,O9tu/=,i_$3[PGO>dhs<@NV3F/2s+Ua@.^(oBq#X#kEmr"')]TKc`*
%Z!"D$Oc4rCnIGCrptZE0#e_I20JKe_*0/.'N6UG!HXNdmdEN5oVZ^"%cbW7UD.m<k6M/c.!t@Bh\[q]*#H@:!.UD5c&q!*C`V4ch
%QOY`%XJ`tSJjK2E@=9^!WJ,)lHo<kWODBb-7Mq^K4EQXff7@cQKDDZ^a9B2A0"cA[;Ost#kT&5Y<.M.2.NfI,hMuMXC9o=o6X,7l
%Y(BU[a3\KMU51S]YU_g4MtkBR3k#,RnmqDtbT;"c-Xi_4SAuCsQ@S6Io:*SZNtcm`B5.!OAjZ]0NhEM/ccYlK6et"o"i#/2DN[k:
%1L>L)C-C1sALkrg721JdMnTB:9KAQSc\N^j8/?cpUJWaLn-m\\>nC516TM=.MfK"pKT\NchVtf.-U=P@8#;B;phg-Pdm;tea#:nH
%e*'s,<'JE$/Z*eMH,1&-FdOs61=u$nfG:c#HW8(DFm0Z/bbuV0ObRPI@CZp!/*a!Vd].#;H:?**71r0NI5g]ufUkJpN\cYL?Wp\_
%P[r<hCL_%r"#0n)=6_%WkZ1t?I.SB^YBZ[32oWaA(rgV["cC`ElQVGa/QC^A"E,PG;&CTe*bXr+Tl_iAa2C\7VZ`,W_.VhKL,E`0
%ijB\+"O(rq6ie01UEHq:KYiaY('gt9ma)iEN\hln#os\>kQOL\7ClD;2ah#E3&MU+L+'CJ5YV*FXJ.jtZlnUVQ,'kt^nkS=adZaK
%'!f=g%%ccF$IkqW.s*+l?_ZPIS.IP/:%Ta*'F0(6(U2<Y<((/dkD=l&knrDO&:AUfGN`0nZ>d\MI<"dEK5cjKjjJD7Hosha&>/D6
%Bf2%Np$kp;[mL9m:Rj3R\abfaQH-BS-=4-W;I9g6:PJ95>?o]KddNQF=^U>^j+<;1Ylkb,%TaM-7;,gN!_gM@2t2)YGRG2rloc5#
%g5\^*RlZ7DcrK\VM%ito32X1nj.],@o6H*M",g_2Y5SunS(?i_Sl)Tp-p2c?5d`sCk'Qa]Q<i1ugJeTKTes8C#]$s[52O+0<[U<e
%Tbs>YJegJmTod.2S)5*'NoTsk?)K]C38-1X_@6_++;uLWs*oCadc4PP?2;_KkW@RVJ49X-M"bCMV;&64KIt8["$I:\'O,IJ8o.='
%)>s1l^U8:(M3E5,,$@UnK<EV(Q2bnL:-A8lD7"?Jp#I<$Ch/9\eIHCAam"s2_`!ogY?F[$(;/AWVAUr?8esNJ9O9K..G5VCmY&H7
%%a3?,JVd;!XnE?9%/#Ue^H9p1c#sjG](9$tRmiVK'$uRd)lEU@bHg%ajh@cj'1#V`1JNr#PSmSAZflda7GZM&9Al://k%&gr.GNR
%Dmq*7Mg?pq/^f7H<N(8?Or:1*&Vl?dc+^XO^g'r4bijLJoc6?B/KT?(YGqI%13^<=K%Cm`7^.Q,l[8*%eRe3*-B9A2l]E-kQ<W`.
%bY>2Xc-iHZAm[WFj]=>rYPF&BZXE%jS0!UT_eT+n[9o#IUPkB@/qi\1.<Ql8>prOT8k;4c05.A#oRQMVh6(;pESEC]/"dk(^CcFI
%Zp&:DH<('p>4XijI.\7nFS.01C!lJmCa_Z^ipdcZj0Z!MYI2m%\9#3X9P-Lr9"E1rU/",n-S3(:9G4;[CJqC0%VLa&QMHB\Cq-r+
%FmZbfD'h&,TioV,%`ihXTgf/&Z2!aq`-aCkAN:!j[hi?92U6LkJN*S^->V4,l\C0hZ-Z/2Y,I.:g6_gZmY+3<=ak4o74/m?G2&Fs
%,VeB@D:icJ\e&*=XK6:!3T2&\`i%\UPI&No=9nZ]hg71]*@GS\c/uqh.L*q/1-q0VZb-q;im3Q#;Fu2PDY'0LRp8BE%2=-\jBG&k
%qq]ocSsPF.Y'kaI%QhNIR47RDT_/LgHPig6TY,Kq=H_KYf7cHfLTE\4VV$?6;mifUPq80Xc.]RTr?LrG-*E%4E`)#^hMW<-Go&jr
%;9[4WPZoGe%;"Vk8@#2"(?^"5gFRqcn;7[kR*#]qR-eek$:kI14##qhlsFV\'oXhNFJ$YdSHVmrNEM,k;^r5jqEuld"B)S].s%if
%V?hug-L#TW5HKaWN.t"%:6+cp,muk!_qiC;^YqM.H"a^RTN*Q)lUI.Fqf"(kr:9[B=C0A'Z$cRjlWX&KDTLR\Gpm7)O0;?$J'@;n
%hOj^SCd.GI+B_sL]]*Ckpl43Zqf2oV<]0in6Yr%qSW3&#O@!/6N8#U_fj?8WOouJR3l^a<F:144[eU1n%=&*uk+.pCPa7>XafW^K
%A81Y(LMDqC\i1!;0=/8ZHE;dMA-)TR`[^,@$`\QKUTOm<nM>Y-':H.M`q@sCHRPr0K47DfCG]Sj[hV$5^RrB+9&)<<!:Eg(,:Nb-
%T0W+R98>eFac7.B%2IE^(=RCq6*E<]e*9QHIAm@gkf0<8i<m'l%GTk:MY4&q%C5p^\=H^+hK*r<K4<Y*%+F#?<l2(KP$p457BEj?
%a-C=?XiiN1lHkKH4q*?<Pc@ZG-VsFNT?eY(kfK$Zq72Stm*C$4I9;;tC:W52''q&L\%ajYR9tH;9oSiW&.$e(QD9uN'he$A=j5Gk
%qBdL;FB/rci'FK@Tg]X!7`m?%esNlk2M7:6`K\X[!.g02-HK`Mc"NdiYB;1,D_@r2Y]Sb:/:#j!:m*>]9lqNA7[?RW7HWWj*+\-h
%kX:Pu>KHZ"18n:a]Y/O'8U#%]<KSi(Q]gF`:!+.Cn?tl4U0=MEdp0oJp5S%U(0bdA:ec,MO;k$R.D"';Uu\BbAA":W=AkL/o%HZA
%EXHE7@#tUEk%'`%e1;"FAi<^S\?X0<OOLi+I^^pnFVVcD<8=?IXn7[c0UKph`P0mMFo6P(dX&33Rd-]:Te3O^RZj)uB8S/KAQ*B&
%BF^0sjQRD]3<NHA5.$hl1YYKg`HY;AZ*!F+bT<!XDIf="iUju_:URd0UaZ=)<>,\DQoX?Qe,^`uhH9T\.*KeB(R9hLjGW-KMAr6\
%UbA$0%+>8]UoOTG`Lh6l31q&>*mr0X2N'%a9H/LEh,RK(gSp/LPY..9Kp5K*6RG5R,e2-#WIq8M^7K1UbslU,FT4(l3$B%oA@%6;
%.[?E)9YIStfX";AG^jNjRdiW/l$gAsIeOKQ6OB!qSWpJ)Dbq`c$Xqc(g*TP*QK:!1>/I?S(?hTPUQ0]47"_o:>+pA[k@!Z?YT-s'
%n@QI7X+<XS.RKc+;M*/?M%S^X*;*P6!lM(F>h;UE1+oP=[,Tj`"PNfor=7-43rS<"`GDb*>5"bZKF>=80A,e!+,(YnqdA#Xjelu;
%b2-.lJSFRn'4&q5r5,p=9j[6c;%s%OI7^re6ObK03HHhYg+O=0ee-XiGhc)NqJO<>F.rfZ8+C#ZBRhG+J%6LAW!:H4h3isNE(D0t
%h2e16Jr$u3pT$439r]EWo\R8F_#5#6rPuBr(mNp)m/D)rbN$d4,jEc3MTJAKG3+gpXZp,R[I5lN5l$QICtPBdEbRBr7=7i2^8,)M
%Ht0=N1Pkg26@UqH*MSs1O&mQ;,027BVTrEgm+KR]7dgbPTap@j&AMphX;Wm#B"oU%aI^8D_9%Zi@FSs[6nEiPR.TJQ!/PIaaKUPK
%&*OZ%'Y-O=co&%ZP`#MuVaZ>k[VY793rNh#!6)JSkpbIWX(>C5!'0>A%1GXddH<m]CTfX?^"_Y3m2G?6P:ZA]E?AffjX+fVQR/>N
%??P]@YtAF"GdT?+.dggYLX>4*<NjGm["cDhTkN2rm:Z)4@C_nO*"NI+SoP0aa_F)?G7OjS^@s%pA3=RkL$2_f>B3\dWH)H4f5),#
%Cj&\8"g-,SW,eu)Dfi+89@NHBC:ru&4)WtRMnuIQ?.6GfJ1aHf3F%'cK!M\hKEPbef'9N!<@Wl)<_>McZHZWJWe(si(nuo]]]IG*
%%Z""PF8Pi&jjV8Hjk?*i?P@2!4FUtAmfP=lTg@-g,=TVso&A.9GU)3?U$e;<J=:c-l#Mt6APdQPN"oHcX=,*fFAXQ&7^N@r%9=&S
%S#%8,VLbo!-oh$aJlH[=E1nnbbWGL#6U)@-2qH2#9!hjth&1OESQXhh)U)D.F>?>;SNO35b!Xf0-tM@nJsNb+FTfpqipoPt.Nd#P
%RK/Kl!V&2cL)G!@6])rm)p&#mpRi\7*7,5i]4c)NqhL!SIB5om[*uK:HcP=sXS"V*'2)e-SlR'D1o=9G&s]F0l<i9)^O`?e-o`m3
%Fj$G4F.?<35>Cjg#'G9JYr"?TTaHerIc[PueI+C<1Bae(:<hMO#Y14plm>s$<'ghH@rCa/&D1s^Gd4DCi(0<WG\uY]NGGL8Ib6h,
%]tT!'d+bg%M0,,6MK:m*8ji=*4ipi4:=Fn=ZIalPVX%>o>7lHgMphsnI&#/Bqh\K&jW:A>jRdNFM:-57[dM,YB=Hq.ctr5(YT0@!
%CZj;MNj\kGjo:1,XUekfPf?;R0<@]L@[F;1W_V-!,32K0We7^IR@l%(*LG.;2:IIK_qb-R'hZ]T'Ge,k]@90ue"!I,Et--M"_qrI
%$bS<mU6T!N8V4L75UsKI,K.4&NQ2%)OJgJa&NCbIAR"^4JY(JJk<W*<e\W)-L2Vr`RF]lF,_0%20Q/QCWqoP>MmcEmV/j<'?L1_[
%QoC2rcF9->g_)[cp>1BIO4_!Y/fh`no$UgJ^NHu"Nd_TO\/W$cd#BO`$:48MFXeu'`Sjn+d_!#n(R5f<cCJK?o+8_M="LM7/K;nF
%"(C$9MJ^Ys7";?&&9Rn;f8_DHW[!Qdf3L5rfT;6#qPYc"rD9jg>@1SdP_r\ULU]g2i;A]]_;PkMCmpmMV%g[UF>U`-\K@9$9-gnT
%a<O*SO^\-cYM2d>)/lrd@h.@b8so-&-`rH/N6Bqi/M8Z+C"=_MJ'2c-r&-Rq1fAX?Q8575H;\3X4*m8ECP_T6IjT%gqm>e+$X!SY
%n/e\VU1G,l..q>FP0&l7(qf*Qo#]Oi#-i5d[bZOpPk_Ggc^Ss53]>m+U0.jGdBUTb70,AQ%Zmc1U'cTI#q9Ad$mY1TPJhHF<7`I%
%a$L]I,\-Pq%metCja@\h>o'7-j5WGsR5+mTdbOT@&!q;UX0WiqO?9An]3KB>L$RH_EY_;G,,$deZ-[Km&$0TBHUaL[Bd7\oY&(W%
%c#u6(=8%o6-cUR8cCCr"4-#Aq8G#oM<dR1A!^ET0HP3Ca#cVfVmo9d!8?u1d6f]^tGE[Z&MiYGE_a<2ocPG&&;'m\p3";,+4a];9
%-4\jI+aG8G_c!RsY`*Nf@0j:!CSt5NG;HtIG$7;(;"=(7U?nfJ`HaJHKd1lm#^!*p`P7fl>:l#:8tM=s4)8m"?)E"NI^D4bfj-%W
%fCe4f`,u)\2,UHbq`3L$f#;9.Y.1@gNc7Q*gYZ!RCm5#jDSk-B:[jM[=4TCbHRMH5`:>ZegCpCp/XP,g2AG?Hj_WG.QY6=,PZTJt
%ffYipI&`s6mm!J?,6tf+I(X<Ef>gbab``%h#g&i>3Ebq10-):("+>=BCmAG$[QBr23D>>W;#Q(:lWAPTM/ohE47rJgN<$<_j_WJ@
%QY-gLQ(U_J@8#eD,2-.;Zo/EXkfeU\?6?@ThtD&#I]AP*=i@KQ1_jo]SjfK*D.?0QWKuEkY?6">`CjB+CYp7h\*/NDL6Yj,3,XM/
%J1U?cJJ.Ra9IouDhZT#'ImW80s6t74qSOu#qeuN4Y!C`+r:956^S''qQ/DT>?iTru_a"-dEc$)gZ6L*#>dDjV/adlK=j6;pD'aY3
%(>\f[?iBh.J,/D[pr,Jt[t"Fe]2*q/YESuiDR+'/^AZ9N,i4T+hjSe5rf;CUrJ<nLSg06c?%'KJRBmOa+#ZfBg/iqll)FT_HAgs)
%hc3qZA&g"qaHo,+1_s(N\ceS]\$/qfaF"\n4FZqidZ]15^kY.K]&J1\?_Y9oJ,D+Q=@@Up8[[$I%&dcZ`pQo(:o5Fi?'L#%U@#BC
%]Y[OagjVR<Gg4Gq$d<.B'(,Ag6qMM3VOq'3RBRErJ@dHRGr`LMd8r+f7KPem'IbZ5B_$'$KY0*Y$8lquqt19lpYB]Q;>A-JSjn-2
%3+lD0_^rY?bBN=O6sia^P%^gtp3Jq&/aRl]o1f2QHmg"c;R)G46Tue/BPF=3*.9]jCCXDAc;CrB,tnRO(`H-TV:C/_:)'QU7$ZeT
%,cY*9pt;f;0@)gC.cCU9G*N??a.ZL08Y*JU"$1aLTW?hfldj+)*1K_]BibgO.`dHG8pJY"6D$'=csqT+0!@JNV3SN6'7oRQ7QMmu
%jq33?c=S)CH$7T_<u5Y;N,h.C=K>!K]9*1VH?5b9lf2jJdlrf9Vp5A`hWccR'eJh:@A2"m=QhKRPbGmWHU>jjH9W#(M`rL4RhNCT
%'="6tZ]?&R2%r:fB?gCb)"L]!F>n5*7rJlZFaLmkrj\#!o@Zk[EALM,YKZ2S5()jC>!'msg#1+GjZkPP)G'u&e=+V*#D@N0j^g#L
%BX^C2j)lQUk@2*Y?-pciNsgBDq<?$BgScZZEcCA7:?_,jM0cXlf<(,2`n5\(9G#YUZ+N]s&O-'H'+96VM1m!DSIdS:(J`$dXll:+
%744Zs'36o0X3O`dH?o52d8tDS(?GVQO!i(FBP+r7"#tUITW?8VbLVGs*1'GY;i$:oh'A'tg/L62S-8CQk:3@mI3k&(5/6<9c;22P
%+//RCHPGpLO%HiCGg$3D&9b>HV^WS;<56pe3.RbK#J,5/]PN#JLJdm.OIfBIQ1T5lf;ClXbItbffbia6Ng5YloK1Hh@W7WBE1l#[
%B$/T'bh1]>%;.;fXCTNa]sqL^*8%<GF-NX:Y7!M3kgdU#=aOKsP4^:%T;[7t.DBR/4q-:,`Tf&@5K)ib?>u\6(nIU;Z,s)KC2DK\
%9d<0A8&GAIr"q@_?d/hBiT%JrZ]j7a$/K+`NN`.TJc7n5H%^K[XAcKUk=O&_V0?NsSeTt%I@b*HE?-O/(Q\Rs&[\!#"l*e"R!u@N
%+)&,Wf%n?BpKJF!h3SSaSGh<CgZ0pcH_Z39j-YiR%`Gur10ri+p$2]b?aguaa5Gt`SdVsdG<=-gmla!&osN)ommcQ/EhZp%(OQlY
%TDu+/+O6\N8%s2&CTq50?M*cs^OPAD;:3(,]#iN<Vf3h0<K%iPh]%,f<G>F<DH]t-1E9ai4Da3db?qbiUiuaALii`SEZd*&0>FpY
%kFqYbnYW?FFJ>p[\WIsb9<K^#D#]Ha,IZ-(ZIDeFibF17DtSC/ZASi\)3d^eb#RLH_+C#FPa;5ObPrNCEU&N0LopKj./`SFAW5'[
%>ZPIKVo#3-_(`Ab;D"d@FG,<T:tAZJrqjhjUm@FI4%[^mQA(,hO-f*U=1(&_SFJ3D/3g0O)W*(qTJ>]YC0$_*i`DZ+lGH?Oo7@\B
%rFUnC?,R2*_(1%!=O)kG1N5(+*(Kb++qf%,D0#77Q;kFKR@2Q2lgd1h0-GN=8Q4uCb1H?/(I03,?)SCaM&.;0:.X:h&4[1s"8'#9
%(3*<)/!h%rh9TtdObo<6NK_cpaL8pE/8E&\<'bduf4jRcq+meqm67&f(glC?dJFUT+Y3FR/(7``7Udd_]u-9cLF88b"&`++),?;6
%]rkh,]:MOOe?CKhkp5q`cD4Dj;;6mAX0HZi410ke2V$J+7mfil`:na]<<m!7P\ih*SY/el?F^E/K1,"Vcko-Q,k%?<ai*8_fj\k5
%O%3N%3`-<J.^i2S9oU.'jBiLu1oFK3O@>dGo3rY<8VLj<dQ03GjJJ#Zpf1JZciY\I6e%Z!Q4M8c7;n&8DSf&YF\oK`D'ka&C;VJ9
%>-B3N`/Ii8WPmM,TTWd#<?rL+\9N-2_$?aR.L%?Q0qC^OR&T5SM"AJn'>NGjT;[f)3Ebcq3YKGK/&=<*7:r;!L&)igda*[)<cJbB
%_hO'4RMZtqF3)3hIc^cMK/=Dc:aNT9-^dB#!bkG16&Am15j>I@KhVgif*2P]E1>FbR?2ch&RR@TQ:9>\lj?R+!!3Z:do&KYmeN8]
%J.I7ZXYOUqUe'$Ss/HEq7C4QJCkZ[uoo^\uYB+C\'hb7V6=EU:G@=3Ir22$4<`kG,LIu_G&Mt8_qGACJg5.UI.p@Te5fXO0Q/WR=
%Co`j2lHk<dE.-3..a=gX_epslai_I9>D\nhf1m=';qIlj-:e@nnOS!7g9E4/DKH7@7/L-Rd?(4jc"]9&F_?@VQsZ`m1$#nP`]?jo
%hcF#WP[$Jeh'ZdB6TZ]EiZs_p@\hhYSoUD4[G%.eSsUFcF!V;5pMJ6"hA$+:NTP&75u(uloC0AJn=J2>%B<;IPc7dO=qAN/\lq6l
%j!Tc0juccndT>Q\o9NHFZfoQAS&Foo,.UT`J4B4#^g0((5e;X+G2;-@BXZ@/5npIE-,:@n@3^q<`-rs!Cth.JGHjZ#&\srOWuN%b
%DUe@$Xsl-Uk@,oU`i8pe3!8)o+6]Xa\?P%M+GhAHAcnuahD9;\O`G,JAiO-s`F>Jd^b.*W(_c2=1;H8BLKCaRHr[N=M_sd<m/9ou
%)k71RHFYK"E%u&&ZbqMbBVI6fP$Zc';OP8.iK3c5C)b)Co-I7h/'X>m4'd$9I5oiMBB!Qq^]_k-#s?]f-[j'o\3trBDH%q-Z3dU3
%SrB^jR1?2em.L!#0&<W<P.)bUq*^=1F_g_[A^W0]h^XMB>l^b$=_@E>KWXTujZb3qhFb%s#_^mc]Qb5&k"CPlXqjfJe7/f"kR/#I
%PndVZ6M;oE-[T!<o8l\nj/RoG"@LB5fc[6",X?IT=N]id\oK>^?Fob68lng7$<7M@9!T#s#a?XQ;ckB#\K23s+IEmF0u:\#TAPVn
%\LEiK]6Z5jZQ,)air_p?>;m.jW,OXF\Vgid>UT32,;?6I;D,jdmE?*:^#(T6+<hCXTrjoW(2-I49W*#KK/kP2HAH*,2,1&O,PeTJ
%Z^()?>M_pqAqrOB.!M!#7pi.+YVmai%K"^b?gSJ0$T:a0_i\eVPVT-$n6&^OeAB`fF,fZWEI@<;=\MIq<GuOZ(Fkn+*Z:9FP&IC)
%MpOV3-4hB:Fhc<p)jUZVPaBRq=rS0NI]g)X.3h1#M'uA4LQ"6q!"$g5Q>U4s6fiM;DO<=3Wan>Ofbl9cX\rT.W`=6<!(*bq"a6&%
%eOm^J'62.",Q`*=YG2Gkm+J<M,1&XZhq5=rTuE)o[/"lH;*O>CXj?SApiobclG:u0Y"3SN$!o7nQM`GcJMPm.F:jY0M88;/Pa5OT
%7asn+[Q4u':G`ZOC=8e7U._823BH3ARh5_PWZ,XON50fS/,-Yna;]Q4!\KG8%_b-Sr?](8qg1O9bU6-f*tl-f)GC!BM]^F-MDkkV
%P84RKa?!F@W1pXYiQQisS'J9RN%["#9N]"KNRVA5o'">MZrLP!n+H3<[&T61YIbrrpVl>>(@$<qIA$>TlpgD=r\-5p272mLc[YD:
%K\'](>)pijSHN/4XXk/Zl5VAscju^3YNk]!%uV`rI\ie:-$o7u,(n7!o1i9ONpZ`fE>$m$r:\N,#J^.J^VBZnebl<ROJ9g]*@h`2
%>:C\"(pui"Bgi;I5Qn_eDt([)LIA'Wd]^RnVmA31q)@l07m!,j+sDe4i+))fpG7;F:cS81dpunZZXFX3VE"U#TM/?@6PcK?9)UrH
%@5KYk2U.!!*)h_@inZ$")lbYjiPf^$VArh,j4N$q[onfOlWErEM9>?jI\tnb%2.r5Lsj&m32"fi(X!+=P`FpEfo.:>X[&Ft.[6XI
%3+T+H6o1/nl2eSDHupe,n\]*(2s9LEaP6BDCI?DK4&@EZ@A(CfCe7c/4AU!d*CJl6M]:u1(`cU/,WE9`hhC&UM)9H9E^7[$h<:Hq
%f-e/]7/-?>A*&)?@\<$H7EnXC"%UeP6riX5!*uJG\-jTqbRa"fZ_pi30gfJNrMHht$*862l-)aEL!rd4<q=A<-Sm&)iF*\qdZ5Y0
%R?7gY5$G&YhR_sqcm-ph&t"imOI:F\SffDXe7R#B3<.(&\CAQ5lE%'BE.A?sbEDRj4>F$toEGk`4%88m2<AV3>[A;ff;Ug;D"FAe
%oi+9!)=3A`5!0lta;N2u`3@#cdoGpB-:)+lL*aq">3\qCksG["!Mq3&1>4ekOC%+YZ1p,Y7RsdF/q\)`g^ed#11LjE<690kL94S+
%D7Y]]P#sSAl8jiY;Phe/K$2^c\K-0ibRGM"k@0sLO.R"+QKm$S4P.mVG$%NQ)qX+_7X"Alj`XKDPLM9HQMRi4S#XCac(U73IfP9(
%Y)NP[0:js:L+c&"@$T&N('o9qD-/uo.XDHl3\3nfgLsMZ'rJ[P[S'M5E-!$;-qk.a`N7a?r\'83)%2&+K^QPFEKcrR9*/_m*gF]W
%'MC?9W@>afAY-JH<]NP,Yao>o_:TfGY)H-rrOKFuJkM'93qLocn5/%NS[&$/$e=T'&71/aftNX)n=ei$1<)^BkDUN,%saXP\K@E`
%.(Z_K#MQuOYJ<GO06X#I4p2d@?^SaDbf]re\P8LR\G>g8ZFkRu3\`uQc0`8kAa(N)5,BuSJ<2*Nmc@:ASZH10eoODEnn-S<W`!i3
%jM>IX"/ZjLq/Y`<d8b%`+e,fi9=ZRJ=i@87$BrpoLFm6NiY_ob3o"VC]im2'p!Qe:gBo8kTNX1=)?Df&\sUI+%99f^=WD3K\%++a
%M?M@k@<P8cIHnm>ruB"u1UL+_`og;j2iF\6V2fK;AlmaQm,N\F\XhSLJF(20X:reDpYS5!;t>H2qZ,0Z_Y&B=LYm>^?=><UGr57f
%`+n*em6jl@g.#Gaq:e+VT_g*BYhY^gOu5#WZRO]A=bWeqA"hVaRKp-PP;9eU0[$5F16h_'=#m;E.T47uX2JokE,MDrb!I_CaS!Ic
%j5sNaVZT4W__:!u-4/nDl^4"6GF`X-TJ=Vb,B(Qn6k$.gA6aCNV\eFuj<s]B0'LQcaCdDDgA2s/8!Z,&*\S,0WL5L/X%Fd#4+rUt
%4,<?`[U;W#'Rp\6gtG0r![gAoUnt=`2H>N0BSV+D*"YEB&'k?%\1T-"lD]MD?$m15Zr!h.GS2t=<G6d+f/G&M'9*4MosRT6fH&,W
%X;eU?(TR'RR\(Wa+rV06G@7T>i^ZhR>pR14BbF\WVUS`p2Si?7O?7MgFBN:]>XVnbj[YJ$(XdH%'LceT7#qu>2Tk'(;!D[;h/Bp!
%Ze6:OAI]K@Na/^*8q;aN[]Uf??PJ)GPM(/B%s-/F7MGq'!MEnQ'Ndq*BR7&3kal@"$\$G=oDIW.e0%\D2tk;%J!cnT(>UVI39qV#
%.r!<ko$e'L%^*TG76PNfnYG;FJ<ptZisCjbPN'0@*Bb.Q"6EmG$$RU["Ztk5]/'h?3P2si`<\L.cLGk)V+*X9ZiRg:-`"m*G(&.Z
%P'_H:-ojo)ohGSfh8gXl%qBhiAjc5-D7NNX^`5AT,7_:O>dH'EKbEFuQ(P7t7Kcj!j?6NC2nH`goncT</%.*$,IcgJ3jXp78&#l:
%qTZ5>MhO@_KA]k2?.C"R03(>&VjN,q.TRfN_QT@iTOT)ToGGX_olY@5Z<#`-Rq&SW*C&-?EJ!SUmt5=kLD.6.)!;4fHgLE^qIVi.
%g#MR1'Mg%7mf/aIn'.)-5.?La!IO&Gku_"7FDn2^4grmtqPl^t=UXPc>DHOV\&Q)_&+iu+htWeX7-5Mc3hrlLS`.MK,<I:Q7_R\2
%fCQJ,Q&h"gEJ3/pRddf8`2?^tfJ*MI45rD\gD[FA4hJs.pCF`Ql$hFtSaC;/8K_$>CT&YCeTn-m%eo-Io^Wh:#@G_`1Q1T7qe:X4
%<Pf)%6#>Ng]qJuJh4&D=/Mpu)0lG8/\i$9*-KLA/<KTAO*J:ngJ-n-XpIjFB'naY5h>P;-3L[QJ1B-t\+umu-iuTTWb2'PYJTd2+
%ig6DP311)l4*n6+QUf@<lDu+/]'=NF>YaO"jFFm%DB*e@p&+K>Y"u\L\L6g_31e1@nHGY.WG@`n#cflk'RFiP>UuedKC6Hko[28(
%N<IlRNSJ=CT&"J,hd:=TH'NpuO2hW:2<3**$10afd<!STW.3fEj;s,(Frbo)juE?/&sQn3Nln#[#a4u>csdT@$Q[[$M]7h_;g^&p
%Cj%TGGDe,"Za;TDHO1.C7RN*a6[#MEJG9S=F,"6J%F%W\crt"?,0GfG"Ck4E1A%S16T<gX9G:PbYuZ9mDoEi')(]$Y[88E__kP>S
%+]ZN<U=Zuq#%/\EFidrg\UtLOT[Y\5D.TanP035o+r9e4<Qh,+PA-Jd?P]\)gdj%:0i2T'4c"/?T,%"/h*TYj$IG;-2lH@ei8;f+
%:N`Hs3+>L_$kYV#Po+!H%S@O4_m5hff?-rG_M$:Dn(`(d](sL`7]aM1=GlmI_Jf)>JPo>MZHVd/.-n;P1XP)pr/)5cS+R`;>-=2$
%]q)9Do_"]%qYu@ZV@Zu;C"NB7#\F?KXM;)/he&9"VZ"rT5EBC<J,@d"^]28sIjE.[ci:1uqpfojrgWYp+[=+);mF#BBA!5lRJEg5
%1W7ZQ9Dh"VAj2,a-Bk7Cd9&fgB>U^dE3NA[<14g"MRZqMg(i88a"]Heb'QGm6<s,%+)%rXVlrm\:sc/=<Dl>!<iffEMFOol&/GXG
%lDZ9AjA`i7mRhc]k]NY->ERZ^[;[>H'><j(^"9G`e3B#\=Oj"uA+5I$4QTVRQkfNM_T:js0qbJ1[u$3%:::G=a!q[E]nT,E`k&dZ
%_4d4YPWASTl-*1(HDBI2[l_ae!,7PhhOSrfAf(Ik+sAjDCGkKW@Z'=\]B_r^Sf,DL.@fK!SIf5Fjq-;j:9-3'[.$I:m8>:9Tc*r6
%F(:ACR6YolM*ip3V@up&A>?FcA4p@Gd10llI'qPBq>]:^]l'OEbHF^g57L97;#K8n!7I3\[DhR\S*eT]cCYsbEB[`Q5^T#=n/S>.
%-,pn[H?0^/D+]Ik*+Q8s=V(9%/^t6:;cV^6b5UVc61$Q?j;=p:4iZaipG0N0&^"Ug]O+X1k[H7qY`<p#QoKd6+2&lHJ7:6'h[epW
%_AgFtdC6+M7$X2oJ!1Lk<9#3(,:K.GBSHu,4gM%&k!i\e%<+,\.,L=X;UO=A'C+=![nt.'')(;9-]3712`ZJii\g5],m#(-(U$GS
%g5rrnJWSW8rif8_Bq0+R&T@?]CjlH3iOZi[aPU`I<k/9=Z'I6&;YR[PB_dp1$lA2Pn1N/>NH.iF,&Of/,KEo'n6F!m[[.'WF4ZE4
%$g,@LqQhY]U"<8k_,?4[eU-"oD-Y*!OXXfsLq,]^%mlRZ]"2WFV4$d(SM=WhOD:&8nkp9W"en@<I6Yp=Lr\KAI,d]2Z]o&J0mlD5
%Rjr?I83h+RKN.>&Q$70ELjj!8`T1fPPimlIX:-K,n0(t-iE2ip#a*43"t@7Xpg)]jidMigcaCITbQh+<+d^2D]_*j%.uH:bJ4Ohj
%mg&2(qOQ^c7KjI_j1V.5<q`kHqVJqHWSdXq4n_*f,u+Be2Tm9(rpAVBr9`n/^]0'rrT4pop^`Nq_bXQs"J[YR<1+&$b0L9*KiEdd
%M(+]2a;<8i6m[p3eEsWZG;6eBTtE(LLn$b2`M.u?6>6QmV+h?nbJCBKkd>T!\62HZq5M5r%b-tR]S)3+dS0Y>C*)"JAT@Km8&Ue%
%5c'.Tk]A$a-ffY=(tHFl/&K$&',qO197K-lp%iuX9[#T/*o4;UMOpHtWMg)f'Y"C$(k'fEh8=DYUa]%00to)`kk7.Or/g]_A%J>$
%)`SK(]Y8f0Z@CaMh0SDEs83u=Q[ekDs5TaNf:W*AhuEVH?N0O\r1F#R&(Rh3C-je#4#%mg60s#"b\j6KV?9haR*IR^>#Q*!]:#[^
%<Tnh:!jJ"6gWTp<#d$1]6*SMQa0Ra9g+E@uG*kq#JUB4REN?[s#j#ru>TdaRSWFA0Pl(7T+Y4&HcDpOu1ZHELfb_h>mc"=.I`Q-F
%ja8)V+]LZ"d4Wi0i\WDIfj_CC9Rkk7"bVd'mV?fT`F/8I&'G!U_6[e7G`K(MNl_J0<#p]??Gd[%U>c6bUa&rj1p,9=$Otcq8@gI=
%,Dk+ULhJP)Q=t"29gR3\;V(27*g>5^FJ07L2=9-<)AB]Fo2.Mq49q"3!R9[:$3QJrQR#9"Ygf\SRHToK%*G/N5"H?j#HESZKuVoO
%j0gHa]k^^)+YESNV(1!BL]e`L@j8_1+VUpPW4]c&>W6r"D.&cmCB7R6me(gJ3=n]!6CX`2BHKB<U?/WJ\pMZX#gGE*&[gHXON)\_
%J+h^r!7"`rR`NkK]1_\(Vq[Z";5_pK0%bOeNsXNr*]>(!*ZsR\LBHQM[2,'R;&#U$W\N,i<17)\#/8fa%9$%Ce.EoX2ipX>T#_tM
%>u0'AMg^qnY*>NCjWjt?L/Sa77_<<me9Fn\2<dSu%)JfM:q+1P1c1@"%@`,*"q.G3:PrV0;%[QEqloB9cpW\n;MgW=02aab7k/JZ
%1hFee`:&%t)eb+t(`#9cIJpD'ZNN&<HF%j%>U[;8S[s;")7m<(kd*EUWkK6=(%lgj"@/c<T]1[L-"b6)5EsX!+6%1\rp5RVA26RY
%VR8*^91pB9<B;j+&OB)\&;J8X``MZgqGfA_M!Wsj/B&0UF>6[.B/<iq7Cf@C8F9II3sQ^LOuU*j])k/B#8'1gK3^Z1]V@/QggXG)
%Fdf1+k$g?tXm[U8'R^-fM/j#)QrK<!:O\Ug=^tY&%V$!*o0>k\6rp"9q0j65juNP6C4]E*(f+f4X"RdORqOS]3*Dl=Z\VSFeqZ[U
%Ga6oi"&R1PTjkFGU[rZMk%nND8\O]M8\5ZnmX:ogO(:n@q9`p&f?Cd;0i,J7.VJ6*h6\>F@5!OSQ!6YY/Y8j2^D)%JZ,kQB-Jn1@
%aPEQ-oNnkC8%&1ugJ*qGHWkb]G78f;q?5eP<;'PfF`&Up(hR-<i%?TfNnp\(=T2IX`_Ik4#pkO?]0jkCRnQ!29H]_!.LF'(&&8.d
%G@*iK%1qtTk)Xp%BecPKhK`Ru9JFY0Zo++bbP1Q$n`]o3fFehmUM?,*_Pi'SkK/^tPdYn2Sj_C%4F_.Gq$7'f+cD<>L:S+pHK!P:
%;IVC!\)`COb&^H5FJ^DN]a$R#]9Ma(B$F;ZZ9^Z5CEiiVHsEN&;`YjX+n*[6d2+dRHN*b/r=b/`+eHUCNH%'soR'V6>/#[h_%ls_
%oeg;$2[b%^TZ9ToBJ[gO$a6@2O4A:[a^.-nkT(HmXAbp6m>L`,ibID)mSWi#\,7P2q<Zb5AJ'$=6k_&K'3tBblJpg$2FY\aYtlds
%&h$FZ$9(A(jQT&k2bJ_1IQ:b*Js[gq]3U1u*aNka':0">.0ljq\Z+>-[;eNWB26s'ID4"AmGl98Z>>jBrMD93\n/M-lnU<BA\77V
%4+>:/gnO&n$!B;P+;kL`$GTFkQ[-6''VdRF4j.&8d*&2:$[oFh\!UN;Tj6nDbFc0\3MF&D-gKMO?K^5>EEk\K''Mhmg/44q$YW)_
%'fZ_'3Efm>6<-UU[jP.[qR\MrdH5_WY>=f%r:.QBNPKgt@WM*Q6*A%(OV8d#jM6pWi-sJkH+U6541b:`qF((ulpgD=r\-7&3YTso
%<f.bI(,RGBb%=s27pfPf(.IFV/\ha^:6(5BpYu;%<6e.&G-j8XaRQk(oH?`:$[R*jEM6.H1!GQ\+2=Vd:.j-ca:4]R3RH=DqfVer
%5*!l`FYWf)C0=*sK8EtqJrGr+-q(?]i9L\i+Es;AR.cG167YS;s#QDBAiE#`*Z1]'K(u6o#YX3qU%?%MNW2iN:kFjGjdD!P+Cggl
%E\VS[^h0T!RQm`c!t9Z7,!ge@:u+5F0J;TeGh[i-5+VXP/A!JQF<,DoU].?uqaa.FodGhT]AnL>Y[/M(e=YF<(Wor17H@N$3H7UC
%`Dn%gZqZ?2JnVe`I)@cgK$p0aTI0--MJ@JZW_hgHj+F;]/hGAkS;@gr+*uA#;2)ESVW%\H3,s/+jWnPk@0nV%lIkLc1oRkJ?H5_%
%T/JjM/(b0Id_ot"QKrS0j=4i3-#)58jB>Q`4od($hn@B9@N$Ke?;Mb%=_,G[;A(umeWte)4P'>?d)Rod@_8c"5Y[@SUWKn\N%eU3
%X,t5EknkcN\O,aCr\lmWVoF[_A4qng*e]9,1q=RrAK&0KPPmj4:L<,\Xog]<4ODWhWh[%qTC?:\rn`k;-Qhc18fkCP-T)C7n5:AX
%YGiNjOSU1ZJ!.'?RS:E_ID6In\UP!R>W%M((gqF;(6o5mb_^2E?#.D',Eh<f8kR[0_^m!HelFo0JsG=depek'ZbX^>jG*icC!d\p
%):'Y1!E,Rk2p3?O0>)c+V.1E"2`ll$*+qM\D(m/fCBjEIlu(EgfcjQb;]ZuM'2V(6_Ht5B<Z_S>'CTSg?S\bCNG:mBW[aA[WjRff
%7<(@rj;DpLEZto,`t`C6>\D:RKTpnnQk%FG</Udck@>\Yg8Pq"/lUKenG2CpU4!LcoBic,J.lLeYE*,g>FTNsmo`;B1JjCD"_gC>
%cXAh_Ljs>,hR4#7<BXS0j9=A8p]I<QF<#V8QjX@i)ho<6Y:+7NAR-ldXji.qV69?(I]l5A]R:2FTlq["F#lM1gZS!I9#MHUJ"I+&
%M@<YK:E.O\B#Ek?'f#NT&A/\m3c^n_Pe&_<BTLin9/=W_G`tr9@9!`t*L'1O0,1@b#T3#:+)'uY(%O]d<-7:\iqBQ5R<<N3G!MK>
%Plj6Jbn-$9irH&82k$6ZP^;M54sA`Ze^!\(`=$`=K]?n\mNsR']2aXY./^4k4am[O:NB<7oUI;iA"`;Ck_qU;n3dpB[4eVp,V-Ir
%Q<`G7IIh:=bmoQ.H62ekT`D25kOl7cM*';Y5`]&/;&C[a`@c^/'TaekJ]b0[iuAkIrKoT82=&cAIZ,&M<-!DGed:0-FecIYY:Vp(
%NO"?N>B1luIq(E1n)+7]n"@?J2n7H=lP&(nV6T4C@lo+kGFs.$88s]Q>iA1e-NC+dHTXOrc>&(jb+0o:br:<-+'d1+;<1#7SGR0%
%b-c^Z>BS"Uo3d^%pCGk*6!R#njp-QBDEcYh-D-GP!WGLO+ZjA@A*Ft#qf.Nt$[T-XflkC*_mOp\f,]s^qq-=tMiZ-'fB)<nYYQ][
%2;R<j@6XZM(%J3*LnkS4ZRJlODB/PX>q<^2UF^'u:o2D=c,;tlo-0sZ>S?c;(!CfIj4PBb/ku<4IN..+lP_pUFm.r76O0Fr,\Mh`
%BMl-03gr$j].58oI6QQN?hSJE5''pTGsSLQ/-Cc_a"2'!0aep`"rHGOd:Oa/TsWpkSL?[ndEZIAj[`#"0b"M:3W$>6=.>_EkP7)i
%)<2(#;'RH1pZ=lWg\:%-a*hH65'nWf_OCia%-G/dAn%I[R98Z9^iD8pfm?%62\ni'U'^\fr8i;H9$4)>c?:4SH1oY52&#)!g;\>s
%UQ#qu4*..Qlf2j]C#9bq:Rq`TrT6.BDY)\p[*e&!/G'cc*/[/]SPY*KiSD$irj7!s6E79'T?#B7?Cj<%<3m^URWtJ/%C+#rAPJ]1
%h3/NF/tXfg&,XAVI'SCsgEK!#27KroKea<\XiW?&^e>aGitf:iq`[4u))ghe)^DnZWIYi$"9p@+KQKq'(X6bYTGP)q9QLV'.[s7i
%RW9IJC6mu/O%)mcqP"e_i-iKbi"f?!n#/Gpqn,#re^7I)3*+dhpZ!!jTKVA:)fe72`CtdMd+=nEk4t^M>!>4M>E/CU^*-pO3]pO7
%JC5hu<X.eJKu6;+9h!Z=(14MH%3u[bBpWdk]S'7+/-`AVZ<-1o:T+WF;juN'kDosVE`\m6Ru&Q)O',N2K!ilqbLMK6Hl^Yg'D=bK
%T9FW+Q.Va-F\NW,<I2$F!::S6a_t-/?X/6.(06->N=q,J"CEh8P["V@Bfm2tcr&fMF+&uknXn2"qd07'/o237/[?$j=0#8YN'<]K
%ie8-[-g3&^3<ReWq%OW5@_45)\Ej?OIX0I^G5AS-8rC_f9L/kk`IJQ;5Hu'2In/^oO&1uSk?n\<Cr)*;gBrY3:(p8\6=f)e(/5\P
%iX/D.U2jmK(<!&R?@uclo@3+VI^ZY$(_%q+FB+hY$!Z!R:Nn%*W?AK:eWgW]]2&^Wgt`5@RZ4#W9OlW/l(,+8AjZt)JDR@dc%=70
%+(CD6p$oU43nq>F\M't3(t4Z59$E[`T]##l6[^KrOZ6_(`"8-3*BH]$De>Rb;1%Zd(fm(pT/q9)UL/2'm'XW2+*!`JK36W>%\$d[
%Ml/#GR06SYF<=883A0oo)sW4s/\\[?lU#g1=OPSrEG%ufej@kBc]2n*cI<T7WdZ]/MRA^,*"qT.g(K^C]@[&&:%Hsr4F)ruH?S96
%DW\\C6OS<j(krfPRWc%oirc;8IJ#hG1:6Cl;T?ntIeO:Eh4%R4P'CDr+&]:>X+aNq:u)3)bfA!QW35Yh="\)Pl&<.r'Ir!2g<'#@
%:350@qWGOUd5;EpQ)9_idJ>iTa2N+gp[TW9(HWf+[J?ePEMK^5oGGjU<ABpp;e6mTp8;(U`R>ZeChd0A+ffrLDtj'hYX.Dl\Y7>-
%?QS,!PO#I@SaiTl;CG@fac]j\Ff0C-)AK38XMF:f365-?Y7ed'WT/6g\gSaj/n5pB6(t^9RZ1C4G(/_Z7`,MM95=/gf7P+gemL^$
%MA"N<=)cU/l`@[t+I,b7P_GL+S?PA!VD2Xn[Vdo8%k$6_:rFiH8TlU6>TTd<VVfVgg6H#BTUX5E7__\8IRrl?_90g)"G.ud12'UL
%<O#/c8aRG"ZT7JoI)$Aj)cOc7@dunrD,T%RM$BJO8:OPEcj#b_%+XB@-:i.*M?eZ('W>_g8Ur$Tiu=3ZG-`VB5%MXE'h*(D%?1uL
%AZ'1*3bjAP)4BJAi!GT4WIPkc%/X=@4WOeB_q>1d%0hLKA:+.W-%^X*rQ4n&kQ?iuUEf[b(AD!r#GL*!5T'57,@=h\f2nuVh[+9t
%XGDKJ]lY0L)&T-HlIJlJORdnY(mZ6Y)ZMqo'2ILOm#O%+N9$E<nTq#6V9$'e&IAdr@U>t59TNrN=AT8)[SA5&SVc$$P.1Q3q90VM
%]&L*WJm]e77:ljZn_[q;)X1L]'O5iR+i]tlm/qrb*C]OD(=AiQ%dba\asd>d5EuHB\i&6u.M.B<,O[N&r.82"e\L7*D;f]SOEI>b
%)9$pFSO]Tf&hJ,?rrYhM0"G6mHSTP:5*=<r'YTIh&W.K?4/m*C7o]5=.,=c,mTK8U+@M$YJ;@7-PHf(A$C^fk7!Njpn9aZT5\/J5
%AiNAC!(O#mJ0X7im3Cn;DDe23/ISZ][XCt<LqQ^#Z)#ZLQo$k(M13F!1ZI'$:l?RTW3e-&;;mRn":e;^5*L\r8T#T:KDsG$(e:V-
%[dsT1btuLPGa?[!eNdg>oAo2HXZ4J0lBo1AC<u=$%>9pm7:<:/fP-m5Th*bF=;ZKaD<^8b?ZecI:(g>B&44jEj5%&)WUNk[.Ye0I
%a;6nZX[Ji`WJ7,oPV@E5oDhO6s"fr7#"qQs\k[Ss=[?hk.PP('-r?coV+$Dc?(@o5mn1cn>ut<@k8"A.6cHYt#7=$0pNHXl)WFpX
%QepX6R7Mq\JZ>d-VL,0na*r*JXg)YSqQeI65'>KuW6SG+T-)F8L%]QB6e(hNU"IF%-Y29h+5-@BUHh]PTg/nb[tpr",eKBioj)[G
%?:/7i1-(<F9T^hY5!Re88APO!<0n?>3)HcY;>p4#d;1i#C4aU5G%"7LYc)rMmZQMp'Q<[cIBF6YB08/Y]6dM4#Y,8T2Q@N!Yo>4M
%/Er%%qbllA,?HDT7b]1"RO>%YRHfAqSE_@@?<?KVJ8CS92g#%^m&XeEV:=933U\RC+/l\gPK!%E23a?t>BG($;>Ock0C-1sK:k[Q
%qeKX914f&S2E-SbCn?I;302,XITQl:dn7S8,pH/`31-MA\iGq@(0ZZH@Js"<Ar.>!)5P1Mc(5Bu?VIo.B,7`mk%W1bmH&PRQGe\U
%X.sJ+]Y6n@m&5o@S!id:5$c_gFpCA:Ds:LR@5\'n7<@(*9RR1CYn<.[83l[#,>q!CG-NAlT>O"uZa0.T.YJP8fL[o!"("N&&lJ.'
%;p[9tEg-nS5h-CM97fEtGsZlB4AjBTK2OG&EXi@Ie"OX8j<##2EIe<<Bs\GGMrk%ogniG5lh[&glS<i<";Q;qA+lS-%j+Si@K/A0
%PD67gNA8U!qbCQrWKLu]Khqu5]Frs@X6SO3qu(!_J,Z"o(T\GPqbcX:l\>2fk5P8Rhp!g(p\fUAeZXJoj_s+oqmS6YE0(r,Qu7EJ
%:LAVI?e6q[>F^3;0E:`I^\Q-X^0be!jnJcL++Nt@T1fN?:i,n+oFplIKJanU-e#*Z#N(0Vp0/%!ogFWs8^/62#t[H!Zj02pgKL/@
%:$MXB9nKVeW/.uX*3-$&0#ji(e\?B>(b=/p,MFGg.&/*$2(Kkl*BM^Kn-BPci_(s\)>to`Z#%BP:\=$J)iZ'J8-O[sP8$_;8YTHE
%q`/4>S,G&6`SG\XGh&H:q`0@mM_5crQ91P7Kmml6TFr$f88m1-+ouEh'Wi!,;W>=9gL-_0;_'d(S3RE&I@p^ILN/u$-plH?f*9+5
%$"3msqsO`GBZSl*s%YCZRCJjVf[VSG_3`%uf$06Z)ZFi</o_%uKXE(Lj]j-'1L_7-H@85XG26gZ)Mp\Z_*_3I.GuS<@!L&.gaHuP
%`L1:5'W9i2g>7fsQAXbEhS%U(Q56P*i\4Q7G#%Vf?MEKJ3cg2PV_/sg%4C5MiJefLFVF/%2i@I&G[jljc"eFc%c\]JS0*:.D?d1u
%nS'K7@%e2,[Tig4J43O8kjI_qmQl;MU'0.S9$,lpnSjoNl'U60l/Sb'>u1+c7*fR/;<;Gf0,tV<[!I,D3C+.gHugif1hH:)<+k6[
%;=<uMDQSDU3F>6V*p]3PH[tfN\053507V'1m8\t*2X4eS.bV;F>O&i\O/3?6gDH!B!mt3ehrAV8J<$J?d<#8V.%CO)a&aM[5^XQk
%F0-P=`RiN3O.ed>(Vut<"h3&p?Udc/X/#T`d!_M@k[T\bF=k_e`k=!cd6-"A1%P(M9_)37Et+aSa'S[.G+@@Fr99g/9=Di1k;b=1
%4uXg=I$J/$gQ"n#(e2>bUHk0]lA=)4Wgs^QTfHsb<3ui%bP=28#M0E2[d2;`Z]C,]p';oZ3QQYS70Ks?)4.RU!17>l^Wo+H"KrWk
%Fbr2YG`k]Tg@+2?<jhP2,9,).Wl8Z-W:(3..\2W5k>pgsF0?)1O=kO:Tl-*A5@+]Gn[bmWEGXOgmXcL4[8DbpU+\OS7',M"h1nQ/
%k*ctSTokGBcom8i:\9hA9&fBkaLsc$0!A'04\LpcFXD.aM`DE*0#ueYQm5!2-64]qb)C[pcjed2B49u_\M52IqrN17mp;NjKh,-1
%b&bj/S0VM7pimb\E$*,`31sdKS>\*Hj)o,d*pk"!q<6kDP2dD/=?_3R0mX!0,AXo]d(OU?oNXI*C)ch`@rLLNg5`MtR,[-W+N2[;
%C%b[0_b<khH#k4N\TEJir&W]B<q44QopMit]3e,#h2r*h:[!kaQ$*-@?FG\gE'o^I%jM<@;.Y"B/@i.D;oC$,g^,#^j5a@).omrE
%cLUtnZjQ$;gGX)\\j/4j1%la?jI4BSrVTcQhWuF<7dGI%E+"FBO4S74D"^+qpJ>miragQ]#!q:+3Brh*LpAd#r.h$9H[P2]*UV_I
%SrKgVQh-13`oMU2;G,FEE0>cF8i>'!0gG5VDH$rrgq<:[OhF7lr-"J6f+T?Y_fDYMZre$fnMVk"?Aea8W^AG#%Q^QEgoc3gO/HD*
%m-2p9!?HSKd+.C@FmIL?N6A+o_KBT_aZ8#I6d!_Xf]Y=')nZEB_!am(g(R)G`8bnSLa1551Uu<HQ*ht.DUkGIB+H$51iU?*(u(+h
%kg^GCS$d6$7qW<Rp%iphqR2G0o;U.=BhQ?hZGaNWS;2e^k$`h]n3V:f,khUbj]P0K'8>!!\r)QX_0jYj3=cLDH1oT^q@]'a50h3R
%@[C?G2@es7b^lp'+0So+p2OXB&r4nF)XaG@:'5C$@\i4gYLJ@e(>/RS#BY@iJZ^^g?FNDpB_RmM]8O]lluV64HCZra)`Mk^k!jQu
%n(6rFHTs98RI.eIF_7ge@4q2W*>Wmiq4n!*Xm$e9_okf>;B&l?qf8'qJ9tN2$[QWENBXegrV0^\G8gd/FQPhiYOCk_^[:(&I-*OJ
%@Ra7DG=ejfa!*_)QS`C`/nD/d$kXc0IU77(FPMf[\usE?FmGbbg-)V'UQ<GYXT3rrr\cX6!;&c+#B]V#5ZbFUf<(,23&[Bh'-q=G
%HJVJZR<VudHg'nPC_-#`k8hoh3?ICq7??'&]Coq4\>kTR*`mJ1nF$*3m^#WnC5j4[d@15Dh*,/S547I`r'g=tj,UW>jLc`*U"ebo
%4i$s%4eUh;51"G$+0SnHr6aqP7iZq>/r@8tn&P0#^Df2+UGiFh\p_5/IGDlJq:(g_(1r\Lls&HjOn4mKLMe31pS"o(g]KT4jo\mZ
%pjG3jKDn'*c?j$pnSq?dQso@Lqsh,N4hHgY3dPk?X5!MopW%\%S)6@BIhYW0T3Mq*5qU6QJp+S29)[V`7'09H`X^Fo0C?1`X,kp>
%I^#W:W>m@cl'g(;T^jRA(%sch;<2c*lBoqdKjb9-@Z93kMe-rul?M0a-d'DsT8sZ9`\`U\:Z5Kq_3NPe*4`.U2+&No^!q-3]F?WO
%r=0BZe!-tnP@B'DB'G/0,)RBF600tcQ4,b6M@p;;:di`eEII^h#,e1oG$$?MQn9e<:o^5-\W,li$26V;!n@O,3>[@H8ZCZ-UkH-j
%_;7-)N!STqR?Au%d5]j%kiLJ^7m5nQ6;$[d'neQl(2i4$aT6^KcZf2/I:H);n`V2P@Q't<+=o(m17:^Z(eU.I-r>^L/[!/l_Qs_C
%*9Lh/9,Mt(-9iHo=5\Xe(u6UYJnVo7)o`pK.QrADDhntR#sh?Kd9"L3Lnm`#-lE+9E!WD);W@kR#`=iGCfEQA;=?p37W0h5.[tW(
%#Hf5E2cUjlL>FJT+R51RIRp/DX$"&PG!k-QM^:+q]"@b65Y:\V_7i?k^)'a"rSee8LU:sf@<C"s+;)#+UC&qkEHi][S^<h>(X'KH
%FAMSq'A[Gurp3g#nZd*u/@!N+d.ae;%1.&$^\=:8-'/qcfmWg[YMQ6`N!%L&OOkXoB^LEX+@"p_'X^\]H=G_9$-"(o05*BXhBrY=
%Us+h`HqOUM5G!W.$R5P]M$KcX]\'!6mV]d'dIhqOUr7B4K0\Wd+74UV`,+Be=tI%PF#i*#6MG0LkW)fo.Tt-Di23$rg/YH:>!0jH
%399,gKBSsM_Gu;jm\a'Rh?IW#EBqQhD=fPh#J/LhZ>,D\<V'XEIHG"aU@;fA8GjdJpj5ZOl!DZld9"Lal7-hf;1^8&]$=A*d5(r1
%:1tJU\OTsZPaEa`8+5%AW2`P)]A3Y(4SlQa8K=sJf(8-"$=4`c)[CJ,k!3"OpY5D>I2nYNS-PAKW5QDTBC0j'2s:&\*GHQ;L_Zp'
%`$P[\<RM+_OO^W;PRE`CKo'gS;*5moR5']F4&Rm0eKl4$=/ZF`EfB&mM3h4r)sk<&'IH[sH)-C6iP\lA2GNn5gXumZ8UYme,>sg)
%;j2Z#?EmCg)EN&KhfKB)LXDh)8WB!N]SlJm.Z&]l(fesiR+i'1kINi/;<3&^OM9Nn\;6h3:6#<cm"NSEAr0'9JJ;(Xk<BFG+TOr@
%-06Y_$VF6s?^%A:.FFC]%0A[1(X!3HdD38n,?+DO)OKFT.&qh7]:kG6&2fu@Q6$>oFt?#XNWkX:%sdrLc4!:CChe8hX[T$hb]?QP
%;Oe`;rS=c)\%FotL/c1OnG[Wma=g5JqS,k"W'!J^]d9"HLU,a(s+/PijuMqI"nq9AYe.-?P*4m5WFHLCR:K-U&NoTjL_>%1r%#N#
%22&Opg=f.G!Kq5^'B.AblH0L!Mc=@6p/a;J9l$&hl\m9p):Hsg.c7X7r%'=Z5m*rtLKcJ@&PsGc-n9teD<oG9;&3*S,`p0PF@>X%
%;gfrH'ZtK\FP:8QpM??n9e]KJ)-^bL9u1pG,%@<qKl>:1`J_!dS_Xm"H$>F5N;5d0_h(5$QAJdW0r-#:^0+KaaS%^JYaqtleL]Mn
%6B[Ve0Ci?4Zt3.ahCQu:G@Fe7$]iGQK+CpM>bu0KSLZIIUndGUg(Y@ZjJ"&!R2Q^LQ-Z>=Ld8Y/IVKH?0MN@H53`oe:R"D.@?4b>
%F#5:1o8(2]<+FH7W[g_F'r6_\V(-h^qlKZ*Rj]>CH!XdRM1)5fnn3:okoNA29c6edIRE1(OKrXF6bO=bB/K2D>;B07M'=A9C4_8"
%H!L^Ujf_*b>YV=kM[>o\FLt5fM<L%#dt[X_-tk:tmt2$;Kp\hRdL`s/[s\9sS?X)Ifek4>6_O=GjWZY2)RD4*=9&Y>c/:i%\O`JN
%R3Y(Ao]"cdVNTS-i&@LR7H`&TPR'gS7)=PS6?thm[*=DS.;,f1X5[a=%;<=3.GE2%Pc#_UBK"Dlf<Zo?Rh]B`b-YEcQ@1"4L2VnE
%>%2=/7H[41?;/<B-)TXHJ;U$s\\2I.'N13S883Qj.\mo[kYi&9$)Dpqk%\p'J:qZ%,-0,@YRfZmV%?C%4Cn;d18/,nbmUP)I/i+f
%mX%/fc/Wq5W5]OP:'Fs"'o]_Eot@q+#Y]CJnUW1%9mdZ"()2<S`DS4i)0`"a?Y!0L`P1mE_,*Cr:*6W<6p$ltm82.j\13\VQ6pU-
%<[1dEMNkMGm:;#)q6;DEH9\u=2O&<_ADI%1A6$cK+]+"N50+G8ihL4Ol`2?IZQqR5;;`/GH'/iZ[Qh/(PjI&^]$K_7'&L%d=KGe;
%8jnFIGn0aIC6\Y0?Lm*"ZJ'FfMcur,J@0rBZ7;QUpk3![MeT*X%4+?A84F9K([JntRBhWdY;Hlk00U+4f!CJqPj1bU0d<$"[hLj[
%lG^0AS$2PLZu1[u7CkKl`K8A;GLa7iC:].q#qAP>A!](IdMQ_#CUZL@LQ[ZUJb&kq./ajU8(A1/Q8B!22%b0dK=H%aTe8&Xl@-p%
%RV4Cs`)TZcTHPf'6@0%d;F_UG*Abfn^jDJ%P'"%E:!<IKAQN5[6^cHF38*YF,]2i;W%)BAr4q:t!h(i^qXLL^S!'MIL;]I]4iF?2
%o%,6^H^8AkW\1^nFHeCW<@3GaBSi`eG/a6bAQk^MX)ti4hcE0ta<>FeR5n:(j"4$4Bh!.M>B71pPf!pU91FE=$d.R"QfUN1h\7^5
%lY7ASqHYlg]>+,#[K`Eu;F11acN(P"b4p!-,VO<QcXpt0Po'8uGJ6'Iek-NuIb#-Q<Cf'\13u`]M9[q>@]JT:n/YMcq5/Y,jI@=J
%Qf<m&[C[g";sInZ0WX9.!:$L>Z"GMDNn,+S/Wj'_%Y>RGU8<5%9O2E!dSU%Wq(.geCUH/lIOps!lg'`LnLE+)gH0iJiAm0HK-8c7
%ZaNtf0*AZ7=R4\EM[0O_VY@L';.uk*PI#1WijqR`3D3\bDaus//>ATc#7A%JYjUHg+M:$QY.RN-i#Du,81$U,g(6_%=C_)[STRk-
%>E[72qEcC<b4"RGQ-b+DWjHl@8k#Qed'c#2(Q:?+PA.M":I"g`+e(aZ.6"6Ib3)A+[V_o-"N_mEI"/4Ja.I4j"J0;7/bL[JcfMgW
%?l]njOPP$B90lQ)LL5nSl0dd+87c(t_+^LH#JZ+ZP3X8V;\F_Uk-p-@GcSTa(MW=,]8_6D9D+l@;dE57s2VQtMWr@g"dsA?.Wbb`
%R`K*okt8FOe5<PVG#WqCSS6RW]Q#Zo%$RA0c_>c%9A&bAPd9b9@o[ZLn_E,R8@I'8fS'F%L:CfrA[:D_bY&e*qchQ?G%pJ_Xlbh7
%h*nq6g0@$<[@*J<TIJmen2&TlP+Xd&IXN?\q&q[DNH@/Qa.c(=+ttG)%10j-,Loo]@Mc:!OpnRZrAUJp8TJE61_q%[#Sq^S,':8+
%?/5N2C!kF8gND0@9LLcpLm_q7goe3tR%-mGilEg]!d&<;!,5c0-@&0OQgeqS-WVf,XeH9*;[UFbop9P8D3![F-XiF9nr-U8,#u5[
%q3R(%d6t"q@Tj9u$X\hH1gOdgffH/1-0<PF*fF+<[B3kE>M4Y3PK@Kmcn`8ehJ;#%5,+Oq*D6!/XCek^f*%SQ?:=`@qg\r?m1bYI
%:`>2=cLe0a[.,7sLgn2;:?$M3W.:R#(YR8V)e$Y`EU177Wg)Ml+'h2jFSJ`?f&+InTHaH53_eWj&eUY@mkcqd;Mf7)koB,dDMp^3
%gteK@6cJ2ao!c%F_CePrgBOrDrku\AV4FN-Vr]FsV'5[!OX]YFm=bQKPrsu%IEHHDXuN(bE=0lDBrHt6IJG2$*>XJFA_Qr'hhbK:
%U+o#*ZTlS8'E)%kHhA8^ePmda*jomD:,NAm\Xq%9Zacp&'sbSK7,3$ej6hXI,R;%2B=C/Y^7(_&m7M)SW-o]^<qf(=7FPtph%[>d
%.lsd7Fhg>NA%Rkoi&j0WC'NilTG1&kY8'KpDR`"1f!<1:hhn>PF^DqE\r^;Hfee]"7pYNu5%@UqkT,60k_tWX`RSNO+%XN9\fCT&
%Q"+riT)pDki6lG*%RiGrV:E,ValO@^Y#mrD%Fq;=/l<?&e7!C;G)@U>c&C:TamitRKc]D\LGNM.<3A)r:i9d2Co<34!U'?cCU[P"
%TH];>itS8[dak$>o]K#R&=Bg?`;3=S7iPn>]p:aVJ"mTfl+";]o:O"WSR!]\,B+h<p:<X[-,k>#=X![o;D(GSf+ID"CO&)6cU`V>
%aIGAZ>S]Vu+C9m!X3-Lt&$_%gkZg.\JaBi]D,mmhlqqo<>*)rf]E)ba+K=i8&$?j@-:kjQZ:MQY7HCLc.J<PrD_3"c(kW^'[M1k:
%<smB1I^"?1V_Hjir&BYMrR=Z9<7,5E=[PVr,DuU37AO<$?LrU43O1/h<"_eX;/(Q;+rhpH1<'c;i'I_kX;:RKr.j?LlYV>3?;sGI
%Kpk46BrDlg&hKZn^"$`VhS`/6Q1d6qdJg$5_hDK246XU-q,P/>:7,PQ,V\4/h0m9%8>2OL.NuaR"g_/\TpKE67$#6[Bq(@LCSb>V
%2^DtM7pU!t3a,lA>qW(cStX+Z!^"NgkL8MbM2o[2k\LAs%'b&JSI)NSUq(d\r<CJF(d5iBVTOrb;]Z,b":M*'+Rc&q$'8.oB;<p_
%CIk`#!0&H4-&m?GfQ;:inPM#4?,+"9ft(e$YW/V7QL_X:-ZDfpV4\!09tFE'r=Bk_[L-)mN06"O]Vl0E><:>XePa5`OKdfhfIK:_
%W`5=c2.I/K8%!STIs(&lUJ`^1rq[YH8tEsi=Kl-&("X<*6Q=n*@"&2p4D!5Xb"BojH!4KbV(OLgB.--Ak7CKuQJ',qq-clGRR_p?
%Ze^ih6GN24d1njj(9.Lgh3/T==`hYdO'1@BFE3<:]7uuS8;kLg[,<JE@O+<h@EDl'hM3n.E!$931i1slKYVaK8X+*!GqWr;"k!,#
%>Q4TCn;6i@2M6:+9]<(tY)hk!<?'K]@:XI.`)mh=NX#%+Tr\c3>/X"RG:O"[Zp5bQH\j.'&85WO(B#fs>L)CVeECfoh^!RiBET[n
%9JbA.,8iFY`Pbd.ZVuPr`KQ2c5mNDG=CGt^WV*s2<J0?[Ha?p1W'3+Q9?N:34L/;FO=Ge7=REQJ`d5)iZ\U69l%_fYqMHbW%3`_3
%9_IC#pS5RYJ5j:0)lYmo?:5]2:T?$/k_\HUrCCeC#@D:Xr(tnHR\HgB1aCGTH,TCHAf3M3)agCc2@N6-;*!]I_EY,\cWl6.iQ"]s
%R@BHI#8R::NI$'+,rGMMM@gJQW2^D(*GEL\[5`prnRAS@hA%'Xig:sf.9i0l/Y1iFS:efoMc!UJE1IePCgdjHXk))Din/05Z^3S6
%eT;NT-M&l'2u4n*2iuTRG;q4h!23I]2Z9o7bKA2Un>BHk<VOPd9!l.f0Ucdj%e&o65n[`VF#%4+VD%Z,bf'l17EkUCX(bTR([O3-
%;ETS`Rp\i^`!U6?N%>SW9aW6E<G\p<L/rY2_$6_\KZ>gk62cqOAr1:[-TeJP'MYY1:m)1jf5<8k@&frUEJ.l-FN^o;Pb>i]UqqZ-
%eYuc:):Z"Kj8GE4dKdu"_-'!21R.)aP$_>C0RNdZpVWqi@V)j0oP%:;PKG"7<9""3`O30ul?]:Yn5jEA"1+l]f#7\CJr#iEX;m'9
%H*b`fU5IIHhr1G^#B_%0#0iE]*eo)H1'KYZ;PNK&;"C)k$u7D'Zb@q((Yisil"m.R,PiG/@>VR?-i*M@WE%)9Q0GpEP1&`#9M.A*
%fkua#c&/C>[NpV]b<d1d^3A%0/FW<.lf[,BUT_;.?@(bFh*r*NoKn+TZ.nYrACaqGT:H-_/36tXY]E+KD&,7ff25tc$j*QSb+KaF
%FpVi1nN&Zom9j<pd$8"Wn.*-6T=Z[ad&*&alSDG[n"(OH.mM;s&`Lt:ATO>`h8FIaF-%&'-IuS-C@nDH$;FRC^mC6q/!hg5;U6Pd
%l<a#`6X8m<^'1Vc@s-'2XU1"YD9e15&[>!jdkq242:.nW!KTrr)*PiG_)B$YI^V`8lY'e;i7fM7VpS?nG@M%N!>6t#Rn$a2/3OkJ
%QO[8+g,W7d#+;tqAUAO#l5EJjp%`K2]N\=LpKmc=dI4>F$+":qFdaKV%oiB4<p-Z>M^6jZe8D%=U6j,1bt\>/S#O_fH[cq=SFQ,M
%8hJ"m:t<%=r=E4.6@^lGC<XuY]cuq\:HA[+.T^2%5&AaiW(oBKeob$<C=!C&(:Js*.L_K',Ggf]/8f5NG^p`=U1Vj,=DS:VR4/br
%l(X]4Y1gQ:Tssu:?];?(rYn/B3Kn7.gC@c6I(*i5HKAhg9qp3u`L7[P7p"5X+k\M^Ch@Pg_5/!G2Mp3K?WH3bF5We,R+.BIc'<^U
%g[&I5fNdH^?#!kkVh^:7]n*IKl0MV[_8;cr$OGi?OQ'5!bLF;#;J:BCO[.qZ=_ECc[*8)+AHE@H$YnKS'-b8XYZcnGCCYKf8'#h7
%j]DRYg?:q"alu0Ghgd['9!rIu3L1?:PSC`q*DhuUB.qQ+Oq=qY*30ncb@u.OE_k2`*Kk[@VYIB@?;AqfCG_%4(OP"TGo=q_&_.EW
%j&PUQ[&QPdWMSJ3q;/K8Y*3*"rBt5!nWF*hX]g0pf!q_W.k.7S_^^)>@#7:@YOI)=UoX-jN,.+fVP=UBMq_*\;2eQ^31;0Dg,3G3
%Xt?"tFVO%Ym:2]Q=ko&n\]Fu,G+e5#6o/(rNOO0u>3!FkAfj7M7(o`qC:'*kp;)#_4PI:O4gR9/:J=MM5@>nZL(GZ?W$;m_puC_R
%r#+eDSA`+7=([-_,]_DE_6l0H89b2)fW0n\(nOEu@%sC-/kR[4E1JU0eL>RBh(aW+fjF'l9qBKlb.;#><a8cqP-RJrZP5p8X0*4f
%CM(mBnb/+K\ae^H)qn$dE;m(EOjGSq7C;i(knocRoii5lPp1g`V\?rASZc2ffq9-Ja7YuFIF2Ql/h*]Iq8RXYn@9<4bl42QJJ!Ad
%kS3*BHD%@'U4We$&MBGMm&R_HIT=,ug9RJN[KMGpfqZ>,7lI^geH-s.EQ>6E#<CDl6etVe\KI)]/Fd5.!Y/l;*:B7n\[ON\>d]r#
%(..<_?*UU^k"KC]^j%Dcs7?juZ"@)P3gD*i_A!(0H+0!i?O!P-PDNBFs4ET<%b`?a!$jmV)P%ka+;W0CMcKFk$XX;(:?9Z&Rkmhd
%8ju0a=uSQ-:"<uJ?R$OB"U#LebXMW`ADj2A=X9s(UU.+3^i=WsT@s^T>_XBhX27TYSB<6^bQ]A3V[IAF4NNG35F(/H3o[u("`LC[
%.HS4:dVEi>;4h$/"p9$l7\j792cMB-2Ya8I(25o7<s4+a:m3IN1R^,ZGqI\"AQ2Z1<\nE^cn?'43U7r-BHjD$;9NHPIou`CBn0o3
%"a$<IXV!qO:/i\4(:(\:Y=^XpmCg7I4)%o;[,G[J\_5:pCICA1nnrPLM/>]DC).M&VtIKrMQf4^9Umn2Ku@D^pM8o\gr8Y_*S6EV
%dL%VaX/OtX\'Y,^h!dJG[@V542@:puoPX1sX3o?#=QJZrh!uMU]XC.:gXULPVIdO;m_,H82?0gt5V1<rc$(+l0`3up\Y7b%hRRhn
%EGi;-T#UqQkHV0\,+Tt!a8/q+`1]DAS4VAe93i?o%PPg#c$::Kr$mDcn?J!?Uq;?WRE;Z\O'hF@25r]G>Dlr2_3ER<,G/Uk;ZZ6)
%T'/G5NH[mBA*-EImg'*e`Q(^DE>*`*c-oE5Fr>l"hn(10?Fu2;Y1Nn0[Rr8%&Q;XE=$^&g?tNB8NEQ\.Y/VUo_r@\X%4E*&Z-/s/
%T]#X.1o5;-_[YFS'Kh<qPHN,4*JJ[R0e^EZXIr/fT#fEd3/V+mVR\2P_hCX0m6W(I2U!E;r*:%/7lfJH).AI"Cpr:7f;5kOf2Q`<
%XfnZp;d(b=n,1t,=(K]"(\[1!.q=QF/!alG)!+5e`Cf:!kpXIXji<m>R+oqF'$).T4[cL4h>Z8aJ3<!Sd%nI@(!B+SLTVk[%Z[PA
%=k7?1_k\(5@s4&>L8>UrmLkJCn@IL&p0O65$a4Li8(Gb^o/a?7B$ic,T"(S!3$2Zi;e3a!Z*u:=0/8U[4BI-`W'n^mW0F>_dW2%]
%R1qC_,ZP![/<:[ugru&#PTC&<)Pt*/^osIbZ:*X#^7]./-_N*$-;Z:C>cEBU1b_gZ=j[gb-;Z29TX#?PlBrMX9T:!TVAo\)EPZPe
%[(Qo3R3P<VE1flcLMKpGL0.f[bg,FJh2jqdU-.?Rk5$VKgMU?"qnqEL`ZQ?`\^ca/po\?FW5;IZIk!*T,XR!G=&/*>o7q<<3^Wt(
%F>2"?9:F>9/>V3]0*-[Hd3a2FAdft5<<[?_&5C`]623FqP=8LSnX2_/1+HQE'j+b`$Mf3T-8&nb:rfG?SX]pOH]mZPT=mtrhGBu\
%Xsf9p;(9uM?q".Ko/^Pb5t[o^7+P-Y>Y7bGC!-S<P*:C%iPkXsHR1!Y-'"_L,+e#R@bpD80jF?8AiQi2N-eV0;PX;maq?(i`Had_
%A'k@F"-dGAX^%1P]#:$][FeQSiFQE,AWOHha`VXf?6a^>IRSha^4i%'BrMa#7`KmTQ2ua`cpTW\.Z^U+9P@XdIdqS7mk3.o7Pi.c
%7?TKFN]<1,jj_6T<8E^1#NLt2L6:eCdS?.%$IO87j]_21]C*Mk\rN86^2X9L'/ai9=bS)Y<XYDg>e`l]+Jp$W+tnnn;ok:;Qe%:=
%(ZK,>^8ip;fj,i`XCtO)?m:r,H`Hf)6.R2iF$G@b4^)b,VjYTp&rQ!j.0d9#W+#g)K=4*i1`*kM&uf*<PnmK'?"22HAdBH]3W&<;
%['K>,1<[7!LIJ9g6t-oHAEaV%Id&#SQsQ[1jRqT1`jq,[\PJDuBY2<F.YpAPUI63t\3sE^]=c&5_+_G8%&@=AiF$CLM\9m<\CeGN
%+U4.pZ7G&?GtlBXSXu-oWH24&P\;6%;Vs%a##dpUAK!pje3Sf0N"p\FbgfL48bL\pQF="Q<WCDYf<U+OUpQ<-#.l?]oY((cRE5sJ
%?=S(#GZ6N@F>S;sDW1HRU8p`b_Mt&_CXEo%=LW@lW2]:,4<IYrLHGDj<gj%9g0Ip=RJG^08l]'G7MVqs"UEOg&;iLT4>8_%7?!(?
%V`>@6F_rr[9:al`<JUM/>\'\@VNBA?EEtqPUam9?"S2[p[i$Wnfm"g@B+oNpi>9*WH4"PFORH*^gsNNqCM&Ru/bcKt^f/rdh,;jW
%l89JQ?YCsK[^_s.,cOD9jZ`DB-2#Lu&j@^L:_q?VLmDpT[lAC3R*N>sW'&fY0'_.qP[`K3-uqdsE`ZVI3OUNs%[$62]Xl9b.Llt*
%U6;rFjlal,'N@ADY)pB_WRB1G[#p?+jci@.i[Z8nY>NWnk_XCTRUJSBAC?AKrfX,5))%R#Am"K=ZCiK]H]RL=<&0&i@V7BPQKW3I
%CMS)fN9S.n+48\o9'TQX?#GhH\7KE`c6tp>K$ZnP>o,b"Frd8DF(D$P#9ga5_,C[,AsV%Teh)g8:h4t@()a747o<0(b;-Pc]0Z`U
%K_Ts[+j0F"2'gO'r8?)ckp?qgh'g5p:Vt8CL\&XD@O+M#fH"f$bi2H@`5L\2MK3B'PY$$a'@*3r##SPK7h[]<Fit\a,(:>"/^l51
%-VKBBL*f>t65<G>P%U>O1hE!UHX8"8nA@/N8M;7E]VVSG7hCH,S?uPDd7*7F'jP.&`^9kj)?Nl=nOFCgAr?is70`5j@GU9Q6A'iU
%Qspf?Wl^MO7jt0%`TJK`G3TjEAr09Qh,&/c+lXuM5XQoi7WAW19ISdVgtP-B7<,Z\mMHiip5c/g\r1m7(WV(O84Ht.o@H\Z0:+"Q
%>!s`Z`8;?)mQ)+U.4-[mgn!mTF8PG5T@5=3ag/=qYbkr4j[3T`Apm9_W)bm@[2=X*7+WT1M)<UJaJ.<4,kg6/PUa$gJn^TRJah$r
%K1;>.M")t9j!XH'pcB$1V/XQ3.mj\6koCqJJ2t@rL/hM0jK&hQ\85Lp%ZYK8:G8l+HFgV$aI?1>89AcngY.opKCVGkbbH6]f:T1h
%Cm4+8lTu4c?+D-d#)H1#Xim,O]f5QDFkiX5'B7N(m%>=!h3W0073+no\3f*N\i&aN^0$T^PWb`'V>Sei<3LfKf73HP5QA@l:]KZd
%s7u=(^]!8t^OEkH^\Rb6r6$bnn^kPNDr:Naf73a#s71*Cpu.QHIdsWA8t!q2rqG_S?iK0=^\kRur9DnKr:4e+pTOQ<&0BO9r6=-s
%VuQ^Frp.>qIf\+(L"$~>
%AI9_PrivateDataEnd
